#include "ccConfig.h"
#ifndef __crossapp_h__
#define __crossapp_h__

#include "jsapi.h"
#include "jsfriendapi.h"

extern JSClass  *jsb_CrossApp_CAObject_class;
extern JSObject *jsb_CrossApp_CAObject_prototype;

bool js_crossapp_CAObject_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAObject_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAObject(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAObject_getUID(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAObject_setUserObject(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAObject_getUserObject(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAObject_update(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAObject_isEqual(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAObject_isSingleReference(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAObject_autorelease(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAObject_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAObject_setTextTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAObject_setTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAObject_release(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAObject_retain(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAObject_getTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAObject_retainCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAObject_getStrID(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAObject_getTextTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAObject_CAObject(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAScheduler_class;
extern JSObject *jsb_CrossApp_CAScheduler_prototype;

bool js_crossapp_CAScheduler_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAScheduler_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAScheduler(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAScheduler_unscheduleUpdate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_resumeAll(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_setTimeScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_getTimeScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_schedule(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_unscheduleAllWithMinPriority(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_isScheduled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_isTargetPaused(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_update(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_resumeTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_resumeAllTargetsWithMinPriority(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_performFunctionInUIThread(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_unschedule(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_unscheduleAll(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_scheduleOnce(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_unscheduleAllForTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_pauseTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_pauseAll(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_scheduleUpdate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_getScheduler(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CACustomAnimation_class;
extern JSObject *jsb_CrossApp_CACustomAnimation_prototype;

bool js_crossapp_CACustomAnimation_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CACustomAnimation_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CACustomAnimation(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CACustomAnimation_unschedule(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACustomAnimation_isSchedule(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAData_class;
extern JSObject *jsb_CrossApp_CAData_prototype;

bool js_crossapp_CAData_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAData_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAData(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAData_getLength(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAData_clear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAData_isNull(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAData_toString(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAData_fastSet(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAData_copyString(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAData_copy(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAData_getBytes(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAData_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAData_CAData(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAImage_class;
extern JSObject *jsb_CrossApp_CAImage_prototype;

bool js_crossapp_CAImage_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAImage_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAImage(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAImage_getShaderProgram(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_setShaderProgram(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_premultipliedImageData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getMaxT(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_stringForFormat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_setMaxS(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_setAntiAliasTexParameters(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getMaxS(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getAspectRatio(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_hasPremultipliedAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getPixelsWide(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getPixelsHigh(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_freeName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_isTiff(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_bitsPerPixelForFormat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_convertDataToFormat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_setMaxT(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_initWithImageFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_drawInRect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getBitPerPixel(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getContentSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_convertRGBA8888ToFormat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_setAliasTexParameters(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_isPng(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_initWithColor4B(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_generateMipmap(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_saveToFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_description(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_convertI8ToFormat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_isMonochrome(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_initWithImageData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getPixelFormat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_hasAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_isEtc(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_isWebp(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_copy(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getImageFileType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_drawAtPoint(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_initWithRawData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_repremultipliedImageData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_convertAI88ToFormat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_detectFormat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_hasMipmaps(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_isCompressed(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_isJpg(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_convertRGB888ToFormat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_isPvr(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_BLACK_IMAGE(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_purgeCAImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_WHITE_IMAGE(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_scaleToNewImageWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getStringWidth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getFontHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_createWithRawData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_createWithImageDataNoCache(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_createWithImageData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getStringHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_CLEAR_IMAGE(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_generateMipmapsWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_CC_SHADOW_IMAGE(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_createWithColor4B(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_createWithRawDataNoCache(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_reloadAllImages(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_createWithString(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_CAImage(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATouch_class;
extern JSObject *jsb_CrossApp_CATouch_prototype;

bool js_crossapp_CATouch_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CATouch_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CATouch(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CATouch_getLocation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouch_getDelta(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouch_getStartLocation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouch_getID(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouch_isDelta(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouch_setTouchInfo(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouch_getDeltaFromAToZ(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouch_getPreviousLocation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouch_CATouch(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAEvent_class;
extern JSObject *jsb_CrossApp_CAEvent_prototype;

bool js_crossapp_CAEvent_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAEvent_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAEvent(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAEvent_getEventType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAEvent_setEventType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAEvent_CAEvent(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAResponder_class;
extern JSObject *jsb_CrossApp_CAResponder_prototype;

bool js_crossapp_CAResponder_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAResponder_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAResponder(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAResponder_setReachBoundaryHandOverToSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_onTouchEnded(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_setMouseScrollWheelEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_onMouseScrollWheel(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_setMouseMovedEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_onMouseMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isHaveNextResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_setHorizontalScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isVerticalScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_setPriorityScroll(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isFirstResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_onMouseMovedOutSide(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_setTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_setScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_onTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_getTouches(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isPriorityScroll(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_onTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_onTouchBegan(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isHorizontalScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_setVerticalScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_setHaveNextResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_nextResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isReachBoundaryRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isReachBoundaryDown(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_setMultipleTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isTouchEventScrollHandOverToSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isReachBoundaryHandOverToSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isReachBoundaryUp(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isReachBoundaryLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_getScrollRunning(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isMouseScrollWheelEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_resignFirstResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_setTouchEventScrollHandOverToSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isMouseMovedEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_becomeFirstResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isMultipleTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_getZLevel(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_CAResponder(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAImageCache_class;
extern JSObject *jsb_CrossApp_CAImageCache_prototype;

bool js_crossapp_CAImageCache_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAImageCache_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAImageCache(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAImageCache_addImageFullPathAsync(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageCache_description(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageCache_getImageFilePath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageCache_addImageAsync(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageCache_removeAllImages(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageCache_removeImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageCache_removeUnusedImages(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageCache_addImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageCache_setImageForKey(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageCache_removeImageForKey(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageCache_reloadImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageCache_imageForKey(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageCache_waitForQuit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageCache_dumpCachedImageInfo(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageCache_reloadAllImages(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageCache_getInstance(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageCache_CAImageCache(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAView_class;
extern JSObject *jsb_CrossApp_CAView_prototype;

bool js_crossapp_CAView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAView_removeFromSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_enabledTopShadow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setOpacityModifyRGB(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getSubviewByTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setOnExitCallback(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_sortAllSubviews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_copy(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_isOpacityModifyRGB(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_updateDisplayedAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_isFlipX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_isFlipY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setRotation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getWorldToViewAffineTransform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setZOrder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setScaleY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setScaleX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_removeSubviewByTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_visitEve(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getSuperviewToViewAffineTransform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setonEnterTransitionDidFinishCallback(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_convertRectToWorldSpace(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getonEnterTransitionDidFinishCallback(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getViewToWorldTransform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_onExit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setRotationX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_convertToWorldSpace(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setSkewX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setSkewY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setOnEnterCallback(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setonExitTransitionDidStartCallback(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_removeAllSubviews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_reViewlayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getSubviewByTextTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_removeSubviewByTextTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_convertRectToNodeSpace(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getonExitTransitionDidStartCallback(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_enabledLeftShadow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_convertToNodeSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getImageRect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_initWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getOnEnterCallback(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_enabledBottomShadow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getViewToWorldAffineTransform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getPointZ(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getLayoutType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_update(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getFrameOrigin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setCameraMask(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_isImageRectRotated(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setGLProgramState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getDisplayedColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_removeSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getAnchorPoint(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_updateTransform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getAnchorPointInPoints(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getWorldToViewTransform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setAnchorPoint(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_onEnter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getCenterOrigin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_initWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getRotation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getViewToSuperviewTransform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setCenterOrigin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getZOrder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getSubviewsCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_visit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_transform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getGLProgramState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getSkewX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getSkewY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setBounds(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setRotationY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_insertSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setAdditionalTransform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setFlipY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setFlipX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getRotationX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setViewToSuperviewTransform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getOrderOfArrival(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getRotationY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_isRunning(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getQuad(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setVisible(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_reorderSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView__setZOrder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_isDisplayRange(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getOnExitCallback(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getDisplayedAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getViewToSuperviewAffineTransform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setOrderOfArrival(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setFrameOrigin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getScaleY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getScaleX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_isVisitableByVisitingCamera(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_addSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setAnchorPointInPoints(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_initWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setDisplayRange(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_processParentFlags(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getSubviews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_draw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_description(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_isVisible(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getSuperviewToViewTransform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_convertToWorldSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_convertToNodeSpace(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getBounds(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_enabledRightShadow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_initWithColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setPointZ(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_createWithColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_CAView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAImageView_class;
extern JSObject *jsb_CrossApp_CAImageView_prototype;

bool js_crossapp_CAImageView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAImageView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAImageView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAImageView_isAnimating(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_getAnimationRepeatCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_copy(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_stopAnimating(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_setImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_getAnimationImages(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_initWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_setAnimationImages(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_setImageAsyncWithFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_setAnimationDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_getScaleType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_getAnimationDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_setImageRect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_setScaleType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_getImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_startAnimating(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_setAnimationRepeatCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_createWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_CAImageView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAScale9ImageView_class;
extern JSObject *jsb_CrossApp_CAScale9ImageView_prototype;

bool js_crossapp_CAScale9ImageView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAScale9ImageView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAScale9ImageView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAScale9ImageView_setInsetBottom(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_getOriginalSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_draw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_setColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_setImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_initWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_getInsetTop(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_setInsetLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_setCapInsets(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_getCapInsets(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_setInsetTop(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_setAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_getColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_getInsetLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_getInsetBottom(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_setInsetRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_copy(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_getInsetRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_createWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_CAScale9ImageView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAViewAnimation_class;
extern JSObject *jsb_CrossApp_CAViewAnimation_prototype;

bool js_crossapp_CAViewAnimation_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAViewAnimation_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAViewAnimation(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAViewAnimation_setAnimationsEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_beginAnimations(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_removeAllAnimations(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_setAnimationDidStopSelector(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_setAnimationDelay(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_setAnimationWillStartSelector(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_areAnimationsEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_removeAnimationsWithView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_setAnimationDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_areBeginAnimationsWithID(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_removeAnimations(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_commitAnimations(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_setAnimationRepeatAutoreverses(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_setAnimationCurve(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_setAnimationRepeatCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_areBeginAnimations(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_setAnimationCurveCallback(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAControl_class;
extern JSObject *jsb_CrossApp_CAControl_prototype;

bool js_crossapp_CAControl_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAControl_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAControl(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAControl_setControlStateSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAControl_setControlStateHighlighted(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAControl_getControlState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAControl_setControlState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAControl_isRecSpe(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAControl_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAControl_setControlStateNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAControl_setRecSpe(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAControl_setControlStateDisabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAControl_CAControl(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CALabel_class;
extern JSObject *jsb_CrossApp_CALabel_prototype;

bool js_crossapp_CALabel_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CALabel_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CALabel(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CALabel_setTextAlignment(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_getText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setUnderLine(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setFontName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setLineSpacing(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setBold(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setEnableCopy(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_sizeToFit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_getLabelSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_visitEve(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setWordWrap(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_getEnableCopy(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setNumberOfLine(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setVerticalTextAlignmet(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_getFont(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_getColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_getNumberOfLine(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setItalics(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setFontSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setDeleteLine(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_unsizeToFit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setFont(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_CALabel(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAApplication_class;
extern JSObject *jsb_CrossApp_CAApplication_prototype;

bool js_crossapp_CAApplication_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAApplication_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAApplication(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAApplication_onReset(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setCrossAppCCLogNotification(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getStatusBarOrientation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getNotificationCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getCurrentLanguage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getImageCache(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getDeltaTime(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setGLDefaultValues(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setActionManager(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setAlphaBlending(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_loadMatrix(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_updateDraw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getKeypadDispatcher(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getRenderer(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getWinSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_end(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_multiplyMatrix(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_runWindow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setDefaultValues(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getVisibleOrigin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_mainLoop(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_isDrawing(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setDepthTest(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getSecondsPerFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_resetMatrixStack(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getMotionManager(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getStatusBarStyle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setScheduler(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_reshapeProjection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getMatrix(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setKeypadDispatcher(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getOpenGLView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setViewport(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_stopAnimation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getNumberOfDraws(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getProjection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_resume(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_isStatusBarHidden(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_isNextDeltaTimeZero(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setImageCache(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_isCrossAppCCLogNotification(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setStatusBarStyle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setClearColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setOpenGLView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_startAnimation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_purgeCachedData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getTotalFrames(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_pause(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setThemeManager(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_restart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_loadIdentityMatrix(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_isDisplayStats(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setProjection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setStatusBarHidden(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getTouchDispatcher(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getZEye(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setNextDeltaTimeZero(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getThemeManager(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_popMatrix(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getVisibleSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setTouchDispatcher(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getScheduler(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getRootWindow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getClassTypeInfo(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getAnimationInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_isPaused(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getCurrentNumberOfDraws(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setDisplayStats(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_drawScene(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getActionManager(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_pushMatrix(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getApplication(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAButton_class;
extern JSObject *jsb_CrossApp_CAButton_prototype;

bool js_crossapp_CAButton_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAButton_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAButton(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAButton_setImageSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_interruptTouchState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_addTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_getTitleFont(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setTitleLabelSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setTitleBold(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setImageOffset(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setTitleFontSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setTitleFontName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_getBackgroundImageForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setImageForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setTitleFont(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setTitleColorForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setImageColorForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setBackgroundImageForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setTitleForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_getImageForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setTitleTextAlignment(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_getTitleForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setTitleOffset(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_CAButton(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CASegmentedControl_class;
extern JSObject *jsb_CrossApp_CASegmentedControl_prototype;

bool js_crossapp_CASegmentedControl_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CASegmentedControl_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CASegmentedControl(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CASegmentedControl_setTitleFontSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setSegmentItemBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setImageSizeAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setSelectedAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_getTitleFont(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setImageForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setImageColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_getSelectedAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setTitleSelectedColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_getNumberOfSegments(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setTitleColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_isEnabledForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setTitleFontName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setTitleFont(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_getTitleSelectedColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setImageSelectedColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_getContentOffsetForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_getImageSelectedColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_getImageForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setContentOffsetForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_getTitleColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setTitleForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setTintColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_getTitleForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_getImageColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setEnabledForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_CASegmentedControl(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CABarItem_class;
extern JSObject *jsb_CrossApp_CABarItem_prototype;

bool js_crossapp_CABarItem_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CABarItem_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CABarItem(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CABarItem_setImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarItem_setTitle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarItem_getImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarItem_getTitle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarItem_CABarItem(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CABarButtonItem_class;
extern JSObject *jsb_CrossApp_CABarButtonItem_prototype;

bool js_crossapp_CABarButtonItem_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CABarButtonItem_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CABarButtonItem(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CABarButtonItem_getImageOffsetX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_getCustomView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_setLabelWidth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_setImageOffsetX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_initWithCustomView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_setItemWidth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_initWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_getHighlightedImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_setLabelOffsetX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_setImageWidth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_setHighlightedImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_initWithTitle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_setCallbackFunction(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_getItemWidth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_getImageWidth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_getLabelOffsetX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_getCallbackFunction(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_getLabelWidth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_CABarButtonItem(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CANavigationBarItem_class;
extern JSObject *jsb_CrossApp_CANavigationBarItem_prototype;

bool js_crossapp_CANavigationBarItem_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CANavigationBarItem_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CANavigationBarItem(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CANavigationBarItem_addLeftButtonItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_getRightButtonItems(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_setNagigationBarHidden(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_getTitleViewImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_setShowGoBackButton(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_addRightButtonItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_getTitleView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_isEnabledShadow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_setTitleView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_getLeftButtonItems(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_setTitleViewImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_setEnabledShadow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_isNagigationBarHidden(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_isShowGoBackButton(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_CANavigationBarItem(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATabBarItem_class;
extern JSObject *jsb_CrossApp_CATabBarItem_prototype;

bool js_crossapp_CATabBarItem_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CATabBarItem_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CATabBarItem(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CATabBarItem_getBadgeValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarItem_setSelectedImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarItem_getSelectedImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarItem_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarItem_setBadgeValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarItem_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarItem_CATabBarItem(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CABar_class;
extern JSObject *jsb_CrossApp_CABar_prototype;

bool js_crossapp_CABar_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CABar_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CABar(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CABar_get_bottom_clearance(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABar_get_top_clearance(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CANavigationBar_class;
extern JSObject *jsb_CrossApp_CANavigationBar_prototype;

bool js_crossapp_CANavigationBar_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CANavigationBar_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CANavigationBar(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CANavigationBar_onPopViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_getGoBackBarButtonItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_setTitleColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_isEnabledShadow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_setButtonColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_setEnabledShadow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_getTitleColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_setItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_getBackgroundView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_getItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_getButtonColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_updateClearance(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_setGoBackBarButtonItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_setBackgroundView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_CANavigationBar(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATabBar_class;
extern JSObject *jsb_CrossApp_CATabBar_prototype;

bool js_crossapp_CATabBar_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CATabBar_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CATabBar(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CATabBar_setSelectedBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_onSelectedItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_getItemSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_replaceItemAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_getContentViewFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_getTitleBoldForSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_setSelectedAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_showSelectedIndicator(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_addForbidSelectedAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_setTitleBoldForSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_getSelectedIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_setSelectedIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_getTitleColorForNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_getTitleColorForSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_setItems(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_getBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_getItems(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_onClickToForbidSelectedItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_setTitleColorForSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_getForbidSelectedIndexs(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_getSelectedIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_updateClearance(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_setTitleColorForNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_getSelectedBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_CATabBar(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAActivityIndicatorView_class;
extern JSObject *jsb_CrossApp_CAActivityIndicatorView_prototype;

bool js_crossapp_CAActivityIndicatorView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAActivityIndicatorView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAActivityIndicatorView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAActivityIndicatorView_onCancel(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_setCycleTime(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_onEnter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_onExit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_getActivityBackView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_getActivityIndicatorView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_setTimesOneCycle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_getColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_setActivityBackView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_setStyle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_setLoadingMinTime(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_setActivityIndicatorOffset(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_isAnimating(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_setActivityIndicatorView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_getLoadingMinTime(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_startAnimating(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_stopAnimating(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_CAActivityIndicatorView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAPullToRefreshView_class;
extern JSObject *jsb_CrossApp_CAPullToRefreshView_prototype;

bool js_crossapp_CAPullToRefreshView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAPullToRefreshView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAPullToRefreshView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAPullToRefreshView_getLoadingView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_setPullToRefreshText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_getType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_getRefreshingText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_setLoadingView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_setRefreshingText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_getLabelColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_getPullToImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_getReleaseToRefreshText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_setLabelColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_setReleaseToRefreshText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_setPullToImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_getPullToRefreshText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_CAPullToRefreshView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAScrollView_class;
extern JSObject *jsb_CrossApp_CAScrollView_prototype;

bool js_crossapp_CAScrollView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAScrollView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAScrollView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAScrollView_setBounceVertical(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_isTracking(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_startDeaccelerateScroll(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_isBounceVertical(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_isShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setShowsHorizontalScrollIndicator(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setTouchEnabledAtSubviews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_getZoomScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_endFooterRefresh(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_onTouchUpWithoutMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setFooterRefreshView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_getHeaderRefreshView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setShowsVerticalScrollIndicator(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setContentOffset(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_isBounceHorizontal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_isShowsVerticalScrollIndicator(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_startPullToHeaderRefreshView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_isTouchEnabledAtSubviews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_getMultitouchGesture(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setHeaderRefreshView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_onDidEndDragging(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_onHeaderBeginRefreshing(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setBounces(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_getContentOffset(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_isDecelerating(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_onWillBeginDragging(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_onFooterBeginRefreshing(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_isBounces(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setViewSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_getMaximumZoomScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_getViewSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setMaximumZoomScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_isZooming(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_onStopMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_isShowsHorizontalScrollIndicator(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_onDragging(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_getFooterRefreshView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_stopDeaccelerateScroll(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_onDidMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_onDidZoom(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setMinimumZoomScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_endHeaderRefresh(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_getMinimumZoomScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setBounceHorizontal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setZoomScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setMultitouchGesture(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_CAScrollView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CAPageView_class;
extern JSObject *jsb_CAPageView_prototype;

bool js_crossapp_CAPageView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAPageView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAPageView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAPageView_setSpacing(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_onEndTurning(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_setViews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_onBeginTurning(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_getOrientation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_getSpacing(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_getCurrPage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_setCurrPage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_getPageCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_onDidSelectedPageAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_getSubViewAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_CAPageView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAViewController_class;
extern JSObject *jsb_CrossApp_CAViewController_prototype;

bool js_crossapp_CAViewController_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAViewController_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAViewController(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAViewController_getView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_dismissModalViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_getTabBarItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_setTabBarItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_getViewWithID(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_setTitle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_parser(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_isViewRunning(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_viewDidLoad(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_presentModalViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_setViewVisibleTrue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_getNavigationBarItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_removeViewFromSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_viewOnSizeTransitionDidChanged(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_viewDidDisappear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_viewOnExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_getNibName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_setNavigationBarItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_setViewVisibleFalse(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_getTitle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_viewDidAppear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_viewOnEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_setView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_addViewFromSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_viewSizeDidChanged(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_getNavigationController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_getTabBarController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_viewDidUnload(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_getModalViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_CAViewController(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CANavigationController_class;
extern JSObject *jsb_CrossApp_CANavigationController_prototype;

bool js_crossapp_CANavigationController_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CANavigationController_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CANavigationController(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CANavigationController_setNavigationBarTitleColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_popFirstViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_updateItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_getBackViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_getViewControllerCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_setNavigationBarHidden(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_setNavigationBarEnabledShadow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_replaceViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_popToRootViewControllerAnimated(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_getNavigationBarGoBackBarButtonItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_isNavigationBarEnabledShadow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_pushViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_isReachBoundaryDown(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_setTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_initWithRootViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_isReachBoundaryRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_popViewControllerAnimated(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_isTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_getNavigationBarTitleColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_isReachBoundaryUp(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_isReachBoundaryLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_setNavigationBarGoBackBarButtonItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_isNavigationBarHidden(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_getNavigationBarBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_getViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_setNavigationBarBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_getNavigationBarButtonColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_popViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_setNavigationBarButtonColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_CANavigationController(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATabBarController_class;
extern JSObject *jsb_CrossApp_CATabBarController_prototype;

bool js_crossapp_CATabBarController_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CATabBarController_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CATabBarController(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CATabBarController_getSelectedViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_setTabBarSelectedBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_setTabBarBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_setTabBarTitleColorForSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_showSelectedViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_setTabBarHidden(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_updateItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_setTabBarTitleColorForNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_setTabBarSelectedIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_getTabBarTitleColorForSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_getSelectedViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_showSelectedViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_getTabBarSelectedBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_setTabBarTitleBoldForSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_getTabBar(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_getTabBarBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_getTabBarVerticalAlignment(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_getTabBarTitleBoldForSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_showTabBarSelectedIndicator(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_getTabBarSelectedIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_initWithViewControllers(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_getTabBarTitleColorForNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_getViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_isTabBarHidden(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_CATabBarController(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAWindow_class;
extern JSObject *jsb_CrossApp_CAWindow_prototype;

bool js_crossapp_CAWindow_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAWindow_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAWindow(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAWindow_presentModalViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWindow_setCameraOrderDirty(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWindow_render(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWindow_dismissModalViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWindow_getRootViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWindow_getModalViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWindow_setRootViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWindow_getDefaultCamera(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWindow_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWindow_CAWindow(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CANotificationCenter_class;
extern JSObject *jsb_CrossApp_CANotificationCenter_prototype;

bool js_crossapp_CANotificationCenter_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CANotificationCenter_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CANotificationCenter(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CANotificationCenter_postNotificationWithIntValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANotificationCenter_postNotification(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANotificationCenter_postNotificationWithStringValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANotificationCenter_postNotificationWithJsonStringValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANotificationCenter_removeObserver(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANotificationCenter_getObserverHandlerByName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANotificationCenter_removeAllObservers(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANotificationCenter_postNotificationWithDoubleValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANotificationCenter_unregisterScriptObserver(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANotificationCenter_postNotificationWithFloatValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANotificationCenter_getScriptHandler(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANotificationCenter_registerScriptObserver(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANotificationCenter_getInstance(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANotificationCenter_CANotificationCenter(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CARenderImage_class;
extern JSObject *jsb_CrossApp_CARenderImage_prototype;

bool js_crossapp_CARenderImage_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CARenderImage_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CARenderImage(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CARenderImage_getImageView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_printscreenWithView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_getClearStencil(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_saveToFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_clearStencil(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_setClearStencil(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_setClearFlags(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_setImageView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_initWithWidthAndHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_setAutoDraw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_setClearColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_getClearColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_getClearFlags(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_isAutoDraw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_setClearDepth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_clearDepth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_clear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_getClearDepth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_printscreen(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_CARenderImage(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAProgress_class;
extern JSObject *jsb_CrossApp_CAProgress_prototype;

bool js_crossapp_CAProgress_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAProgress_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAProgress(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAProgress_setProgressTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_getProgressTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_setProgressTrackColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_setColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_setProgressTrackImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_getProgressTintColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_getProgressTrackImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_getProgressTrackColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_getProgress(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_setProgress(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_setProgressTintColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_CAProgress(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CASwitch_class;
extern JSObject *jsb_CrossApp_CASwitch_prototype;

bool js_crossapp_CASwitch_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CASwitch_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CASwitch(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CASwitch_getOnImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_setOffImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_setTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_getThumbTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_setIsOn(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_isOn(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_setOnImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_getOffImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_setThumbTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_CASwitch(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CASlider_class;
extern JSObject *jsb_CrossApp_CASlider_prototype;

bool js_crossapp_CASlider_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CASlider_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CASlider(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CASlider_setTargetForTouchUpSide(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_initWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_getTrackHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_setMinValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_getMinValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_getMaxValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_setMaxTrackTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_setValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_isTouchClick(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_initWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_setTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_layoutSubViews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_getMaxTrackTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_setThumbTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_getMinTrackTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_setTrackHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_getThumbTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_setMaxValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_getValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_setMinTrackTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_CASlider(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAPageControl_class;
extern JSObject *jsb_CrossApp_CAPageControl_prototype;

bool js_crossapp_CAPageControl_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAPageControl_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAPageControl(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAPageControl_setDefersCurrentPageDisplay(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_getPageIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_initWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_isSinglePage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_setPageIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_setNumberOfPages(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_getNumberOfPages(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_setTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_setPageIndicatorTintColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_initWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_setTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_setSinglePage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_getStyle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_getPageIndicatorTintColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_setStyle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_isDefersCurrentPageDisplay(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_setCurrentPageIndicatorTintColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_setCurrentPage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_updateCurrentPageDisplay(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_getCurrentPage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_getCurrentPageIndicatorTintColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_setCurrIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_getCurrIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_CAPageControl(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAStepper_class;
extern JSObject *jsb_CrossApp_CAStepper_prototype;

bool js_crossapp_CAStepper_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAStepper_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAStepper(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAStepper_setWraps(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setTailorImageAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_getTailorImageAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_getAutoRepeat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setMinValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_getMinValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setDividerColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_getMaxValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setDecrementImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_getWraps(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setStepValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setAutoRepeat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_getDividerColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setTouchEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setIncrementImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_getStepValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setMaxValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_getValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_getTouchEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_CAStepper(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CACheckbox_class;
extern JSObject *jsb_CrossApp_CACheckbox_prototype;

bool js_crossapp_CACheckbox_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CACheckbox_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CACheckbox(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CACheckbox_setImageSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_setTitleFontSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_setTitleColorStateSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_setTitleStateSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_setTitleTextAlignment(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_setImageColorStateSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_isOn(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_getImageStateNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_setImageColorStateNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_setTitleLabelSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_setImageStateSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_setIsOn(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_setTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_getTitleStateNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_setTitleFontName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_setTitleStateNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_setTitleFont(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_setTitleOffset(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_setTitleColorStateNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_getTitleFont(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_getImageStateSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_setTitleBold(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_setImageOffset(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_setImageStateNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_getTitleStateSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACheckbox_CACheckbox(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CADrawerController_class;
extern JSObject *jsb_CrossApp_CADrawerController_prototype;

bool js_crossapp_CADrawerController_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CADrawerController_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CADrawerController(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CADrawerController_hideLeftViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_isReachBoundaryLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_showLeftViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_setTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_getEffect3D(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_getRightViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_isShowLeftViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_initWithController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_setEffect3D(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_isReachBoundaryRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_replaceRightViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_getLeftViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_isTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_CADrawerController(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATouchController_class;
extern JSObject *jsb_CrossApp_CATouchController_prototype;

bool js_crossapp_CATouchController_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CATouchController_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CATouchController(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CATouchController_touchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouchController_setEvent(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouchController_getEvent(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouchController_getTouch(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouchController_touchBegan(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouchController_touchEnded(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouchController_getTouchID(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouchController_setTouch(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouchController_touchCancelled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouchController_CATouchController(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAKeypadDispatcher_class;
extern JSObject *jsb_CrossApp_CAKeypadDispatcher_prototype;

bool js_crossapp_CAKeypadDispatcher_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAKeypadDispatcher_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAKeypadDispatcher(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAKeypadDispatcher_onBackClicked(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAKeypadDispatcher_onMenuClicked(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAKeypadDispatcher_dispatchKeypadMSG(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAKeypadDispatcher_CAKeypadDispatcher(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAGif_class;
extern JSObject *jsb_CrossApp_CAGif_prototype;

bool js_crossapp_CAGif_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAGif_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAGif(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAGif_getDelay(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGif_getImages(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGif_initWithFilePath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGif_initWithData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGif_getImageWithIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGif_getPixelsHigh(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGif_getPixelsWide(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGif_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGif_createWithData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGif_CAGif(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAQrencode_class;
extern JSObject *jsb_CrossApp_CAQrencode_prototype;

bool js_crossapp_CAQrencode_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAQrencode_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAQrencode(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAQrencode_createWithQRString(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAGifView_class;
extern JSObject *jsb_CrossApp_CAGifView_prototype;

bool js_crossapp_CAGifView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAGifView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAGifView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAGifView_setTimes(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_onEnter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_onExit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_initWithGif(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_setGif(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_getGif(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_isRepeatForever(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_setRepeatForever(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_createWithGif(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_CAGifView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CARichLabel_class;
extern JSObject *jsb_CrossApp_CARichLabel_prototype;

bool js_crossapp_CARichLabel_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CARichLabel_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CARichLabel(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CARichLabel_setTextAlignment(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_setVerticalTextAlignmet(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_visitEve(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_clear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_getLabelSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_setNumberOfLine(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_appendText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_CARichLabel(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CACell_class;
extern JSObject *jsb_CrossApp_CACell_prototype;

bool js_crossapp_CACell_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CACell_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CACell(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CACell_getContentView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_getViewWithID(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_onSelectedState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_onNormalState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_initWithReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_setControlStateSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_setReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_isAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_isControlStateEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_setControlStateNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_onHighlightedState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_setControlStateHighlighted(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_onRecovery(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_onDsabledState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_getBackgroundView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_getReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_getControlState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_setControlStateEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_setControlState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_setAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_setControlStateDisabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_CACell(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAListView_class;
extern JSObject *jsb_CrossApp_CAListView_prototype;

bool js_crossapp_CAListView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAListView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAListView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAListView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_getOrientation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_setListFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_setSeparatorColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_setSelectAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_getSeparatorViewHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_onDidSelectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_getSeparatorColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_reloadData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_displayingListCell(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_setListHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_getListFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_onCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_visitEve(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_setListHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_onWillDisplayCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_onNumberOfRowsAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_getListHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_setSeparatorViewHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_setOrientation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_onCellHeightAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_setListFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_onDidDeselectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_getListFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_cellForRowAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_setUnSelectAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_getListHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_CAListView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAListViewCell_class;
extern JSObject *jsb_CrossApp_CAListViewCell_prototype;

bool js_crossapp_CAListViewCell_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAListViewCell_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAListViewCell(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAListViewCell_getIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListViewCell_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListViewCell_CAListViewCell(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATableView_class;
extern JSObject *jsb_CrossApp_CATableView_prototype;

bool js_crossapp_CATableView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CATableView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CATableView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CATableView_getTableFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_onHeightForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setTableHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_isAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_getSectionFooterHeightInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setSeparatorColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setTableFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_onSectionViewForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_onNumberOfSections(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_getRowHeightInSectionInRow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setTableHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_getNumberOfSections(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_getSeparatorViewHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_getTableHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_onDidSelectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_cellForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_getSectionHeightInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_onHeightForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_getSeparatorColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_reloadData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_getTableFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_onCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_onSectionViewForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_displayingTableCell(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_getTableHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_onWillDisplayCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_onNumberOfRowsAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_isAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_visitEve(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setTableFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setSeparatorViewHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_onCellHeightAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_onDidDeselectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_getNumberOfRowsInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setUnSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_getSectionHeaderHeightInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_CATableView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATableViewCell_class;
extern JSObject *jsb_CrossApp_CATableViewCell_prototype;

bool js_crossapp_CATableViewCell_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CATableViewCell_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CATableViewCell(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CATableViewCell_setDraggingLength(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableViewCell_getSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableViewCell_getDraggingLength(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableViewCell_getRow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableViewCell_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableViewCell_CATableViewCell(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CACollectionView_class;
extern JSObject *jsb_CrossApp_CACollectionView_prototype;

bool js_crossapp_CACollectionView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CACollectionView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CACollectionView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CACollectionView_setCollectionFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_onHeightForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_setCollectionHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_getVertInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_isAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_setCollectionFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_getCollectionFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_onSectionViewForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_setAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_onNumberOfSections(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_getHoriInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_clearData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_setHoriInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_setSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_onDidSelectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_cellForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_onHeightForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_reloadData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_getCollectionHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_onCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_onSectionViewForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_visitEve(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_displayingCollectionCell(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_getCollectionHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_onWillDisplayCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_setAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_onNumberOfRowsAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_isAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_onCellHeightAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_getCollectionFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_setVertInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_onDidDeselectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_onNumberOfItemsAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_setCollectionHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_setUnSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_getHighlightCollectionCell(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_CACollectionView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CACollectionViewCell_class;
extern JSObject *jsb_CrossApp_CACollectionViewCell_prototype;

bool js_crossapp_CACollectionViewCell_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CACollectionViewCell_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CACollectionViewCell(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CACollectionViewCell_getSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionViewCell_getItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionViewCell_getRow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionViewCell_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionViewCell_CACollectionViewCell(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAAutoCollectionView_class;
extern JSObject *jsb_CrossApp_CAAutoCollectionView_prototype;

bool js_crossapp_CAAutoCollectionView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAAutoCollectionView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAAutoCollectionView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAAutoCollectionView_setCollectionFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_onHeightForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getCellVertAlign(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setCollectionHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getOrientation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_isAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setCollectionFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getCollectionFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_onSectionViewForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setHoriCellInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getCellHoriAlign(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getVertMargins(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_onNumberOfSections(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setCellHoriAlign(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_onDidSelectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_cellForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getHoriCellInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_onHeightForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setVertMargins(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_reloadData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getCollectionHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_onCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_onSectionViewForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_visitEve(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_displayingCollectionCell(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getCollectionHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_onWillDisplayCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setCellVertAlign(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_isAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setOrientation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getVertCellInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getCollectionFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_onDidDeselectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_onNumberOfItemsAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_onCellSizeAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setHoriMargins(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setCollectionHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setUnSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getHighlightCollectionCell(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setVertCellInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getHoriMargins(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_CAAutoCollectionView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAWaterfallView_class;
extern JSObject *jsb_CrossApp_CAWaterfallView_prototype;

bool js_crossapp_CAWaterfallView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAWaterfallView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAWaterfallView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAWaterfallView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setWaterfallHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setColumnMargin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_getWaterfallHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_getColumnCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_isAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_getWaterfallHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setColumnCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setWaterfallHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setWaterfallFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_onDidSelectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_getHighlightWaterfallCell(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_reloadData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_onCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_cellForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_visitEve(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setWaterfallFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_getColumnMargin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_getWaterfallFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_onWillDisplayCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setItemMargin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_isAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_displayingWaterfallCell(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_onCellHeightAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_getItemMargin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_onDidDeselectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_onNumberOfItemsAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setUnSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_getWaterfallFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_CAWaterfallView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAWaterfallViewCell_class;
extern JSObject *jsb_CrossApp_CAWaterfallViewCell_prototype;

bool js_crossapp_CAWaterfallViewCell_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAWaterfallViewCell_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAWaterfallViewCell(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAWaterfallViewCell_getItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallViewCell_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallViewCell_CAWaterfallViewCell(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_FileUtils_class;
extern JSObject *jsb_CrossApp_FileUtils_prototype;

bool js_crossapp_FileUtils_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_FileUtils_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_FileUtils(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_FileUtils_writeDataToFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_removeFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_getDataFromFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_purgeCachedEntries(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_isAbsolutePath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_renameFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_getDefaultResourceRootPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_isPopupNotify(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_removeDirectory(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_writeToFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_getValueMapFromFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_getFileString(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_getFileSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_writeStringToFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_addSearchPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_isFileExist(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_fullPathForFilename(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_fullPathFromRelativeFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_getFileExtension(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_setPopupNotify(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_isDirectoryExist(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_setDefaultResourceRootPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_createDirectory(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_loadFilenameLookupDictionaryFromFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_getWritablePath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_destroyInstance(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_setDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_getInstance(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAWebView_class;
extern JSObject *jsb_CrossApp_CAWebView_prototype;

bool js_crossapp_CAWebView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAWebView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAWebView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAWebView_onFinishLoading(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_draw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_onStartLoading(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_canGoBack(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_loadHTMLString(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_onJSCallback(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_goForward(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_goBack(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_setScalesPageToFit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_showNativeWeb(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_loadFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_loadURL(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_evaluateJS(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_showLoadingActivity(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_onFailLoading(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_update(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_setActivityView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_stopLoading(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_reload(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_getHTMLSource(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_canGoForward(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_setJavascriptInterfaceScheme(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_setVisible(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_hideNativeWebAndShowImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_CAWebView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAClippingView_class;
extern JSObject *jsb_CrossApp_CAClippingView_prototype;

bool js_crossapp_CAClippingView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAClippingView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAClippingView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAClippingView_isClippingEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_onEnter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_onExit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_setInverted(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_visit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_setStencil(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_getAlphaThreshold(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_getStencil(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_setClippingEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_setAlphaThreshold(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_isInverted(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_create(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAAlertView_class;
extern JSObject *jsb_CrossApp_CAAlertView_prototype;

bool js_crossapp_CAAlertView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAAlertView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAAlertView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAAlertView_show(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAlertView_setButtonTitles(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAlertView_addButtonTitle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAlertView_create(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAAVPlayer_class;
extern JSObject *jsb_CrossApp_CAAVPlayer_prototype;

bool js_crossapp_CAAVPlayer_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAAVPlayer_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAAVPlayer(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAAVPlayer_onPlayBufferLoadingState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAVPlayer_onDidPlayToEndTime(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAVPlayer_play(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAVPlayer_pause(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAVPlayer_initWithFilePath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAVPlayer_onTimeJumped(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAVPlayer_getPresentationSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAVPlayer_getDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAVPlayer_stop(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAVPlayer_setCurrentTime(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAVPlayer_getCurrentTime(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAVPlayer_onPlayState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAVPlayer_onLoadedTime(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAVPlayer_initWithUrl(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAVPlayer_onPeriodicTime(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAVPlayer_createWithFilePath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAVPlayer_createWithUrl(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAVPlayer_CAAVPlayer(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAAVPlayerView_class;
extern JSObject *jsb_CrossApp_CAAVPlayerView_prototype;

bool js_crossapp_CAAVPlayerView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAAVPlayerView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAAVPlayerView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAAVPlayerView_getPlayer(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAVPlayerView_setPlayer(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAVPlayerView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAVPlayerView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAVPlayerView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAVPlayerView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAVPlayerView_CAAVPlayerView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAPickerView_class;
extern JSObject *jsb_CrossApp_CAPickerView_prototype;

bool js_crossapp_CAPickerView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAPickerView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAPickerView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAPickerView_setFontSizeNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_onHeightForComponent(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_onViewForRow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_getFontSizeNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_reloadAllComponents(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_onWidthForComponent(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_onNumberOfComponents(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_getFontSizeSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_onNumberOfRowsInComponent(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_getFontColorSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_visitEve(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_getFontColorNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_setFontColorNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_getSeparateColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_selectRow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_reloadComponent(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_setFontColorSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_selectedRowInComponent(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_setSeparateColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_onTitleForRow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_onDidSelectRow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_setFontSizeSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_onViewForSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_CAPickerView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CADatePickerView_class;
extern JSObject *jsb_CrossApp_CADatePickerView_prototype;

bool js_crossapp_CADatePickerView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CADatePickerView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CADatePickerView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CADatePickerView_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADatePickerView_setBackgroundImageForSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADatePickerView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADatePickerView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADatePickerView_setTime(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADatePickerView_setDate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADatePickerView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADatePickerView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADatePickerView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADatePickerView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADatePickerView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADatePickerView_CADatePickerView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CADrawView_class;
extern JSObject *jsb_CrossApp_CADrawView_prototype;

bool js_crossapp_CADrawView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CADrawView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CADrawView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CADrawView_drawLine(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_drawPoints(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_drawRect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_drawSolidCircle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_setLineWidth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_onDrawGLPoint(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_drawPolygon(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_drawDot(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_drawCatmullRom(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_drawSegment(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_getBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_onDraw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_drawCircle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_drawQuadBezier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_onDrawGLLine(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_drawSolidPoly(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_drawTriangle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_setBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_clear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_drawCardinalSpline(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_drawSolidRect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_getLineWidth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_drawPoly(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_drawPoint(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_drawCubicBezier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_CADrawView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAUserDefault_class;
extern JSObject *jsb_CrossApp_CAUserDefault_prototype;

bool js_crossapp_CAUserDefault_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAUserDefault_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAUserDefault(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAUserDefault_setIntegerForKey(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAUserDefault_getFloatForKey(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAUserDefault_getBoolForKey(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAUserDefault_setDoubleForKey(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAUserDefault_setFloatForKey(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAUserDefault_getStringForKey(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAUserDefault_setStringForKey(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAUserDefault_flush(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAUserDefault_getIntegerForKey(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAUserDefault_getDoubleForKey(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAUserDefault_setBoolForKey(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAUserDefault_destroyInstance(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAUserDefault_getXMLFilePath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAUserDefault_isXMLFileExist(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAUserDefault_getInstance(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAHttpRequest_class;
extern JSObject *jsb_CrossApp_CAHttpRequest_prototype;

bool js_crossapp_CAHttpRequest_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAHttpRequest_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAHttpRequest(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAHttpRequest_getUrl(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpRequest_setResponseCallback(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpRequest_getCallback(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpRequest_getThreadID(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpRequest_getRequestData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpRequest_setUrl(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpRequest_setRequestType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpRequest_getHeaders(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpRequest_getRequestType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpRequest_setThreadID(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpRequest_setRequestData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpRequest_getRequestDataSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpRequest_setFileNameToPost(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpRequest_setHeaders(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpRequest_getFileNameToPost(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpRequest_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpRequest_CAHttpRequest(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAHttpResponse_class;
extern JSObject *jsb_CrossApp_CAHttpResponse_prototype;

bool js_crossapp_CAHttpResponse_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAHttpResponse_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAHttpResponse(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAHttpResponse_setErrorBuffer(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_getErrorBuffer(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_isSucceed(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_getHttpRequest(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_setResponseData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_autorelease(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_getResponseData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_setResponseHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_setResponseCode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_getResponseCode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_getResponseHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_setSucceed(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_CAHttpResponse(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAHttpClient_class;
extern JSObject *jsb_CrossApp_CAHttpClient_prototype;

bool js_crossapp_CAHttpClient_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAHttpClient_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAHttpClient(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAHttpClient_sendImmediate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpClient_getSSLVerification(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpClient_getCookie(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpClient_setTimeoutForConnect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpClient_setTimeoutForRead(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpClient_send(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpClient_enableCookies(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpClient_setSSLVerification(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpClient_getRequestCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpClient_getTimeoutForConnect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpClient_getTimeoutForRead(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpClient_getCookieFilename(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpClient_destroyInstance(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpClient_destroyAllInstance(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpClient_getInstance(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpClient_uploadFile(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CADownloadManager_class;
extern JSObject *jsb_CrossApp_CADownloadManager_prototype;

bool js_crossapp_CADownloadManager_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CADownloadManager_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CADownloadManager(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CADownloadManager_getDownloadMaxCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADownloadManager_setDownloadMaxCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADownloadManager_getLocalFileSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADownloadManager_enqueueDownload(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADownloadManager_clearOnSuccessDownloadAllRecord(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADownloadManager_eraseDownload(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADownloadManager_enqueueDownloadEx(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADownloadManager_isDownloading(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADownloadManager_clearOnSuccessDownloadRecord(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADownloadManager_getDownloadUrl(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADownloadManager_resumeDownload(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADownloadManager_getDownloadManagerDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADownloadManager_getTotalFileSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADownloadManager_getFilePath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADownloadManager_getDownloadHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADownloadManager_pauseDownload(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADownloadManager_isFinished(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADownloadManager_getDownloadAllTextTags(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADownloadManager_getStartTime(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADownloadManager_destroyInstance(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADownloadManager_getInstance(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATextField_class;
extern JSObject *jsb_CrossApp_CATextField_prototype;

bool js_crossapp_CATextField_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CATextField_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CATextField(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CATextField_getFontSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setKeyboardType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_onShouldBeginEditing(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_getText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setClearButtonMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_getTextColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_getKeyboardType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_isSecureTextEntry(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_getAlign(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setAlign(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setMarginImageLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setMarginRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_getClearButtonMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_onShouldReturn(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_onShouldEndEditing(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_getReturnType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_getPlaceHolderText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setAllowkeyBoardHide(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_onShouldChangeCharacters(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_getPlaceHolderColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setPlaceHolderText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_getMarginRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setMarginLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setFontSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setPlaceHolderColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setTextColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setReturnType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_getMaxLength(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_resignFirstResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setMarginImageRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_onDidChangeText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_getMarginLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setMaxLength(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_becomeFirstResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setSecureTextEntry(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_onKeyBoardHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_isAllowkeyBoardHide(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_CATextField(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATextView_class;
extern JSObject *jsb_CrossApp_CATextView_prototype;

bool js_crossapp_CATextView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CATextView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CATextView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CATextView_getFontSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_onShouldBeginEditing(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_getText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_getTextColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_onShouldReturn(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_onShouldEndEditing(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_getReturnType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_onShouldChangeCharacters(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_setAlign(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_setFontSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_getAlign(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_setTextColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_setReturnType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_resignFirstResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_setText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_onDidChangeText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_becomeFirstResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_onKeyBoardHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_CATextView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAFontProcesstor_class;
extern JSObject *jsb_CrossApp_CAFontProcesstor_prototype;

bool js_crossapp_CAFontProcesstor_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAFontProcesstor_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAFontProcesstor(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAFontProcesstor_heightForFont(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAFontProcesstor_imageForText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAFontProcesstor_heightForTextAtWidth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAFontProcesstor_widthForTextAtOneLine(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAClipboard_class;
extern JSObject *jsb_CrossApp_CAClipboard_prototype;

bool js_crossapp_CAClipboard_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAClipboard_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAClipboard(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAClipboard_setText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClipboard_getText(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAScanQRcode_class;
extern JSObject *jsb_CrossApp_CAScanQRcode_prototype;

bool js_crossapp_CAScanQRcode_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAScanQRcode_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAScanQRcode(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAScanQRcode_showScanQRcode(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CADevice_class;
extern JSObject *jsb_CrossApp_CADevice_prototype;

bool js_crossapp_CADevice_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CADevice_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CADevice(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CADevice_getVolume(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADevice_openUrl(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADevice_getAppVersion(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADevice_getScreenBrightness(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADevice_getNetWorkType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADevice_getSystemVersion(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADevice_getBatteryLevel(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADevice_setIdleTimerDisabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADevice_sendLocalNotification(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADevice_setScreenBrightness(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADevice_setVolume(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADevice_isNetWorkAvailble(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAMotionManager_class;
extern JSObject *jsb_CrossApp_CAMotionManager_prototype;

bool js_crossapp_CAMotionManager_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAMotionManager_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAMotionManager(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAMotionManager_stopGyroscope(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAMotionManager_setGyroInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAMotionManager_getInstance(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAMotionManager_CAMotionManager(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAImagePickerController_class;
extern JSObject *jsb_CrossApp_CAImagePickerController_prototype;

bool js_crossapp_CAImagePickerController_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAImagePickerController_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAImagePickerController(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAImagePickerController_writeImageToPhoto(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImagePickerController_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImagePickerController_open(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImagePickerController_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImagePickerController_CAImagePickerController(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAAddressBook_class;
extern JSObject *jsb_CrossApp_CAAddressBook_prototype;

bool js_crossapp_CAAddressBook_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAAddressBook_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAAddressBook(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAAddressBook_create(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CGSprite_class;
extern JSObject *jsb_CrossApp_CGSprite_prototype;

bool js_crossapp_CGSprite_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CGSprite_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CGSprite(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CGSprite_stopActionsByFlags(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_setNormalizedPosition(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_getActionByTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_runAction(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_initWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_getNumberOfRunningActions(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_getOffsetPosition(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_getScaleZ(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_getRotationQuat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_initWithSpriteFrameName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_getRotation3D(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_isFrameDisplayed(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_getContentSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_stopAllActionsByTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_stopAllActions(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_setContentSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_setSpriteFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_setScaleZ(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_setDisplayFrameWithAnimationName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_setPosition3D(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_getSpriteFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_setPositionZ(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_boundingBox(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_setImageRect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_setPosition(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_stopActionByTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_getPosition(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_getNormalizedPosition(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_initWithFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_setRotation3D(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_setPositionY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_setImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_getPositionZ(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_getPositionY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_setPositionX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_getPosition3D(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_getPositionX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_initWithSpriteFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_setRotationQuat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_getImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_stopAction(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_createWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_createWithSpriteFrameName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_createWithSpriteFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSprite_CGSprite(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CGSpriteFrame_class;
extern JSObject *jsb_CrossApp_CGSpriteFrame_prototype;

bool js_crossapp_CGSpriteFrame_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CGSpriteFrame_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CGSpriteFrame(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CGSpriteFrame_setRotated(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrame_setAnchorPoint(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrame_getOffset(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrame_getOriginalSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrame_getRect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrame_clone(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrame_setImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrame_initWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrame_getAnchorPoint(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrame_setOriginalSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrame_setOffset(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrame_hasAnchorPoint(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrame_isRotated(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrame_getImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrame_setRect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrame_initWithImageFilename(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrame_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrame_createWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrame_CGSpriteFrame(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CGSpriteFrameCache_class;
extern JSObject *jsb_CrossApp_CGSpriteFrameCache_prototype;

bool js_crossapp_CGSpriteFrameCache_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CGSpriteFrameCache_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CGSpriteFrameCache(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CGSpriteFrameCache_getSpriteFrameByName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrameCache_addSpriteFramesWithFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrameCache_addSpriteFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrameCache_removeUnusedSpriteFrames(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrameCache_allImageFileNames(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrameCache_removeSpriteFramesFromFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrameCache_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrameCache_removeSpriteFrames(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrameCache_removeSpriteFrameByName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrameCache_removeSpriteFramesFromImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrameCache_destroyInstance(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrameCache_getInstance(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGSpriteFrameCache_CGSpriteFrameCache(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CGProgressTimer_class;
extern JSObject *jsb_CrossApp_CGProgressTimer_prototype;

bool js_crossapp_CGProgressTimer_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CGProgressTimer_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CGProgressTimer(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CGProgressTimer_setReverseProgress(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGProgressTimer_isReverseDirection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGProgressTimer_setBarChangeRate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGProgressTimer_setAnchorPoint(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGProgressTimer_getPercentage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGProgressTimer_setSprite(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGProgressTimer_getType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGProgressTimer_getSprite(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGProgressTimer_setMidpoint(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGProgressTimer_getMidpoint(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGProgressTimer_getColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGProgressTimer_getAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGProgressTimer_getBarChangeRate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGProgressTimer_setReverseDirection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGProgressTimer_initWithSprite(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGProgressTimer_setPercentage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGProgressTimer_setType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGProgressTimer_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CGProgressTimer_CGProgressTimer(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_Animation_class;
extern JSObject *jsb_CrossApp_Animation_prototype;

bool js_crossapp_Animation_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_Animation_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_Animation(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_Animation_getLoops(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Animation_addSpriteFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Animation_setRestoreOriginalFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Animation_clone(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Animation_getDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Animation_initWithAnimationFrames(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Animation_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Animation_addSpriteFrameWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Animation_setFrames(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Animation_getFrames(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Animation_setLoops(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Animation_setDelayPerUnit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Animation_addSpriteFrameWithFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Animation_getTotalDelayUnits(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Animation_getDelayPerUnit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Animation_initWithSpriteFrames(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Animation_getRestoreOriginalFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Animation_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Animation_createWithSpriteFrames(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Animation_Animation(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_AnimationCache_class;
extern JSObject *jsb_CrossApp_AnimationCache_prototype;

bool js_crossapp_AnimationCache_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_AnimationCache_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_AnimationCache(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_AnimationCache_getAnimation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_AnimationCache_addAnimation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_AnimationCache_addAnimationsWithFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_AnimationCache_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_AnimationCache_removeAnimation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_AnimationCache_destroyInstance(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_AnimationCache_getInstance(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_AnimationCache_AnimationCache(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_Action_class;
extern JSObject *jsb_CrossApp_Action_prototype;

bool js_crossapp_Action_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_Action_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_Action(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_Action_startWithTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Action_description(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Action_setOriginalTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Action_clone(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Action_getOriginalTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Action_stop(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Action_update(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Action_getTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Action_getFlags(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Action_step(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Action_setTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Action_setFlags(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Action_getTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Action_setTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Action_isDone(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Action_reverse(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_FiniteTimeAction_class;
extern JSObject *jsb_CrossApp_FiniteTimeAction_prototype;

bool js_crossapp_FiniteTimeAction_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_FiniteTimeAction_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_FiniteTimeAction(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_FiniteTimeAction_setDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FiniteTimeAction_getDuration(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_ActionInterval_class;
extern JSObject *jsb_CrossApp_ActionInterval_prototype;

bool js_crossapp_ActionInterval_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_ActionInterval_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_ActionInterval(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_ActionInterval_getAmplitudeRate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionInterval_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionInterval_setAmplitudeRate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionInterval_getElapsed(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_Sequence_class;
extern JSObject *jsb_CrossApp_Sequence_prototype;

bool js_crossapp_Sequence_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_Sequence_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_Sequence(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_Sequence_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Sequence_initWithTwoActions(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Sequence_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Sequence_createWithTwoActions(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Sequence_Sequence(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_Repeat_class;
extern JSObject *jsb_CrossApp_Repeat_prototype;

bool js_crossapp_Repeat_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_Repeat_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_Repeat(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_Repeat_setInnerAction(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Repeat_initWithAction(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Repeat_getInnerAction(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Repeat_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Repeat_Repeat(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_RepeatForever_class;
extern JSObject *jsb_CrossApp_RepeatForever_prototype;

bool js_crossapp_RepeatForever_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_RepeatForever_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_RepeatForever(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_RepeatForever_setInnerAction(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_RepeatForever_initWithAction(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_RepeatForever_getInnerAction(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_RepeatForever_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_RepeatForever_RepeatForever(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_Spawn_class;
extern JSObject *jsb_CrossApp_Spawn_prototype;

bool js_crossapp_Spawn_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_Spawn_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_Spawn(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_Spawn_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Spawn_initWithTwoActions(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Spawn_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Spawn_createWithTwoActions(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Spawn_Spawn(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_RotateTo_class;
extern JSObject *jsb_CrossApp_RotateTo_prototype;

bool js_crossapp_RotateTo_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_RotateTo_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_RotateTo(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_RotateTo_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_RotateTo_initWithDurationZ(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_RotateTo_initWithDurationY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_RotateTo_initWithDurationX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_RotateTo_createZ(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_RotateTo_createY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_RotateTo_createX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_RotateTo_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_RotateTo_RotateTo(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_RotateBy_class;
extern JSObject *jsb_CrossApp_RotateBy_prototype;

bool js_crossapp_RotateBy_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_RotateBy_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_RotateBy(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_RotateBy_initWithDurationZ(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_RotateBy_initWithDurationY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_RotateBy_initWithDurationX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_RotateBy_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_RotateBy_createZ(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_RotateBy_createY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_RotateBy_createX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_RotateBy_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_RotateBy_RotateBy(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_MoveBy_class;
extern JSObject *jsb_CrossApp_MoveBy_prototype;

bool js_crossapp_MoveBy_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_MoveBy_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_MoveBy(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_MoveBy_initWithDuration3(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_MoveBy_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_MoveBy_create3(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_MoveBy_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_MoveBy_MoveBy(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_MoveTo_class;
extern JSObject *jsb_CrossApp_MoveTo_prototype;

bool js_crossapp_MoveTo_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_MoveTo_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_MoveTo(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_MoveTo_initWithDuration3(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_MoveTo_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_MoveTo_create3(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_MoveTo_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_MoveTo_MoveTo(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_SkewTo_class;
extern JSObject *jsb_CrossApp_SkewTo_prototype;

bool js_crossapp_SkewTo_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_SkewTo_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_SkewTo(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_SkewTo_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SkewTo_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SkewTo_SkewTo(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_SkewBy_class;
extern JSObject *jsb_CrossApp_SkewBy_prototype;

bool js_crossapp_SkewBy_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_SkewBy_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_SkewBy(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_SkewBy_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SkewBy_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SkewBy_SkewBy(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_JumpBy_class;
extern JSObject *jsb_CrossApp_JumpBy_prototype;

bool js_crossapp_JumpBy_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_JumpBy_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_JumpBy(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_JumpBy_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_JumpBy_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_JumpBy_JumpBy(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_JumpTo_class;
extern JSObject *jsb_CrossApp_JumpTo_prototype;

bool js_crossapp_JumpTo_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_JumpTo_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_JumpTo(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_JumpTo_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_JumpTo_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_JumpTo_JumpTo(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_BezierBy_class;
extern JSObject *jsb_CrossApp_BezierBy_prototype;

bool js_crossapp_BezierBy_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_BezierBy_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_BezierBy(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_BezierBy_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_BezierBy_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_BezierBy_BezierBy(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_BezierTo_class;
extern JSObject *jsb_CrossApp_BezierTo_prototype;

bool js_crossapp_BezierTo_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_BezierTo_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_BezierTo(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_BezierTo_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_BezierTo_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_BezierTo_BezierTo(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_ScaleTo_class;
extern JSObject *jsb_CrossApp_ScaleTo_prototype;

bool js_crossapp_ScaleTo_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_ScaleTo_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_ScaleTo(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_ScaleTo_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ScaleTo_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ScaleTo_ScaleTo(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_ScaleBy_class;
extern JSObject *jsb_CrossApp_ScaleBy_prototype;

bool js_crossapp_ScaleBy_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_ScaleBy_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_ScaleBy(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_ScaleBy_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ScaleBy_ScaleBy(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_Blink_class;
extern JSObject *jsb_CrossApp_Blink_prototype;

bool js_crossapp_Blink_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_Blink_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_Blink(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_Blink_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Blink_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Blink_Blink(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_FadeTo_class;
extern JSObject *jsb_CrossApp_FadeTo_prototype;

bool js_crossapp_FadeTo_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_FadeTo_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_FadeTo(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_FadeTo_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FadeTo_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FadeTo_FadeTo(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_FadeIn_class;
extern JSObject *jsb_CrossApp_FadeIn_prototype;

bool js_crossapp_FadeIn_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_FadeIn_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_FadeIn(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_FadeIn_setReverseAction(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FadeIn_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FadeIn_FadeIn(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_FadeOut_class;
extern JSObject *jsb_CrossApp_FadeOut_prototype;

bool js_crossapp_FadeOut_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_FadeOut_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_FadeOut(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_FadeOut_setReverseAction(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FadeOut_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FadeOut_FadeOut(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_TintTo_class;
extern JSObject *jsb_CrossApp_TintTo_prototype;

bool js_crossapp_TintTo_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_TintTo_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_TintTo(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_TintTo_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_TintTo_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_TintTo_TintTo(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_TintBy_class;
extern JSObject *jsb_CrossApp_TintBy_prototype;

bool js_crossapp_TintBy_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_TintBy_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_TintBy(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_TintBy_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_TintBy_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_TintBy_TintBy(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_DelayTime_class;
extern JSObject *jsb_CrossApp_DelayTime_prototype;

bool js_crossapp_DelayTime_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_DelayTime_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_DelayTime(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_DelayTime_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_DelayTime_DelayTime(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_ReverseTime_class;
extern JSObject *jsb_CrossApp_ReverseTime_prototype;

bool js_crossapp_ReverseTime_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_ReverseTime_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_ReverseTime(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_ReverseTime_initWithAction(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ReverseTime_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ReverseTime_ReverseTime(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_Animate_class;
extern JSObject *jsb_CrossApp_Animate_prototype;

bool js_crossapp_Animate_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_Animate_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_Animate(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_Animate_initWithAnimation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Animate_getAnimation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Animate_getCurrentFrameIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Animate_setAnimation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Animate_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Animate_Animate(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_TargetedAction_class;
extern JSObject *jsb_CrossApp_TargetedAction_prototype;

bool js_crossapp_TargetedAction_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_TargetedAction_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_TargetedAction(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_TargetedAction_getForcedTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_TargetedAction_initWithTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_TargetedAction_setForcedTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_TargetedAction_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_TargetedAction_TargetedAction(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_ActionFloat_class;
extern JSObject *jsb_CrossApp_ActionFloat_prototype;

bool js_crossapp_ActionFloat_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_ActionFloat_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_ActionFloat(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_ActionFloat_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionFloat_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionFloat_ActionFloat(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_ActionCamera_class;
extern JSObject *jsb_CrossApp_ActionCamera_prototype;

bool js_crossapp_ActionCamera_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_ActionCamera_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_ActionCamera(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_ActionCamera_setEye(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionCamera_getEye(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionCamera_setUp(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionCamera_getCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionCamera_setCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionCamera_getUp(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionCamera_ActionCamera(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_ActionEase_class;
extern JSObject *jsb_CrossApp_ActionEase_prototype;

bool js_crossapp_ActionEase_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_ActionEase_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_ActionEase(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_ActionEase_initWithAction(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionEase_getInnerAction(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionEase_ActionEase(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseRateAction_class;
extern JSObject *jsb_CrossApp_EaseRateAction_prototype;

bool js_crossapp_EaseRateAction_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseRateAction_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseRateAction(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseRateAction_setRate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseRateAction_initWithAction(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseRateAction_getRate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseRateAction_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseRateAction_EaseRateAction(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseIn_class;
extern JSObject *jsb_CrossApp_EaseIn_prototype;

bool js_crossapp_EaseIn_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseIn_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseIn(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseIn_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseIn_EaseIn(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseOut_class;
extern JSObject *jsb_CrossApp_EaseOut_prototype;

bool js_crossapp_EaseOut_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseOut_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseOut(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseOut_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseOut_EaseOut(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseInOut_class;
extern JSObject *jsb_CrossApp_EaseInOut_prototype;

bool js_crossapp_EaseInOut_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseInOut_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseInOut(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseInOut_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseInOut_EaseInOut(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseExponentialIn_class;
extern JSObject *jsb_CrossApp_EaseExponentialIn_prototype;

bool js_crossapp_EaseExponentialIn_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseExponentialIn_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseExponentialIn(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseExponentialIn_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseExponentialIn_EaseExponentialIn(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseExponentialOut_class;
extern JSObject *jsb_CrossApp_EaseExponentialOut_prototype;

bool js_crossapp_EaseExponentialOut_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseExponentialOut_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseExponentialOut(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseExponentialOut_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseExponentialOut_EaseExponentialOut(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseExponentialInOut_class;
extern JSObject *jsb_CrossApp_EaseExponentialInOut_prototype;

bool js_crossapp_EaseExponentialInOut_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseExponentialInOut_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseExponentialInOut(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseExponentialInOut_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseExponentialInOut_EaseExponentialInOut(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseSineIn_class;
extern JSObject *jsb_CrossApp_EaseSineIn_prototype;

bool js_crossapp_EaseSineIn_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseSineIn_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseSineIn(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseSineIn_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseSineIn_EaseSineIn(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseSineOut_class;
extern JSObject *jsb_CrossApp_EaseSineOut_prototype;

bool js_crossapp_EaseSineOut_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseSineOut_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseSineOut(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseSineOut_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseSineOut_EaseSineOut(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseSineInOut_class;
extern JSObject *jsb_CrossApp_EaseSineInOut_prototype;

bool js_crossapp_EaseSineInOut_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseSineInOut_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseSineInOut(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseSineInOut_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseSineInOut_EaseSineInOut(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseElastic_class;
extern JSObject *jsb_CrossApp_EaseElastic_prototype;

bool js_crossapp_EaseElastic_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseElastic_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseElastic(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseElastic_setPeriod(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseElastic_initWithAction(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseElastic_getPeriod(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseElastic_EaseElastic(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseElasticIn_class;
extern JSObject *jsb_CrossApp_EaseElasticIn_prototype;

bool js_crossapp_EaseElasticIn_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseElasticIn_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseElasticIn(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseElasticIn_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseElasticIn_EaseElasticIn(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseElasticOut_class;
extern JSObject *jsb_CrossApp_EaseElasticOut_prototype;

bool js_crossapp_EaseElasticOut_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseElasticOut_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseElasticOut(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseElasticOut_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseElasticOut_EaseElasticOut(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseElasticInOut_class;
extern JSObject *jsb_CrossApp_EaseElasticInOut_prototype;

bool js_crossapp_EaseElasticInOut_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseElasticInOut_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseElasticInOut(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseElasticInOut_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseElasticInOut_EaseElasticInOut(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseBounce_class;
extern JSObject *jsb_CrossApp_EaseBounce_prototype;

bool js_crossapp_EaseBounce_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseBounce_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseBounce(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseBounce_EaseBounce(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseBounceIn_class;
extern JSObject *jsb_CrossApp_EaseBounceIn_prototype;

bool js_crossapp_EaseBounceIn_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseBounceIn_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseBounceIn(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseBounceIn_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseBounceIn_EaseBounceIn(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseBounceOut_class;
extern JSObject *jsb_CrossApp_EaseBounceOut_prototype;

bool js_crossapp_EaseBounceOut_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseBounceOut_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseBounceOut(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseBounceOut_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseBounceOut_EaseBounceOut(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseBounceInOut_class;
extern JSObject *jsb_CrossApp_EaseBounceInOut_prototype;

bool js_crossapp_EaseBounceInOut_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseBounceInOut_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseBounceInOut(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseBounceInOut_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseBounceInOut_EaseBounceInOut(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseBackIn_class;
extern JSObject *jsb_CrossApp_EaseBackIn_prototype;

bool js_crossapp_EaseBackIn_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseBackIn_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseBackIn(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseBackIn_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseBackIn_EaseBackIn(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseBackOut_class;
extern JSObject *jsb_CrossApp_EaseBackOut_prototype;

bool js_crossapp_EaseBackOut_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseBackOut_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseBackOut(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseBackOut_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseBackOut_EaseBackOut(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseBackInOut_class;
extern JSObject *jsb_CrossApp_EaseBackInOut_prototype;

bool js_crossapp_EaseBackInOut_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseBackInOut_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseBackInOut(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseBackInOut_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseBackInOut_EaseBackInOut(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseBezierAction_class;
extern JSObject *jsb_CrossApp_EaseBezierAction_prototype;

bool js_crossapp_EaseBezierAction_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseBezierAction_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseBezierAction(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseBezierAction_setBezierParamer(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseBezierAction_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseBezierAction_EaseBezierAction(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseQuadraticActionIn_class;
extern JSObject *jsb_CrossApp_EaseQuadraticActionIn_prototype;

bool js_crossapp_EaseQuadraticActionIn_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseQuadraticActionIn_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseQuadraticActionIn(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseQuadraticActionIn_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseQuadraticActionIn_EaseQuadraticActionIn(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseQuadraticActionOut_class;
extern JSObject *jsb_CrossApp_EaseQuadraticActionOut_prototype;

bool js_crossapp_EaseQuadraticActionOut_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseQuadraticActionOut_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseQuadraticActionOut(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseQuadraticActionOut_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseQuadraticActionOut_EaseQuadraticActionOut(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseQuadraticActionInOut_class;
extern JSObject *jsb_CrossApp_EaseQuadraticActionInOut_prototype;

bool js_crossapp_EaseQuadraticActionInOut_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseQuadraticActionInOut_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseQuadraticActionInOut(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseQuadraticActionInOut_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseQuadraticActionInOut_EaseQuadraticActionInOut(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseQuarticActionIn_class;
extern JSObject *jsb_CrossApp_EaseQuarticActionIn_prototype;

bool js_crossapp_EaseQuarticActionIn_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseQuarticActionIn_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseQuarticActionIn(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseQuarticActionIn_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseQuarticActionIn_EaseQuarticActionIn(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseQuarticActionOut_class;
extern JSObject *jsb_CrossApp_EaseQuarticActionOut_prototype;

bool js_crossapp_EaseQuarticActionOut_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseQuarticActionOut_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseQuarticActionOut(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseQuarticActionOut_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseQuarticActionOut_EaseQuarticActionOut(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseQuarticActionInOut_class;
extern JSObject *jsb_CrossApp_EaseQuarticActionInOut_prototype;

bool js_crossapp_EaseQuarticActionInOut_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseQuarticActionInOut_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseQuarticActionInOut(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseQuarticActionInOut_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseQuarticActionInOut_EaseQuarticActionInOut(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseQuinticActionIn_class;
extern JSObject *jsb_CrossApp_EaseQuinticActionIn_prototype;

bool js_crossapp_EaseQuinticActionIn_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseQuinticActionIn_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseQuinticActionIn(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseQuinticActionIn_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseQuinticActionIn_EaseQuinticActionIn(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseQuinticActionOut_class;
extern JSObject *jsb_CrossApp_EaseQuinticActionOut_prototype;

bool js_crossapp_EaseQuinticActionOut_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseQuinticActionOut_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseQuinticActionOut(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseQuinticActionOut_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseQuinticActionOut_EaseQuinticActionOut(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseQuinticActionInOut_class;
extern JSObject *jsb_CrossApp_EaseQuinticActionInOut_prototype;

bool js_crossapp_EaseQuinticActionInOut_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseQuinticActionInOut_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseQuinticActionInOut(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseQuinticActionInOut_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseQuinticActionInOut_EaseQuinticActionInOut(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseCircleActionIn_class;
extern JSObject *jsb_CrossApp_EaseCircleActionIn_prototype;

bool js_crossapp_EaseCircleActionIn_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseCircleActionIn_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseCircleActionIn(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseCircleActionIn_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseCircleActionIn_EaseCircleActionIn(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseCircleActionOut_class;
extern JSObject *jsb_CrossApp_EaseCircleActionOut_prototype;

bool js_crossapp_EaseCircleActionOut_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseCircleActionOut_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseCircleActionOut(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseCircleActionOut_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseCircleActionOut_EaseCircleActionOut(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseCircleActionInOut_class;
extern JSObject *jsb_CrossApp_EaseCircleActionInOut_prototype;

bool js_crossapp_EaseCircleActionInOut_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseCircleActionInOut_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseCircleActionInOut(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseCircleActionInOut_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseCircleActionInOut_EaseCircleActionInOut(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseCubicActionIn_class;
extern JSObject *jsb_CrossApp_EaseCubicActionIn_prototype;

bool js_crossapp_EaseCubicActionIn_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseCubicActionIn_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseCubicActionIn(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseCubicActionIn_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseCubicActionIn_EaseCubicActionIn(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseCubicActionOut_class;
extern JSObject *jsb_CrossApp_EaseCubicActionOut_prototype;

bool js_crossapp_EaseCubicActionOut_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseCubicActionOut_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseCubicActionOut(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseCubicActionOut_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseCubicActionOut_EaseCubicActionOut(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_EaseCubicActionInOut_class;
extern JSObject *jsb_CrossApp_EaseCubicActionInOut_prototype;

bool js_crossapp_EaseCubicActionInOut_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_EaseCubicActionInOut_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_EaseCubicActionInOut(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_EaseCubicActionInOut_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_EaseCubicActionInOut_EaseCubicActionInOut(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_ActionTween_class;
extern JSObject *jsb_CrossApp_ActionTween_prototype;

bool js_crossapp_ActionTween_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_ActionTween_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_ActionTween(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_ActionTween_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionTween_create(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_ActionInstant_class;
extern JSObject *jsb_CrossApp_ActionInstant_prototype;

bool js_crossapp_ActionInstant_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_ActionInstant_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_ActionInstant(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);

extern JSClass  *jsb_CrossApp_Show_class;
extern JSObject *jsb_CrossApp_Show_prototype;

bool js_crossapp_Show_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_Show_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_Show(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_Show_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Show_Show(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_Hide_class;
extern JSObject *jsb_CrossApp_Hide_prototype;

bool js_crossapp_Hide_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_Hide_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_Hide(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_Hide_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Hide_Hide(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_ToggleVisibility_class;
extern JSObject *jsb_CrossApp_ToggleVisibility_prototype;

bool js_crossapp_ToggleVisibility_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_ToggleVisibility_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_ToggleVisibility(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_ToggleVisibility_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ToggleVisibility_ToggleVisibility(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_RemoveSelf_class;
extern JSObject *jsb_CrossApp_RemoveSelf_prototype;

bool js_crossapp_RemoveSelf_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_RemoveSelf_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_RemoveSelf(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_RemoveSelf_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_RemoveSelf_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_RemoveSelf_RemoveSelf(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_FlipX_class;
extern JSObject *jsb_CrossApp_FlipX_prototype;

bool js_crossapp_FlipX_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_FlipX_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_FlipX(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_FlipX_initWithFlipX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FlipX_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FlipX_FlipX(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_FlipY_class;
extern JSObject *jsb_CrossApp_FlipY_prototype;

bool js_crossapp_FlipY_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_FlipY_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_FlipY(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_FlipY_initWithFlipY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FlipY_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FlipY_FlipY(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_Place_class;
extern JSObject *jsb_CrossApp_Place_prototype;

bool js_crossapp_Place_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_Place_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_Place(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_Place_initWithPosition(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Place_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_Place_Place(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CallFunc_class;
extern JSObject *jsb_CrossApp_CallFunc_prototype;

bool js_crossapp_CallFunc_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CallFunc_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CallFunc(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CallFunc_execute(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CallFunc_initWithFunction(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CallFunc_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CallFunc_CallFunc(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CallFuncN_class;
extern JSObject *jsb_CrossApp_CallFuncN_prototype;

bool js_crossapp_CallFuncN_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CallFuncN_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CallFuncN(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CallFuncN_initWithFunction(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CallFuncN_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CallFuncN_CallFuncN(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_ActionManager_class;
extern JSObject *jsb_CrossApp_ActionManager_prototype;

bool js_crossapp_ActionManager_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_ActionManager_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_ActionManager(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_ActionManager_getActionByTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionManager_removeActionByTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionManager_removeActionsByFlags(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionManager_removeAllActions(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionManager_addAction(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionManager_resumeTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionManager_update(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionManager_pauseTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionManager_getNumberOfRunningActionsInTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionManager_removeAllActionsFromTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionManager_resumeTargets(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionManager_removeAction(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionManager_removeAllActionsByTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionManager_pauseAllRunningActions(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_ActionManager_ActionManager(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CocosDenshion_SimpleAudioEngine_class;
extern JSObject *jsb_CocosDenshion_SimpleAudioEngine_prototype;

bool js_crossapp_SimpleAudioEngine_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_SimpleAudioEngine_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_SimpleAudioEngine(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_SimpleAudioEngine_stopAllEffects(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_getEffectsVolume(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_stopEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_getBackgroundMusicVolume(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_willPlayBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_setBackgroundMusicVolume(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_stopBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_pauseBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_isBackgroundMusicPlaying(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_resumeAllEffects(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_pauseAllEffects(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_preloadBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_playBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_playEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_preloadEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_unloadEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_rewindBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_pauseEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_getClassTypeInfo(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_resumeBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_setEffectsVolume(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_resumeEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_end(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_sharedEngine(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_SimpleAudioEngine(JSContext *cx, uint32_t argc, jsval *vp);

#endif // __crossapp_h__
