#include "jsb_crossapp_auto.hpp"
#include "crossapp_specifics.hpp"
#include "CrossApp.h"
#include "SimpleAudioEngine.h"

template<class T>
static bool dummy_constructor(JSContext *cx, uint32_t argc, jsval *vp) {
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedValue initializing(cx);
    bool isNewValid = true;
    JS::RootedObject global(cx, ScriptingCore::getInstance()->getGlobalObject());
    isNewValid = JS_GetProperty(cx, global, "initializing", &initializing) && initializing.toBoolean();
    if (isNewValid)
    {
        TypeTest<T> t;
        js_type_class_t *typeClass = nullptr;
        std::string typeName = t.s_name();
        auto typeMapIter = _js_global_type_map.find(typeName);
        CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
        typeClass = typeMapIter->second;
        CCAssert(typeClass, "The value is null.");

        JS::RootedObject proto(cx, typeClass->proto.get());
        JS::RootedObject parent(cx, typeClass->parentProto.get());
        JS::RootedObject _tmp(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));

        args.rval().set(OBJECT_TO_JSVAL(_tmp));
        return true;
    }

    JS_ReportError(cx, "Constructor for the requested class is not available, please refer to the API reference.");
    return false;
}

static bool empty_constructor(JSContext *cx, uint32_t argc, jsval *vp) {
    return false;
}

static bool js_is_native_obj(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    args.rval().setBoolean(true);
    return true;
}
JSClass  *jsb_CrossApp_CAObject_class;
JSObject *jsb_CrossApp_CAObject_prototype;

bool js_crossapp_CAObject_getUID(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAObject_getUID : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getUID();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAObject_getUID : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAObject_setUserObject(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAObject_setUserObject : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAObject_setUserObject : Error processing arguments");
        cobj->setUserObject(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAObject_setUserObject : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAObject_getUserObject(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAObject_getUserObject : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAObject* ret = cobj->getUserObject();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAObject>(cx, (CrossApp::CAObject*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAObject_getUserObject : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAObject_update(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAObject_update : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAObject_update : Error processing arguments");
        cobj->update(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAObject_update : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAObject_isEqual(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAObject_isEqual : Invalid Native Object");
    if (argc == 1) {
        const CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAObject_isEqual : Error processing arguments");
        bool ret = cobj->isEqual(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAObject_isEqual : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAObject_isSingleReference(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAObject_isSingleReference : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isSingleReference();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAObject_isSingleReference : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAObject_autorelease(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAObject_autorelease : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAObject* ret = cobj->autorelease();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAObject>(cx, (CrossApp::CAObject*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAObject_autorelease : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAObject_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAObject_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAObject_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAObject_setTextTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAObject_setTextTag : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAObject_setTextTag : Error processing arguments");
        cobj->setTextTag(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAObject_setTextTag : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAObject_setTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAObject_setTag : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAObject_setTag : Error processing arguments");
        cobj->setTag(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAObject_setTag : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAObject_release(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAObject_release : Invalid Native Object");
    if (argc == 0) {
        cobj->release();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAObject_release : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAObject_retain(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAObject_retain : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAObject* ret = cobj->retain();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAObject>(cx, (CrossApp::CAObject*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAObject_retain : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAObject_getTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAObject_getTag : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getTag();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAObject_getTag : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAObject_retainCount(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAObject_retainCount : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->retainCount();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAObject_retainCount : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAObject_getStrID(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAObject_getStrID : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getStrID();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAObject_getStrID : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAObject_getTextTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAObject_getTextTag : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getTextTag();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAObject_getTextTag : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAObject_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAObject* cobj = new (std::nothrow) CrossApp::CAObject();
    TypeTest<CrossApp::CAObject> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAObject");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_CAObject_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::CAObject *nobj = new (std::nothrow) CrossApp::CAObject();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAObject");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


void js_CrossApp_CAObject_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAObject)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAObject *nobj = static_cast<CrossApp::CAObject *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_CAObject(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAObject_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAObject_class->name = "CAObject";
    jsb_CrossApp_CAObject_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAObject_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAObject_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAObject_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAObject_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAObject_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAObject_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAObject_class->finalize = js_CrossApp_CAObject_finalize;
    jsb_CrossApp_CAObject_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getUID", js_crossapp_CAObject_getUID, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setUserObject", js_crossapp_CAObject_setUserObject, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getUserObject", js_crossapp_CAObject_getUserObject, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("update", js_crossapp_CAObject_update, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isEqual", js_crossapp_CAObject_isEqual, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isSingleReference", js_crossapp_CAObject_isSingleReference, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("autorelease", js_crossapp_CAObject_autorelease, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CAObject_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTextTag", js_crossapp_CAObject_setTextTag, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTag", js_crossapp_CAObject_setTag, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("release", js_crossapp_CAObject_release, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("retain", js_crossapp_CAObject_retain, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTag", js_crossapp_CAObject_getTag, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("retainCount", js_crossapp_CAObject_retainCount, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getStrID", js_crossapp_CAObject_getStrID, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTextTag", js_crossapp_CAObject_getTextTag, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_CAObject_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAObject_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CAObject_class,
        js_crossapp_CAObject_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAObject", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAObject> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAObject_class;
        p->proto = jsb_CrossApp_CAObject_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.CAObject.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_CAScheduler_class;
JSObject *jsb_CrossApp_CAScheduler_prototype;

bool js_crossapp_CAScheduler_unscheduleUpdate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScheduler_unscheduleUpdate : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScheduler_unscheduleUpdate : Error processing arguments");
        cobj->unscheduleUpdate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScheduler_unscheduleUpdate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScheduler_resumeAll(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScheduler_resumeAll : Invalid Native Object");
    if (argc == 0) {
        cobj->resumeAll();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScheduler_resumeAll : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScheduler_setTimeScale(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScheduler_setTimeScale : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScheduler_setTimeScale : Error processing arguments");
        cobj->setTimeScale(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScheduler_setTimeScale : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScheduler_getTimeScale(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScheduler_getTimeScale : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getTimeScale();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScheduler_getTimeScale : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScheduler_schedule(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CAScheduler* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScheduler_schedule : Invalid Native Object");
    do {
        if (argc == 6) {
            std::function<void (float)> arg0;
            do {
			    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
			    {
			        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
			        auto lambda = [=, &ok](float larg0) -> void {
			            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
			            jsval largv[1];
			            largv[0] = DOUBLE_TO_JSVAL(larg0);
			            JS::RootedValue rval(cx);
			            bool succeed = func->invoke(1, &largv[0], &rval);
			            if (!succeed && JS_IsExceptionPending(cx)) {
			                JS_ReportPendingException(cx);
			            }
			        };
			        arg0 = lambda;
			    }
			    else
			    {
			        arg0 = nullptr;
			    }
			} while(0)
			;
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= jsval_to_std_string(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAObject* arg2 = nullptr;
            do {
                if (args.get(2).isNull()) { arg2 = nullptr; break; }
                if (!args.get(2).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(2).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg2 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg2, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            double arg3 = 0;
            ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
            if (!ok) { ok = true; break; }
            uint32_t arg4 = 0;
            ok &= jsval_to_uint32(cx, args.get(4), &arg4);
            if (!ok) { ok = true; break; }
            double arg5 = 0;
            ok &= JS::ToNumber( cx, args.get(5), &arg5) && !isnan(arg5);
            if (!ok) { ok = true; break; }
            cobj->schedule(arg0, arg1, arg2, arg3, arg4, arg5);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 7) {
            std::function<void (float)> arg0;
            do {
			    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
			    {
			        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
			        auto lambda = [=, &ok](float larg0) -> void {
			            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
			            jsval largv[1];
			            largv[0] = DOUBLE_TO_JSVAL(larg0);
			            JS::RootedValue rval(cx);
			            bool succeed = func->invoke(1, &largv[0], &rval);
			            if (!succeed && JS_IsExceptionPending(cx)) {
			                JS_ReportPendingException(cx);
			            }
			        };
			        arg0 = lambda;
			    }
			    else
			    {
			        arg0 = nullptr;
			    }
			} while(0)
			;
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= jsval_to_std_string(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAObject* arg2 = nullptr;
            do {
                if (args.get(2).isNull()) { arg2 = nullptr; break; }
                if (!args.get(2).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(2).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg2 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg2, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            double arg3 = 0;
            ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
            if (!ok) { ok = true; break; }
            uint32_t arg4 = 0;
            ok &= jsval_to_uint32(cx, args.get(4), &arg4);
            if (!ok) { ok = true; break; }
            double arg5 = 0;
            ok &= JS::ToNumber( cx, args.get(5), &arg5) && !isnan(arg5);
            if (!ok) { ok = true; break; }
            bool arg6;
            arg6 = JS::ToBoolean(args.get(6));
            cobj->schedule(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 4) {
            std::function<void (float)> arg0;
            do {
			    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
			    {
			        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
			        auto lambda = [=, &ok](float larg0) -> void {
			            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
			            jsval largv[1];
			            largv[0] = DOUBLE_TO_JSVAL(larg0);
			            JS::RootedValue rval(cx);
			            bool succeed = func->invoke(1, &largv[0], &rval);
			            if (!succeed && JS_IsExceptionPending(cx)) {
			                JS_ReportPendingException(cx);
			            }
			        };
			        arg0 = lambda;
			    }
			    else
			    {
			        arg0 = nullptr;
			    }
			} while(0)
			;
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= jsval_to_std_string(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAObject* arg2 = nullptr;
            do {
                if (args.get(2).isNull()) { arg2 = nullptr; break; }
                if (!args.get(2).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(2).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg2 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg2, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            double arg3 = 0;
            ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
            if (!ok) { ok = true; break; }
            cobj->schedule(arg0, arg1, arg2, arg3);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 5) {
            std::function<void (float)> arg0;
            do {
			    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
			    {
			        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
			        auto lambda = [=, &ok](float larg0) -> void {
			            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
			            jsval largv[1];
			            largv[0] = DOUBLE_TO_JSVAL(larg0);
			            JS::RootedValue rval(cx);
			            bool succeed = func->invoke(1, &largv[0], &rval);
			            if (!succeed && JS_IsExceptionPending(cx)) {
			                JS_ReportPendingException(cx);
			            }
			        };
			        arg0 = lambda;
			    }
			    else
			    {
			        arg0 = nullptr;
			    }
			} while(0)
			;
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= jsval_to_std_string(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAObject* arg2 = nullptr;
            do {
                if (args.get(2).isNull()) { arg2 = nullptr; break; }
                if (!args.get(2).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(2).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg2 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg2, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            double arg3 = 0;
            ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
            if (!ok) { ok = true; break; }
            bool arg4;
            arg4 = JS::ToBoolean(args.get(4));
            cobj->schedule(arg0, arg1, arg2, arg3, arg4);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CAScheduler_schedule : wrong number of arguments");
    return false;
}
bool js_crossapp_CAScheduler_unscheduleAllWithMinPriority(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScheduler_unscheduleAllWithMinPriority : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScheduler_unscheduleAllWithMinPriority : Error processing arguments");
        cobj->unscheduleAllWithMinPriority(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScheduler_unscheduleAllWithMinPriority : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScheduler_isScheduled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScheduler_isScheduled : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        CrossApp::CAObject* arg1 = nullptr;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScheduler_isScheduled : Error processing arguments");
        bool ret = cobj->isScheduled(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScheduler_isScheduled : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAScheduler_isTargetPaused(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScheduler_isTargetPaused : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScheduler_isTargetPaused : Error processing arguments");
        bool ret = cobj->isTargetPaused(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScheduler_isTargetPaused : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScheduler_update(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScheduler_update : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScheduler_update : Error processing arguments");
        cobj->update(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScheduler_update : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScheduler_resumeTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScheduler_resumeTarget : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScheduler_resumeTarget : Error processing arguments");
        cobj->resumeTarget(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScheduler_resumeTarget : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScheduler_resumeAllTargetsWithMinPriority(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScheduler_resumeAllTargetsWithMinPriority : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScheduler_resumeAllTargetsWithMinPriority : Error processing arguments");
        cobj->resumeAllTargetsWithMinPriority(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScheduler_resumeAllTargetsWithMinPriority : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScheduler_performFunctionInUIThread(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScheduler_performFunctionInUIThread : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScheduler_performFunctionInUIThread : Error processing arguments");
        cobj->performFunctionInUIThread(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScheduler_performFunctionInUIThread : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScheduler_unschedule(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScheduler_unschedule : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        CrossApp::CAObject* arg1 = nullptr;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScheduler_unschedule : Error processing arguments");
        cobj->unschedule(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScheduler_unschedule : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAScheduler_unscheduleAll(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScheduler_unscheduleAll : Invalid Native Object");
    if (argc == 0) {
        cobj->unscheduleAll();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScheduler_unscheduleAll : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScheduler_scheduleOnce(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScheduler_scheduleOnce : Invalid Native Object");
    if (argc == 4) {
        std::function<void (float)> arg0;
        std::string arg1;
        CrossApp::CAObject* arg2 = nullptr;
        double arg3 = 0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](float larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = DOUBLE_TO_JSVAL(larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        do {
            if (args.get(2).isNull()) { arg2 = nullptr; break; }
            if (!args.get(2).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(2).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg2 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg2, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScheduler_scheduleOnce : Error processing arguments");
        cobj->scheduleOnce(arg0, arg1, arg2, arg3);
        args.rval().setUndefined();
        return true;
    }
    if (argc == 5) {
        std::function<void (float)> arg0;
        std::string arg1;
        CrossApp::CAObject* arg2 = nullptr;
        double arg3 = 0;
        bool arg4;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](float larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = DOUBLE_TO_JSVAL(larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        do {
            if (args.get(2).isNull()) { arg2 = nullptr; break; }
            if (!args.get(2).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(2).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg2 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg2, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
        arg4 = JS::ToBoolean(args.get(4));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScheduler_scheduleOnce : Error processing arguments");
        cobj->scheduleOnce(arg0, arg1, arg2, arg3, arg4);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScheduler_scheduleOnce : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_crossapp_CAScheduler_unscheduleAllForTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScheduler_unscheduleAllForTarget : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScheduler_unscheduleAllForTarget : Error processing arguments");
        cobj->unscheduleAllForTarget(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScheduler_unscheduleAllForTarget : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScheduler_pauseTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScheduler_pauseTarget : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScheduler_pauseTarget : Error processing arguments");
        cobj->pauseTarget(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScheduler_pauseTarget : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScheduler_pauseAll(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScheduler_pauseAll : Invalid Native Object");
    if (argc == 0) {
        cobj->pauseAll();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScheduler_pauseAll : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScheduler_scheduleUpdate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScheduler_scheduleUpdate : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CAObject* arg0 = nullptr;
        int arg1 = 0;
        bool arg2;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        arg2 = JS::ToBoolean(args.get(2));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScheduler_scheduleUpdate : Error processing arguments");
        cobj->scheduleUpdate(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScheduler_scheduleUpdate : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_crossapp_CAScheduler_getScheduler(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAScheduler* ret = CrossApp::CAScheduler::getScheduler();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAScheduler>(cx, (CrossApp::CAScheduler*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAScheduler_getScheduler : wrong number of arguments");
    return false;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAScheduler_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAScheduler)", obj);
}
void js_register_crossapp_CAScheduler(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAScheduler_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAScheduler_class->name = "CAScheduler";
    jsb_CrossApp_CAScheduler_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAScheduler_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAScheduler_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAScheduler_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAScheduler_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAScheduler_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAScheduler_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAScheduler_class->finalize = js_CrossApp_CAScheduler_finalize;
    jsb_CrossApp_CAScheduler_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("unscheduleUpdate", js_crossapp_CAScheduler_unscheduleUpdate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("resumeAll", js_crossapp_CAScheduler_resumeAll, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTimeScale", js_crossapp_CAScheduler_setTimeScale, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTimeScale", js_crossapp_CAScheduler_getTimeScale, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("schedule", js_crossapp_CAScheduler_schedule, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("unscheduleAllWithMinPriority", js_crossapp_CAScheduler_unscheduleAllWithMinPriority, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isScheduled", js_crossapp_CAScheduler_isScheduled, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isTargetPaused", js_crossapp_CAScheduler_isTargetPaused, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("update", js_crossapp_CAScheduler_update, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("resumeTarget", js_crossapp_CAScheduler_resumeTarget, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("resumeAllTargetsWithMinPriority", js_crossapp_CAScheduler_resumeAllTargetsWithMinPriority, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("performFunctionInUIThread", js_crossapp_CAScheduler_performFunctionInUIThread, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("unschedule", js_crossapp_CAScheduler_unschedule, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("unscheduleAll", js_crossapp_CAScheduler_unscheduleAll, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("scheduleOnce", js_crossapp_CAScheduler_scheduleOnce, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("unscheduleAllForTarget", js_crossapp_CAScheduler_unscheduleAllForTarget, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("pauseTarget", js_crossapp_CAScheduler_pauseTarget, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("pauseAll", js_crossapp_CAScheduler_pauseAll, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("scheduleUpdate", js_crossapp_CAScheduler_scheduleUpdate, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("getScheduler", js_crossapp_CAScheduler_getScheduler, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAScheduler_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAScheduler_class,
        dummy_constructor<CrossApp::CAScheduler>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAScheduler", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAScheduler> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAScheduler_class;
        p->proto = jsb_CrossApp_CAScheduler_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CACustomAnimation_class;
JSObject *jsb_CrossApp_CACustomAnimation_prototype;

bool js_crossapp_CACustomAnimation_unschedule(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACustomAnimation_unschedule : Error processing arguments");
        CrossApp::CACustomAnimation::unschedule(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CACustomAnimation_unschedule : wrong number of arguments");
    return false;
}
bool js_crossapp_CACustomAnimation_isSchedule(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACustomAnimation_isSchedule : Error processing arguments");
        bool ret = CrossApp::CACustomAnimation::isSchedule(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CACustomAnimation_isSchedule : wrong number of arguments");
    return false;
}

void js_CrossApp_CACustomAnimation_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CACustomAnimation)", obj);
}
void js_register_crossapp_CACustomAnimation(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CACustomAnimation_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CACustomAnimation_class->name = "CACustomAnimation";
    jsb_CrossApp_CACustomAnimation_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CACustomAnimation_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CACustomAnimation_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CACustomAnimation_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CACustomAnimation_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CACustomAnimation_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CACustomAnimation_class->convert = JS_ConvertStub;
    jsb_CrossApp_CACustomAnimation_class->finalize = js_CrossApp_CACustomAnimation_finalize;
    jsb_CrossApp_CACustomAnimation_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("unschedule", js_crossapp_CACustomAnimation_unschedule, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isSchedule", js_crossapp_CACustomAnimation_isSchedule, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CACustomAnimation_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CACustomAnimation_class,
        dummy_constructor<CrossApp::CACustomAnimation>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CACustomAnimation", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CACustomAnimation> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CACustomAnimation_class;
        p->proto = jsb_CrossApp_CACustomAnimation_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAData_class;
JSObject *jsb_CrossApp_CAData_prototype;

bool js_crossapp_CAData_getLength(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAData* cobj = (CrossApp::CAData *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAData_getLength : Invalid Native Object");
    if (argc == 0) {
        ssize_t ret = cobj->getLength();
        jsval jsret = JSVAL_NULL;
        jsret = ssize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAData_getLength : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAData_clear(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAData* cobj = (CrossApp::CAData *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAData_clear : Invalid Native Object");
    if (argc == 0) {
        cobj->clear();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAData_clear : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAData_isNull(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAData* cobj = (CrossApp::CAData *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAData_isNull : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isNull();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAData_isNull : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAData_toString(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAData* cobj = (CrossApp::CAData *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAData_toString : Invalid Native Object");
    if (argc == 0) {
        std::string ret = cobj->toString();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAData_toString : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAData_fastSet(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAData* cobj = (CrossApp::CAData *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAData_fastSet : Invalid Native Object");
    if (argc == 2) {
        unsigned char* arg0 = nullptr;
        ssize_t arg1 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = (unsigned char*)arg0_tmp.c_str();
        ok &= jsval_to_ssize(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAData_fastSet : Error processing arguments");
        cobj->fastSet(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAData_fastSet : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAData_copyString(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAData* cobj = (CrossApp::CAData *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAData_copyString : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAData_copyString : Error processing arguments");
        cobj->copyString(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAData_copyString : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAData_copy(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAData* cobj = (CrossApp::CAData *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAData_copy : Invalid Native Object");
    if (argc == 2) {
        const unsigned char* arg0 = nullptr;
        ssize_t arg1 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = (unsigned char*)arg0_tmp.c_str();
        ok &= jsval_to_ssize(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAData_copy : Error processing arguments");
        cobj->copy(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAData_copy : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAData_getBytes(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAData* cobj = (CrossApp::CAData *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAData_getBytes : Invalid Native Object");
    if (argc == 0) {
        unsigned char* ret = cobj->getBytes();
        jsval jsret = JSVAL_NULL;
        jsret = u_char_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAData_getBytes : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAData_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAData* ret = CrossApp::CAData::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAData>(cx, (CrossApp::CAData*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAData_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CAData_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAData* cobj = new (std::nothrow) CrossApp::CAData();
    TypeTest<CrossApp::CAData> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAData");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAData_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAData)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAData *nobj = static_cast<CrossApp::CAData *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAData(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAData_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAData_class->name = "CAData";
    jsb_CrossApp_CAData_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAData_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAData_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAData_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAData_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAData_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAData_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAData_class->finalize = js_CrossApp_CAData_finalize;
    jsb_CrossApp_CAData_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getLength", js_crossapp_CAData_getLength, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("clear", js_crossapp_CAData_clear, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isNull", js_crossapp_CAData_isNull, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("toString", js_crossapp_CAData_toString, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("fastSet", js_crossapp_CAData_fastSet, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("copyString", js_crossapp_CAData_copyString, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("copy", js_crossapp_CAData_copy, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBytes", js_crossapp_CAData_getBytes, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CAData_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAData_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAData_class,
        js_crossapp_CAData_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAData", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAData> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAData_class;
        p->proto = jsb_CrossApp_CAData_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAImage_class;
JSObject *jsb_CrossApp_CAImage_prototype;

bool js_crossapp_CAImage_getShaderProgram(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_getShaderProgram : Invalid Native Object");
    if (argc == 0) {
        CrossApp::GLProgram* ret = cobj->getShaderProgram();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::GLProgram>(cx, (CrossApp::GLProgram*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_getShaderProgram : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_setShaderProgram(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_setShaderProgram : Invalid Native Object");
    if (argc == 1) {
        CrossApp::GLProgram* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::GLProgram*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_setShaderProgram : Error processing arguments");
        cobj->setShaderProgram(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_setShaderProgram : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAImage_premultipliedImageData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_premultipliedImageData : Invalid Native Object");
    if (argc == 0) {
        cobj->premultipliedImageData();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_premultipliedImageData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_getMaxT(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_getMaxT : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getMaxT();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_getMaxT : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_stringForFormat(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_stringForFormat : Invalid Native Object");
    if (argc == 0) {
        const char* ret = cobj->stringForFormat();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_stringForFormat : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_setMaxS(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_setMaxS : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_setMaxS : Error processing arguments");
        cobj->setMaxS(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_setMaxS : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAImage_setAntiAliasTexParameters(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_setAntiAliasTexParameters : Invalid Native Object");
    if (argc == 0) {
        cobj->setAntiAliasTexParameters();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_setAntiAliasTexParameters : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_getMaxS(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_getMaxS : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getMaxS();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_getMaxS : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_getAspectRatio(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_getAspectRatio : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getAspectRatio();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_getAspectRatio : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_hasPremultipliedAlpha(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_hasPremultipliedAlpha : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->hasPremultipliedAlpha();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_hasPremultipliedAlpha : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_getPixelsWide(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_getPixelsWide : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getPixelsWide();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_getPixelsWide : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_getPixelsHigh(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_getPixelsHigh : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getPixelsHigh();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_getPixelsHigh : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_freeName(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_freeName : Invalid Native Object");
    if (argc == 0) {
        cobj->freeName();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_freeName : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_isTiff(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_isTiff : Invalid Native Object");
    if (argc == 2) {
        const unsigned char* arg0 = nullptr;
        unsigned long arg1 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = (unsigned char*)arg0_tmp.c_str();
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_isTiff : Error processing arguments");
        bool ret = cobj->isTiff(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_isTiff : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAImage_bitsPerPixelForFormat(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CAImage* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_bitsPerPixelForFormat : Invalid Native Object");
    do {
        if (argc == 1) {
            CrossApp::CAImage::PixelFormat arg0;
            ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            uint32_t ret = cobj->bitsPerPixelForFormat(arg0);
            jsval jsret = JSVAL_NULL;
            jsret = uint32_to_jsval(cx, ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 0) {
            uint32_t ret = cobj->bitsPerPixelForFormat();
            jsval jsret = JSVAL_NULL;
            jsret = uint32_to_jsval(cx, ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CAImage_bitsPerPixelForFormat : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImage_getName(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_getName : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getName();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_getName : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_convertDataToFormat(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_convertDataToFormat : Invalid Native Object");
    if (argc == 6) {
        const unsigned char* arg0 = nullptr;
        unsigned long arg1 = 0;
        CrossApp::CAImage::PixelFormat arg2;
        CrossApp::CAImage::PixelFormat arg3;
        unsigned char** arg4 = nullptr;
        unsigned long* arg5 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = (unsigned char*)arg0_tmp.c_str();
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
        ok &= jsval_to_int32(cx, args.get(3), (int32_t *)&arg3);
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned char**
		ok = false;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned long*
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_convertDataToFormat : Error processing arguments");
        int ret = (int)cobj->convertDataToFormat(arg0, arg1, arg2, arg3, arg4, arg5);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_convertDataToFormat : wrong number of arguments: %d, was expecting %d", argc, 6);
    return false;
}
bool js_crossapp_CAImage_setMaxT(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_setMaxT : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_setMaxT : Error processing arguments");
        cobj->setMaxT(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_setMaxT : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAImage_initWithImageFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_initWithImageFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_initWithImageFile : Error processing arguments");
        bool ret = cobj->initWithImageFile(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        std::string arg0;
        bool arg1;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_initWithImageFile : Error processing arguments");
        bool ret = cobj->initWithImageFile(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_initWithImageFile : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAImage_drawInRect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_drawInRect : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_drawInRect : Error processing arguments");
        cobj->drawInRect(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_drawInRect : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAImage_getBitPerPixel(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_getBitPerPixel : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getBitPerPixel();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_getBitPerPixel : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_getContentSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_getContentSize : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DSize& ret = cobj->getContentSize();
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_getContentSize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_getData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_getData : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAData* ret = cobj->getData();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAData>(cx, (CrossApp::CAData*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_getData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_convertRGBA8888ToFormat(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_convertRGBA8888ToFormat : Invalid Native Object");
    if (argc == 5) {
        const unsigned char* arg0 = nullptr;
        unsigned long arg1 = 0;
        CrossApp::CAImage::PixelFormat arg2;
        unsigned char** arg3 = nullptr;
        unsigned long* arg4 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = (unsigned char*)arg0_tmp.c_str();
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned char**
		ok = false;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned long*
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_convertRGBA8888ToFormat : Error processing arguments");
        int ret = (int)cobj->convertRGBA8888ToFormat(arg0, arg1, arg2, arg3, arg4);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_convertRGBA8888ToFormat : wrong number of arguments: %d, was expecting %d", argc, 5);
    return false;
}
bool js_crossapp_CAImage_setAliasTexParameters(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_setAliasTexParameters : Invalid Native Object");
    if (argc == 0) {
        cobj->setAliasTexParameters();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_setAliasTexParameters : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_isPng(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_isPng : Invalid Native Object");
    if (argc == 2) {
        const unsigned char* arg0 = nullptr;
        unsigned long arg1 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = (unsigned char*)arg0_tmp.c_str();
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_isPng : Error processing arguments");
        bool ret = cobj->isPng(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_isPng : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAImage_initWithColor4B(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_initWithColor4B : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_initWithColor4B : Error processing arguments");
        bool ret = cobj->initWithColor4B(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_initWithColor4B : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAImage_generateMipmap(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_generateMipmap : Invalid Native Object");
    if (argc == 0) {
        cobj->generateMipmap();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_generateMipmap : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_saveToFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_saveToFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_saveToFile : Error processing arguments");
        bool ret = cobj->saveToFile(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        std::string arg0;
        bool arg1;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_saveToFile : Error processing arguments");
        bool ret = cobj->saveToFile(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_saveToFile : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAImage_description(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_description : Invalid Native Object");
    if (argc == 0) {
        const char* ret = cobj->description();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_description : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_convertI8ToFormat(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_convertI8ToFormat : Invalid Native Object");
    if (argc == 5) {
        const unsigned char* arg0 = nullptr;
        unsigned long arg1 = 0;
        CrossApp::CAImage::PixelFormat arg2;
        unsigned char** arg3 = nullptr;
        unsigned long* arg4 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = (unsigned char*)arg0_tmp.c_str();
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned char**
		ok = false;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned long*
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_convertI8ToFormat : Error processing arguments");
        int ret = (int)cobj->convertI8ToFormat(arg0, arg1, arg2, arg3, arg4);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_convertI8ToFormat : wrong number of arguments: %d, was expecting %d", argc, 5);
    return false;
}
bool js_crossapp_CAImage_isMonochrome(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_isMonochrome : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isMonochrome();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_isMonochrome : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_initWithImageData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_initWithImageData : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAData* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAData*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_initWithImageData : Error processing arguments");
        bool ret = cobj->initWithImageData(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::CAData* arg0 = nullptr;
        bool arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAData*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_initWithImageData : Error processing arguments");
        bool ret = cobj->initWithImageData(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_initWithImageData : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAImage_getPixelFormat(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_getPixelFormat : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getPixelFormat();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_getPixelFormat : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_hasAlpha(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_hasAlpha : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->hasAlpha();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_hasAlpha : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_isEtc(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_isEtc : Invalid Native Object");
    if (argc == 2) {
        const unsigned char* arg0 = nullptr;
        unsigned long arg1 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = (unsigned char*)arg0_tmp.c_str();
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_isEtc : Error processing arguments");
        bool ret = cobj->isEtc(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_isEtc : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAImage_isWebp(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_isWebp : Invalid Native Object");
    if (argc == 2) {
        const unsigned char* arg0 = nullptr;
        unsigned long arg1 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = (unsigned char*)arg0_tmp.c_str();
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_isWebp : Error processing arguments");
        bool ret = cobj->isWebp(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_isWebp : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAImage_copy(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_copy : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->copy();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_copy : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_getImageFileType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_getImageFileType : Invalid Native Object");
    if (argc == 0) {
        const char* ret = cobj->getImageFileType();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_getImageFileType : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_drawAtPoint(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_drawAtPoint : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DPoint arg0;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_drawAtPoint : Error processing arguments");
        cobj->drawAtPoint(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_drawAtPoint : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAImage_initWithRawData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_initWithRawData : Invalid Native Object");
    if (argc == 4) {
        CrossApp::CAData* arg0 = nullptr;
        CrossApp::CAImage::PixelFormat arg1;
        uint32_t arg2 = 0;
        uint32_t arg3 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAData*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        ok &= jsval_to_uint32(cx, args.get(3), &arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_initWithRawData : Error processing arguments");
        bool ret = cobj->initWithRawData(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 5) {
        CrossApp::CAData* arg0 = nullptr;
        CrossApp::CAImage::PixelFormat arg1;
        uint32_t arg2 = 0;
        uint32_t arg3 = 0;
        bool arg4;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAData*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        ok &= jsval_to_uint32(cx, args.get(3), &arg3);
        arg4 = JS::ToBoolean(args.get(4));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_initWithRawData : Error processing arguments");
        bool ret = cobj->initWithRawData(arg0, arg1, arg2, arg3, arg4);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_initWithRawData : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_crossapp_CAImage_repremultipliedImageData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_repremultipliedImageData : Invalid Native Object");
    if (argc == 0) {
        cobj->repremultipliedImageData();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_repremultipliedImageData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_convertAI88ToFormat(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_convertAI88ToFormat : Invalid Native Object");
    if (argc == 5) {
        const unsigned char* arg0 = nullptr;
        unsigned long arg1 = 0;
        CrossApp::CAImage::PixelFormat arg2;
        unsigned char** arg3 = nullptr;
        unsigned long* arg4 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = (unsigned char*)arg0_tmp.c_str();
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned char**
		ok = false;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned long*
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_convertAI88ToFormat : Error processing arguments");
        int ret = (int)cobj->convertAI88ToFormat(arg0, arg1, arg2, arg3, arg4);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_convertAI88ToFormat : wrong number of arguments: %d, was expecting %d", argc, 5);
    return false;
}
bool js_crossapp_CAImage_detectFormat(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_detectFormat : Invalid Native Object");
    if (argc == 2) {
        const unsigned char* arg0 = nullptr;
        unsigned long arg1 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = (unsigned char*)arg0_tmp.c_str();
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_detectFormat : Error processing arguments");
        int ret = (int)cobj->detectFormat(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_detectFormat : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAImage_hasMipmaps(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_hasMipmaps : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->hasMipmaps();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_hasMipmaps : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_isCompressed(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_isCompressed : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isCompressed();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_isCompressed : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImage_isJpg(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_isJpg : Invalid Native Object");
    if (argc == 2) {
        const unsigned char* arg0 = nullptr;
        unsigned long arg1 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = (unsigned char*)arg0_tmp.c_str();
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_isJpg : Error processing arguments");
        bool ret = cobj->isJpg(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_isJpg : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAImage_convertRGB888ToFormat(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_convertRGB888ToFormat : Invalid Native Object");
    if (argc == 5) {
        const unsigned char* arg0 = nullptr;
        unsigned long arg1 = 0;
        CrossApp::CAImage::PixelFormat arg2;
        unsigned char** arg3 = nullptr;
        unsigned long* arg4 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = (unsigned char*)arg0_tmp.c_str();
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned char**
		ok = false;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned long*
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_convertRGB888ToFormat : Error processing arguments");
        int ret = (int)cobj->convertRGB888ToFormat(arg0, arg1, arg2, arg3, arg4);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_convertRGB888ToFormat : wrong number of arguments: %d, was expecting %d", argc, 5);
    return false;
}
bool js_crossapp_CAImage_isPvr(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImage_isPvr : Invalid Native Object");
    if (argc == 2) {
        const unsigned char* arg0 = nullptr;
        unsigned long arg1 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = (unsigned char*)arg0_tmp.c_str();
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_isPvr : Error processing arguments");
        bool ret = cobj->isPvr(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImage_isPvr : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAImage_BLACK_IMAGE(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAImage* ret = CrossApp::CAImage::BLACK_IMAGE();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImage_BLACK_IMAGE : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImage_purgeCAImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAImage::purgeCAImage();
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImage_purgeCAImage : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImage_WHITE_IMAGE(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAImage* ret = CrossApp::CAImage::WHITE_IMAGE();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImage_WHITE_IMAGE : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImage_scaleToNewImageWithImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 3) {
            CrossApp::CAImage* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            double arg2 = 0;
            ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
            if (!ok) { ok = true; break; }
            CrossApp::CAImage* ret = CrossApp::CAImage::scaleToNewImageWithImage(arg0, arg1, arg2);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 2) {
            CrossApp::CAImage* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::DSize arg1;
            ok &= jsval_to_dsize(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAImage* ret = CrossApp::CAImage::scaleToNewImageWithImage(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_crossapp_CAImage_scaleToNewImageWithImage : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImage_getStringWidth(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 3) {
        const char* arg0 = nullptr;
        double arg1 = 0;
        std::string arg2;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= jsval_to_std_string(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_getStringWidth : Error processing arguments");
        int ret = CrossApp::CAImage::getStringWidth(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImage_getStringWidth : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImage_getFontHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        const char* arg0 = nullptr;
        double arg1 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_getFontHeight : Error processing arguments");
        int ret = CrossApp::CAImage::getFontHeight(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImage_getFontHeight : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImage_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_create : Error processing arguments");
        CrossApp::CAImage* ret = CrossApp::CAImage::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImage_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImage_createWithRawData(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 5) {
        CrossApp::CAData* arg0 = nullptr;
        CrossApp::CAImage::PixelFormat arg1;
        uint32_t arg2 = 0;
        uint32_t arg3 = 0;
        std::string arg4;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAData*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        ok &= jsval_to_uint32(cx, args.get(3), &arg3);
        ok &= jsval_to_std_string(cx, args.get(4), &arg4);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_createWithRawData : Error processing arguments");
        CrossApp::CAImage* ret = CrossApp::CAImage::createWithRawData(arg0, arg1, arg2, arg3, arg4);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 6) {
        CrossApp::CAData* arg0 = nullptr;
        CrossApp::CAImage::PixelFormat arg1;
        uint32_t arg2 = 0;
        uint32_t arg3 = 0;
        std::string arg4;
        bool arg5;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAData*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        ok &= jsval_to_uint32(cx, args.get(3), &arg3);
        ok &= jsval_to_std_string(cx, args.get(4), &arg4);
        arg5 = JS::ToBoolean(args.get(5));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_createWithRawData : Error processing arguments");
        CrossApp::CAImage* ret = CrossApp::CAImage::createWithRawData(arg0, arg1, arg2, arg3, arg4, arg5);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImage_createWithRawData : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImage_createWithImageDataNoCache(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAData* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAData*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_createWithImageDataNoCache : Error processing arguments");
        CrossApp::CAImage* ret = CrossApp::CAImage::createWithImageDataNoCache(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImage_createWithImageDataNoCache : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImage_createWithImageData(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::CAData* arg0 = nullptr;
        std::string arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAData*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_createWithImageData : Error processing arguments");
        CrossApp::CAImage* ret = CrossApp::CAImage::createWithImageData(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImage_createWithImageData : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImage_getStringHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 4) {
        const char* arg0 = nullptr;
        double arg1 = 0;
        std::string arg2;
        double arg3 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= jsval_to_std_string(cx, args.get(2), &arg2);
        ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_getStringHeight : Error processing arguments");
        int ret = CrossApp::CAImage::getStringHeight(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 5) {
        const char* arg0 = nullptr;
        double arg1 = 0;
        std::string arg2;
        double arg3 = 0;
        int arg4 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= jsval_to_std_string(cx, args.get(2), &arg2);
        ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
        ok &= jsval_to_int32(cx, args.get(4), (int32_t *)&arg4);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_getStringHeight : Error processing arguments");
        int ret = CrossApp::CAImage::getStringHeight(arg0, arg1, arg2, arg3, arg4);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 6) {
        const char* arg0 = nullptr;
        double arg1 = 0;
        std::string arg2;
        double arg3 = 0;
        int arg4 = 0;
        bool arg5;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= jsval_to_std_string(cx, args.get(2), &arg2);
        ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
        ok &= jsval_to_int32(cx, args.get(4), (int32_t *)&arg4);
        arg5 = JS::ToBoolean(args.get(5));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_getStringHeight : Error processing arguments");
        int ret = CrossApp::CAImage::getStringHeight(arg0, arg1, arg2, arg3, arg4, arg5);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImage_getStringHeight : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImage_CLEAR_IMAGE(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAImage* ret = CrossApp::CAImage::CLEAR_IMAGE();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImage_CLEAR_IMAGE : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImage_generateMipmapsWithImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_generateMipmapsWithImage : Error processing arguments");
        CrossApp::CAImage* ret = CrossApp::CAImage::generateMipmapsWithImage(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImage_generateMipmapsWithImage : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImage_CC_SHADOW_IMAGE(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAImage* ret = CrossApp::CAImage::CC_SHADOW_IMAGE();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImage_CC_SHADOW_IMAGE : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImage_createWithColor4B(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_createWithColor4B : Error processing arguments");
        CrossApp::CAImage* ret = CrossApp::CAImage::createWithColor4B(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImage_createWithColor4B : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImage_createWithRawDataNoCache(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 4) {
        CrossApp::CAData* arg0 = nullptr;
        CrossApp::CAImage::PixelFormat arg1;
        uint32_t arg2 = 0;
        uint32_t arg3 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAData*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        ok &= jsval_to_uint32(cx, args.get(3), &arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_createWithRawDataNoCache : Error processing arguments");
        CrossApp::CAImage* ret = CrossApp::CAImage::createWithRawDataNoCache(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 5) {
        CrossApp::CAData* arg0 = nullptr;
        CrossApp::CAImage::PixelFormat arg1;
        uint32_t arg2 = 0;
        uint32_t arg3 = 0;
        bool arg4;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAData*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        ok &= jsval_to_uint32(cx, args.get(3), &arg3);
        arg4 = JS::ToBoolean(args.get(4));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_createWithRawDataNoCache : Error processing arguments");
        CrossApp::CAImage* ret = CrossApp::CAImage::createWithRawDataNoCache(arg0, arg1, arg2, arg3, arg4);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImage_createWithRawDataNoCache : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImage_reloadAllImages(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAImage::reloadAllImages();
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImage_reloadAllImages : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImage_createWithString(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 4) {
        std::string arg0;
        CrossApp::CAFont arg1;
        CrossApp::DSize arg2;
        CrossApp::CATextAlignment arg3;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_cafont(cx, args.get(1), &arg1);
        ok &= jsval_to_dsize(cx, args.get(2), &arg2);
        ok &= jsval_to_int32(cx, args.get(3), (int32_t *)&arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImage_createWithString : Error processing arguments");
        CrossApp::CAImage* ret = CrossApp::CAImage::createWithString(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImage_createWithString : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImage_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAImage* cobj = new (std::nothrow) CrossApp::CAImage();
    TypeTest<CrossApp::CAImage> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAImage");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAImage_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAImage)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAImage *nobj = static_cast<CrossApp::CAImage *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAImage(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAImage_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAImage_class->name = "CAImage";
    jsb_CrossApp_CAImage_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAImage_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAImage_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAImage_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAImage_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAImage_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAImage_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAImage_class->finalize = js_CrossApp_CAImage_finalize;
    jsb_CrossApp_CAImage_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getShaderProgram", js_crossapp_CAImage_getShaderProgram, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setShaderProgram", js_crossapp_CAImage_setShaderProgram, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("premultipliedImageData", js_crossapp_CAImage_premultipliedImageData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMaxT", js_crossapp_CAImage_getMaxT, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("stringForFormat", js_crossapp_CAImage_stringForFormat, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMaxS", js_crossapp_CAImage_setMaxS, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAntiAliasTexParameters", js_crossapp_CAImage_setAntiAliasTexParameters, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMaxS", js_crossapp_CAImage_getMaxS, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAspectRatio", js_crossapp_CAImage_getAspectRatio, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("hasPremultipliedAlpha", js_crossapp_CAImage_hasPremultipliedAlpha, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPixelsWide", js_crossapp_CAImage_getPixelsWide, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPixelsHigh", js_crossapp_CAImage_getPixelsHigh, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("freeName", js_crossapp_CAImage_freeName, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isTiff", js_crossapp_CAImage_isTiff, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("bitsPerPixelForFormat", js_crossapp_CAImage_bitsPerPixelForFormat, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getName", js_crossapp_CAImage_getName, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("convertDataToFormat", js_crossapp_CAImage_convertDataToFormat, 6, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMaxT", js_crossapp_CAImage_setMaxT, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithImageFile", js_crossapp_CAImage_initWithImageFile, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawInRect", js_crossapp_CAImage_drawInRect, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBitPerPixel", js_crossapp_CAImage_getBitPerPixel, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getContentSize", js_crossapp_CAImage_getContentSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getData", js_crossapp_CAImage_getData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("convertRGBA8888ToFormat", js_crossapp_CAImage_convertRGBA8888ToFormat, 5, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAliasTexParameters", js_crossapp_CAImage_setAliasTexParameters, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isPng", js_crossapp_CAImage_isPng, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithColor4B", js_crossapp_CAImage_initWithColor4B, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("generateMipmap", js_crossapp_CAImage_generateMipmap, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("saveToFile", js_crossapp_CAImage_saveToFile, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("description", js_crossapp_CAImage_description, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("convertI8ToFormat", js_crossapp_CAImage_convertI8ToFormat, 5, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isMonochrome", js_crossapp_CAImage_isMonochrome, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithImageData", js_crossapp_CAImage_initWithImageData, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPixelFormat", js_crossapp_CAImage_getPixelFormat, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("hasAlpha", js_crossapp_CAImage_hasAlpha, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isEtc", js_crossapp_CAImage_isEtc, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isWebp", js_crossapp_CAImage_isWebp, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("copy", js_crossapp_CAImage_copy, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImageFileType", js_crossapp_CAImage_getImageFileType, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawAtPoint", js_crossapp_CAImage_drawAtPoint, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithRawData", js_crossapp_CAImage_initWithRawData, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("repremultipliedImageData", js_crossapp_CAImage_repremultipliedImageData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("convertAI88ToFormat", js_crossapp_CAImage_convertAI88ToFormat, 5, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("detectFormat", js_crossapp_CAImage_detectFormat, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("hasMipmaps", js_crossapp_CAImage_hasMipmaps, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isCompressed", js_crossapp_CAImage_isCompressed, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isJpg", js_crossapp_CAImage_isJpg, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("convertRGB888ToFormat", js_crossapp_CAImage_convertRGB888ToFormat, 5, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isPvr", js_crossapp_CAImage_isPvr, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("BLACK_IMAGE", js_crossapp_CAImage_BLACK_IMAGE, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("purgeCAImage", js_crossapp_CAImage_purgeCAImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("WHITE_IMAGE", js_crossapp_CAImage_WHITE_IMAGE, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("scaleToNewImageWithImage", js_crossapp_CAImage_scaleToNewImageWithImage, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getStringWidth", js_crossapp_CAImage_getStringWidth, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFontHeight", js_crossapp_CAImage_getFontHeight, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("create", js_crossapp_CAImage_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithRawData", js_crossapp_CAImage_createWithRawData, 5, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithImageDataNoCache", js_crossapp_CAImage_createWithImageDataNoCache, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithImageData", js_crossapp_CAImage_createWithImageData, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getStringHeight", js_crossapp_CAImage_getStringHeight, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("CLEAR_IMAGE", js_crossapp_CAImage_CLEAR_IMAGE, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("generateMipmapsWithImage", js_crossapp_CAImage_generateMipmapsWithImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("CC_SHADOW_IMAGE", js_crossapp_CAImage_CC_SHADOW_IMAGE, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithColor4B", js_crossapp_CAImage_createWithColor4B, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithRawDataNoCache", js_crossapp_CAImage_createWithRawDataNoCache, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reloadAllImages", js_crossapp_CAImage_reloadAllImages, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithString", js_crossapp_CAImage_createWithString, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAImage_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAImage_class,
        js_crossapp_CAImage_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAImage", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAImage> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAImage_class;
        p->proto = jsb_CrossApp_CAImage_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CATouch_class;
JSObject *jsb_CrossApp_CATouch_prototype;

bool js_crossapp_CATouch_getLocation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouch* cobj = (CrossApp::CATouch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATouch_getLocation : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DPoint ret = cobj->getLocation();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATouch_getLocation : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATouch_getDelta(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouch* cobj = (CrossApp::CATouch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATouch_getDelta : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DPoint ret = cobj->getDelta();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATouch_getDelta : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATouch_getStartLocation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouch* cobj = (CrossApp::CATouch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATouch_getStartLocation : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DPoint ret = cobj->getStartLocation();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATouch_getStartLocation : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATouch_getID(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouch* cobj = (CrossApp::CATouch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATouch_getID : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getID();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATouch_getID : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATouch_isDelta(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouch* cobj = (CrossApp::CATouch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATouch_isDelta : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isDelta();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATouch_isDelta : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATouch_setTouchInfo(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouch* cobj = (CrossApp::CATouch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATouch_setTouchInfo : Invalid Native Object");
    if (argc == 3) {
        int arg0 = 0;
        double arg1 = 0;
        double arg2 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATouch_setTouchInfo : Error processing arguments");
        cobj->setTouchInfo(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATouch_setTouchInfo : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_crossapp_CATouch_getDeltaFromAToZ(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouch* cobj = (CrossApp::CATouch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATouch_getDeltaFromAToZ : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DPoint ret = cobj->getDeltaFromAToZ();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATouch_getDeltaFromAToZ : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATouch_getPreviousLocation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouch* cobj = (CrossApp::CATouch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATouch_getPreviousLocation : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DPoint ret = cobj->getPreviousLocation();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATouch_getPreviousLocation : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATouch_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CATouch* cobj = new (std::nothrow) CrossApp::CATouch();
    TypeTest<CrossApp::CATouch> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CATouch");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CATouch_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CATouch)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATouch *nobj = static_cast<CrossApp::CATouch *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CATouch(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATouch_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATouch_class->name = "CATouch";
    jsb_CrossApp_CATouch_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATouch_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATouch_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATouch_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATouch_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATouch_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATouch_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATouch_class->finalize = js_CrossApp_CATouch_finalize;
    jsb_CrossApp_CATouch_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getLocation", js_crossapp_CATouch_getLocation, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDelta", js_crossapp_CATouch_getDelta, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getStartLocation", js_crossapp_CATouch_getStartLocation, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getID", js_crossapp_CATouch_getID, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isDelta", js_crossapp_CATouch_isDelta, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTouchInfo", js_crossapp_CATouch_setTouchInfo, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDeltaFromAToZ", js_crossapp_CATouch_getDeltaFromAToZ, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPreviousLocation", js_crossapp_CATouch_getPreviousLocation, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CATouch_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CATouch_class,
        js_crossapp_CATouch_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CATouch", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATouch> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATouch_class;
        p->proto = jsb_CrossApp_CATouch_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAEvent_class;
JSObject *jsb_CrossApp_CAEvent_prototype;

bool js_crossapp_CAEvent_getEventType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAEvent* cobj = (CrossApp::CAEvent *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAEvent_getEventType : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getEventType();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAEvent_getEventType : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAEvent_setEventType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAEvent* cobj = (CrossApp::CAEvent *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAEvent_setEventType : Invalid Native Object");
    if (argc == 1) {
        CrossApp::EventType arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAEvent_setEventType : Error processing arguments");
        cobj->setEventType(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAEvent_setEventType : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAEvent_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAEvent* cobj = new (std::nothrow) CrossApp::CAEvent();
    TypeTest<CrossApp::CAEvent> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAEvent");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAEvent_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAEvent)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAEvent *nobj = static_cast<CrossApp::CAEvent *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAEvent(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAEvent_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAEvent_class->name = "CAEvent";
    jsb_CrossApp_CAEvent_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAEvent_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAEvent_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAEvent_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAEvent_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAEvent_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAEvent_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAEvent_class->finalize = js_CrossApp_CAEvent_finalize;
    jsb_CrossApp_CAEvent_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getEventType", js_crossapp_CAEvent_getEventType, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setEventType", js_crossapp_CAEvent_setEventType, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAEvent_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAEvent_class,
        js_crossapp_CAEvent_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAEvent", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAEvent> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAEvent_class;
        p->proto = jsb_CrossApp_CAEvent_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAResponder_class;
JSObject *jsb_CrossApp_CAResponder_prototype;

bool js_crossapp_CAResponder_setReachBoundaryHandOverToSuperview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_setReachBoundaryHandOverToSuperview : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAResponder_setReachBoundaryHandOverToSuperview : Error processing arguments");
        cobj->setReachBoundaryHandOverToSuperview(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_setReachBoundaryHandOverToSuperview : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAResponder_onTouchEnded(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_onTouchEnded : Invalid Native Object");
    if (argc == 1) {
        std::function<void (CrossApp::CATouch *, CrossApp::CAEvent *)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::CATouch* larg0, CrossApp::CAEvent* larg1) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            do {
		            if (larg0) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATouch>(cx, (CrossApp::CATouch*)larg0);
		                largv[0] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[0] = JSVAL_NULL;
		            }
		        } while (0);
		            do {
		            if (larg1) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAEvent>(cx, (CrossApp::CAEvent*)larg1);
		                largv[1] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[1] = JSVAL_NULL;
		            }
		        } while (0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAResponder_onTouchEnded : Error processing arguments");
        cobj->onTouchEnded(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_onTouchEnded : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAResponder_setMouseScrollWheelEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_setMouseScrollWheelEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAResponder_setMouseScrollWheelEnabled : Error processing arguments");
        cobj->setMouseScrollWheelEnabled(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_setMouseScrollWheelEnabled : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAResponder_onMouseScrollWheel(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_onMouseScrollWheel : Invalid Native Object");
    if (argc == 1) {
        std::function<void (CrossApp::CATouch *, CrossApp::CAEvent *)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::CATouch* larg0, CrossApp::CAEvent* larg1) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            do {
		            if (larg0) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATouch>(cx, (CrossApp::CATouch*)larg0);
		                largv[0] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[0] = JSVAL_NULL;
		            }
		        } while (0);
		            do {
		            if (larg1) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAEvent>(cx, (CrossApp::CAEvent*)larg1);
		                largv[1] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[1] = JSVAL_NULL;
		            }
		        } while (0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAResponder_onMouseScrollWheel : Error processing arguments");
        cobj->onMouseScrollWheel(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_onMouseScrollWheel : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAResponder_setMouseMovedEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_setMouseMovedEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAResponder_setMouseMovedEnabled : Error processing arguments");
        cobj->setMouseMovedEnabled(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_setMouseMovedEnabled : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAResponder_onMouseMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_onMouseMoved : Invalid Native Object");
    if (argc == 1) {
        std::function<void (CrossApp::CATouch *, CrossApp::CAEvent *)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::CATouch* larg0, CrossApp::CAEvent* larg1) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            do {
		            if (larg0) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATouch>(cx, (CrossApp::CATouch*)larg0);
		                largv[0] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[0] = JSVAL_NULL;
		            }
		        } while (0);
		            do {
		            if (larg1) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAEvent>(cx, (CrossApp::CAEvent*)larg1);
		                largv[1] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[1] = JSVAL_NULL;
		            }
		        } while (0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAResponder_onMouseMoved : Error processing arguments");
        cobj->onMouseMoved(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_onMouseMoved : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAResponder_isScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_isScrollEnabled : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isScrollEnabled();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_isScrollEnabled : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAResponder_isHaveNextResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_isHaveNextResponder : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isHaveNextResponder();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_isHaveNextResponder : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAResponder_setHorizontalScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_setHorizontalScrollEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAResponder_setHorizontalScrollEnabled : Error processing arguments");
        cobj->setHorizontalScrollEnabled(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_setHorizontalScrollEnabled : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAResponder_isVerticalScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_isVerticalScrollEnabled : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isVerticalScrollEnabled();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_isVerticalScrollEnabled : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAResponder_setPriorityScroll(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_setPriorityScroll : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAResponder_setPriorityScroll : Error processing arguments");
        cobj->setPriorityScroll(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_setPriorityScroll : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAResponder_isFirstResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_isFirstResponder : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isFirstResponder();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_isFirstResponder : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAResponder_onMouseMovedOutSide(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_onMouseMovedOutSide : Invalid Native Object");
    if (argc == 1) {
        std::function<void (CrossApp::CATouch *, CrossApp::CAEvent *)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::CATouch* larg0, CrossApp::CAEvent* larg1) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            do {
		            if (larg0) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATouch>(cx, (CrossApp::CATouch*)larg0);
		                largv[0] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[0] = JSVAL_NULL;
		            }
		        } while (0);
		            do {
		            if (larg1) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAEvent>(cx, (CrossApp::CAEvent*)larg1);
		                largv[1] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[1] = JSVAL_NULL;
		            }
		        } while (0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAResponder_onMouseMovedOutSide : Error processing arguments");
        cobj->onMouseMovedOutSide(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_onMouseMovedOutSide : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAResponder_isTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_isTouchEnabled : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isTouchEnabled();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_isTouchEnabled : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAResponder_setTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_setTouchEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAResponder_setTouchEnabled : Error processing arguments");
        cobj->setTouchEnabled(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_setTouchEnabled : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAResponder_setScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_setScrollEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAResponder_setScrollEnabled : Error processing arguments");
        cobj->setScrollEnabled(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_setScrollEnabled : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAResponder_onTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_onTouchMoved : Invalid Native Object");
    if (argc == 1) {
        std::function<void (CrossApp::CATouch *, CrossApp::CAEvent *)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::CATouch* larg0, CrossApp::CAEvent* larg1) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            do {
		            if (larg0) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATouch>(cx, (CrossApp::CATouch*)larg0);
		                largv[0] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[0] = JSVAL_NULL;
		            }
		        } while (0);
		            do {
		            if (larg1) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAEvent>(cx, (CrossApp::CAEvent*)larg1);
		                largv[1] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[1] = JSVAL_NULL;
		            }
		        } while (0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAResponder_onTouchMoved : Error processing arguments");
        cobj->onTouchMoved(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_onTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAResponder_getTouches(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_getTouches : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAVector<CrossApp::CATouch *> ret = cobj->getTouches();
        jsval jsret = JSVAL_NULL;
        jsret = cavector_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_getTouches : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAResponder_isPriorityScroll(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_isPriorityScroll : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isPriorityScroll();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_isPriorityScroll : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAResponder_onTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_onTouchCancelled : Invalid Native Object");
    if (argc == 1) {
        std::function<void (CrossApp::CATouch *, CrossApp::CAEvent *)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::CATouch* larg0, CrossApp::CAEvent* larg1) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            do {
		            if (larg0) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATouch>(cx, (CrossApp::CATouch*)larg0);
		                largv[0] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[0] = JSVAL_NULL;
		            }
		        } while (0);
		            do {
		            if (larg1) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAEvent>(cx, (CrossApp::CAEvent*)larg1);
		                largv[1] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[1] = JSVAL_NULL;
		            }
		        } while (0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAResponder_onTouchCancelled : Error processing arguments");
        cobj->onTouchCancelled(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_onTouchCancelled : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAResponder_onTouchBegan(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_onTouchBegan : Invalid Native Object");
    if (argc == 1) {
        std::function<bool (CrossApp::CATouch *, CrossApp::CAEvent *)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::CATouch* larg0, CrossApp::CAEvent* larg1) -> bool {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            do {
		            if (larg0) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATouch>(cx, (CrossApp::CATouch*)larg0);
		                largv[0] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[0] = JSVAL_NULL;
		            }
		        } while (0);
		            do {
		            if (larg1) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAEvent>(cx, (CrossApp::CAEvent*)larg1);
		                largv[1] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[1] = JSVAL_NULL;
		            }
		        } while (0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            bool ret;
		            ret = JS::ToBoolean(rval);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAResponder_onTouchBegan : Error processing arguments");
        cobj->onTouchBegan(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_onTouchBegan : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAResponder_isHorizontalScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_isHorizontalScrollEnabled : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isHorizontalScrollEnabled();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_isHorizontalScrollEnabled : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAResponder_setVerticalScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_setVerticalScrollEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAResponder_setVerticalScrollEnabled : Error processing arguments");
        cobj->setVerticalScrollEnabled(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_setVerticalScrollEnabled : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAResponder_setHaveNextResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_setHaveNextResponder : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAResponder_setHaveNextResponder : Error processing arguments");
        cobj->setHaveNextResponder(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_setHaveNextResponder : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAResponder_nextResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_nextResponder : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAResponder* ret = cobj->nextResponder();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAResponder>(cx, (CrossApp::CAResponder*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_nextResponder : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAResponder_isReachBoundaryRight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_isReachBoundaryRight : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryRight();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_isReachBoundaryRight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAResponder_isReachBoundaryDown(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_isReachBoundaryDown : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryDown();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_isReachBoundaryDown : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAResponder_setMultipleTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_setMultipleTouchEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAResponder_setMultipleTouchEnabled : Error processing arguments");
        cobj->setMultipleTouchEnabled(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_setMultipleTouchEnabled : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAResponder_isTouchEventScrollHandOverToSuperview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_isTouchEventScrollHandOverToSuperview : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isTouchEventScrollHandOverToSuperview();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_isTouchEventScrollHandOverToSuperview : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAResponder_isReachBoundaryHandOverToSuperview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_isReachBoundaryHandOverToSuperview : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryHandOverToSuperview();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_isReachBoundaryHandOverToSuperview : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAResponder_isReachBoundaryUp(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_isReachBoundaryUp : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryUp();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_isReachBoundaryUp : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAResponder_isReachBoundaryLeft(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_isReachBoundaryLeft : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryLeft();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_isReachBoundaryLeft : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAResponder_getScrollRunning(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_getScrollRunning : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->getScrollRunning();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_getScrollRunning : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAResponder_isMouseScrollWheelEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_isMouseScrollWheelEnabled : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isMouseScrollWheelEnabled();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_isMouseScrollWheelEnabled : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAResponder_resignFirstResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_resignFirstResponder : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->resignFirstResponder();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_resignFirstResponder : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAResponder_setTouchEventScrollHandOverToSuperview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_setTouchEventScrollHandOverToSuperview : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAResponder_setTouchEventScrollHandOverToSuperview : Error processing arguments");
        cobj->setTouchEventScrollHandOverToSuperview(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_setTouchEventScrollHandOverToSuperview : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAResponder_isMouseMovedEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_isMouseMovedEnabled : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isMouseMovedEnabled();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_isMouseMovedEnabled : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAResponder_becomeFirstResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_becomeFirstResponder : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->becomeFirstResponder();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_becomeFirstResponder : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAResponder_isMultipleTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_isMultipleTouchEnabled : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isMultipleTouchEnabled();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_isMultipleTouchEnabled : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAResponder_getZLevel(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAResponder_getZLevel : Invalid Native Object");
    if (argc == 0) {
        unsigned long ret = cobj->getZLevel();
        jsval jsret = JSVAL_NULL;
        jsret = ulong_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAResponder_getZLevel : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAResponder_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAResponder* cobj = new (std::nothrow) CrossApp::CAResponder();
    TypeTest<CrossApp::CAResponder> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAResponder");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAResponder_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAResponder)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAResponder *nobj = static_cast<CrossApp::CAResponder *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAResponder(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAResponder_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAResponder_class->name = "CAResponder";
    jsb_CrossApp_CAResponder_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAResponder_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAResponder_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAResponder_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAResponder_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAResponder_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAResponder_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAResponder_class->finalize = js_CrossApp_CAResponder_finalize;
    jsb_CrossApp_CAResponder_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setReachBoundaryHandOverToSuperview", js_crossapp_CAResponder_setReachBoundaryHandOverToSuperview, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onTouchEnded", js_crossapp_CAResponder_onTouchEnded, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMouseScrollWheelEnabled", js_crossapp_CAResponder_setMouseScrollWheelEnabled, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onMouseScrollWheel", js_crossapp_CAResponder_onMouseScrollWheel, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMouseMovedEnabled", js_crossapp_CAResponder_setMouseMovedEnabled, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onMouseMoved", js_crossapp_CAResponder_onMouseMoved, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isScrollEnabled", js_crossapp_CAResponder_isScrollEnabled, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isHaveNextResponder", js_crossapp_CAResponder_isHaveNextResponder, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setHorizontalScrollEnabled", js_crossapp_CAResponder_setHorizontalScrollEnabled, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isVerticalScrollEnabled", js_crossapp_CAResponder_isVerticalScrollEnabled, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPriorityScroll", js_crossapp_CAResponder_setPriorityScroll, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isFirstResponder", js_crossapp_CAResponder_isFirstResponder, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onMouseMovedOutSide", js_crossapp_CAResponder_onMouseMovedOutSide, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isTouchEnabled", js_crossapp_CAResponder_isTouchEnabled, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTouchEnabled", js_crossapp_CAResponder_setTouchEnabled, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setScrollEnabled", js_crossapp_CAResponder_setScrollEnabled, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onTouchMoved", js_crossapp_CAResponder_onTouchMoved, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTouches", js_crossapp_CAResponder_getTouches, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isPriorityScroll", js_crossapp_CAResponder_isPriorityScroll, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onTouchCancelled", js_crossapp_CAResponder_onTouchCancelled, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onTouchBegan", js_crossapp_CAResponder_onTouchBegan, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isHorizontalScrollEnabled", js_crossapp_CAResponder_isHorizontalScrollEnabled, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setVerticalScrollEnabled", js_crossapp_CAResponder_setVerticalScrollEnabled, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setHaveNextResponder", js_crossapp_CAResponder_setHaveNextResponder, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("nextResponder", js_crossapp_CAResponder_nextResponder, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryRight", js_crossapp_CAResponder_isReachBoundaryRight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryDown", js_crossapp_CAResponder_isReachBoundaryDown, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMultipleTouchEnabled", js_crossapp_CAResponder_setMultipleTouchEnabled, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isTouchEventScrollHandOverToSuperview", js_crossapp_CAResponder_isTouchEventScrollHandOverToSuperview, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryHandOverToSuperview", js_crossapp_CAResponder_isReachBoundaryHandOverToSuperview, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryUp", js_crossapp_CAResponder_isReachBoundaryUp, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryLeft", js_crossapp_CAResponder_isReachBoundaryLeft, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getScrollRunning", js_crossapp_CAResponder_getScrollRunning, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isMouseScrollWheelEnabled", js_crossapp_CAResponder_isMouseScrollWheelEnabled, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("resignFirstResponder", js_crossapp_CAResponder_resignFirstResponder, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTouchEventScrollHandOverToSuperview", js_crossapp_CAResponder_setTouchEventScrollHandOverToSuperview, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isMouseMovedEnabled", js_crossapp_CAResponder_isMouseMovedEnabled, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("becomeFirstResponder", js_crossapp_CAResponder_becomeFirstResponder, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isMultipleTouchEnabled", js_crossapp_CAResponder_isMultipleTouchEnabled, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getZLevel", js_crossapp_CAResponder_getZLevel, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAResponder_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAResponder_class,
        js_crossapp_CAResponder_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAResponder", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAResponder> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAResponder_class;
        p->proto = jsb_CrossApp_CAResponder_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAImageCache_class;
JSObject *jsb_CrossApp_CAImageCache_prototype;

bool js_crossapp_CAImageCache_addImageFullPathAsync(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageCache* cobj = (CrossApp::CAImageCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageCache_addImageFullPathAsync : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        std::function<void (CrossApp::CAImage *)> arg1;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        do {
		    if(JS_TypeOfValue(cx, args.get(1)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(1)));
		        auto lambda = [=, &ok](CrossApp::CAImage* larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            do {
		            if (larg0) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)larg0);
		                largv[0] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[0] = JSVAL_NULL;
		            }
		        } while (0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg1 = lambda;
		    }
		    else
		    {
		        arg1 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImageCache_addImageFullPathAsync : Error processing arguments");
        cobj->addImageFullPathAsync(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageCache_addImageFullPathAsync : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAImageCache_description(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageCache* cobj = (CrossApp::CAImageCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageCache_description : Invalid Native Object");
    if (argc == 0) {
        const char* ret = cobj->description();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageCache_description : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImageCache_getImageFilePath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageCache* cobj = (CrossApp::CAImageCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageCache_getImageFilePath : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImageCache_getImageFilePath : Error processing arguments");
        const std::string& ret = cobj->getImageFilePath(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageCache_getImageFilePath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAImageCache_addImageAsync(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageCache* cobj = (CrossApp::CAImageCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageCache_addImageAsync : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        std::function<void (CrossApp::CAImage *)> arg1;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        do {
		    if(JS_TypeOfValue(cx, args.get(1)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(1)));
		        auto lambda = [=, &ok](CrossApp::CAImage* larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            do {
		            if (larg0) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)larg0);
		                largv[0] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[0] = JSVAL_NULL;
		            }
		        } while (0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg1 = lambda;
		    }
		    else
		    {
		        arg1 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImageCache_addImageAsync : Error processing arguments");
        cobj->addImageAsync(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageCache_addImageAsync : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAImageCache_removeAllImages(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageCache* cobj = (CrossApp::CAImageCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageCache_removeAllImages : Invalid Native Object");
    if (argc == 0) {
        cobj->removeAllImages();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageCache_removeAllImages : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImageCache_removeImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageCache* cobj = (CrossApp::CAImageCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageCache_removeImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImageCache_removeImage : Error processing arguments");
        cobj->removeImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageCache_removeImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAImageCache_removeUnusedImages(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageCache* cobj = (CrossApp::CAImageCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageCache_removeUnusedImages : Invalid Native Object");
    if (argc == 0) {
        cobj->removeUnusedImages();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageCache_removeUnusedImages : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImageCache_addImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageCache* cobj = (CrossApp::CAImageCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageCache_addImage : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImageCache_addImage : Error processing arguments");
        CrossApp::CAImage* ret = cobj->addImage(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageCache_addImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAImageCache_setImageForKey(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageCache* cobj = (CrossApp::CAImageCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageCache_setImageForKey : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAImage* arg0 = nullptr;
        std::string arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImageCache_setImageForKey : Error processing arguments");
        cobj->setImageForKey(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageCache_setImageForKey : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAImageCache_removeImageForKey(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageCache* cobj = (CrossApp::CAImageCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageCache_removeImageForKey : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImageCache_removeImageForKey : Error processing arguments");
        cobj->removeImageForKey(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageCache_removeImageForKey : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAImageCache_reloadImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageCache* cobj = (CrossApp::CAImageCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageCache_reloadImage : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImageCache_reloadImage : Error processing arguments");
        bool ret = cobj->reloadImage(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageCache_reloadImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAImageCache_imageForKey(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageCache* cobj = (CrossApp::CAImageCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageCache_imageForKey : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImageCache_imageForKey : Error processing arguments");
        CrossApp::CAImage* ret = cobj->imageForKey(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageCache_imageForKey : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAImageCache_waitForQuit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageCache* cobj = (CrossApp::CAImageCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageCache_waitForQuit : Invalid Native Object");
    if (argc == 0) {
        cobj->waitForQuit();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageCache_waitForQuit : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImageCache_dumpCachedImageInfo(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageCache* cobj = (CrossApp::CAImageCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageCache_dumpCachedImageInfo : Invalid Native Object");
    if (argc == 0) {
        cobj->dumpCachedImageInfo();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageCache_dumpCachedImageInfo : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImageCache_reloadAllImages(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAImageCache::reloadAllImages();
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImageCache_reloadAllImages : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImageCache_getInstance(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAImageCache* ret = CrossApp::CAImageCache::getInstance();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImageCache>(cx, (CrossApp::CAImageCache*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImageCache_getInstance : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImageCache_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAImageCache* cobj = new (std::nothrow) CrossApp::CAImageCache();
    TypeTest<CrossApp::CAImageCache> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAImageCache");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAImageCache_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAImageCache)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAImageCache *nobj = static_cast<CrossApp::CAImageCache *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAImageCache(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAImageCache_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAImageCache_class->name = "CAImageCache";
    jsb_CrossApp_CAImageCache_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAImageCache_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAImageCache_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAImageCache_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAImageCache_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAImageCache_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAImageCache_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAImageCache_class->finalize = js_CrossApp_CAImageCache_finalize;
    jsb_CrossApp_CAImageCache_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("addImageFullPathAsync", js_crossapp_CAImageCache_addImageFullPathAsync, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("description", js_crossapp_CAImageCache_description, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImageFilePath", js_crossapp_CAImageCache_getImageFilePath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addImageAsync", js_crossapp_CAImageCache_addImageAsync, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeAllImages", js_crossapp_CAImageCache_removeAllImages, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeImage", js_crossapp_CAImageCache_removeImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeUnusedImages", js_crossapp_CAImageCache_removeUnusedImages, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addImage", js_crossapp_CAImageCache_addImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageForKey", js_crossapp_CAImageCache_setImageForKey, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeImageForKey", js_crossapp_CAImageCache_removeImageForKey, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reloadImage", js_crossapp_CAImageCache_reloadImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("imageForKey", js_crossapp_CAImageCache_imageForKey, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("waitForQuit", js_crossapp_CAImageCache_waitForQuit, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("dumpCachedImageInfo", js_crossapp_CAImageCache_dumpCachedImageInfo, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("reloadAllImages", js_crossapp_CAImageCache_reloadAllImages, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getInstance", js_crossapp_CAImageCache_getInstance, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAImageCache_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAImageCache_class,
        js_crossapp_CAImageCache_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAImageCache", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAImageCache> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAImageCache_class;
        p->proto = jsb_CrossApp_CAImageCache_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAView_class;
JSObject *jsb_CrossApp_CAView_prototype;

bool js_crossapp_CAView_removeFromSuperview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_removeFromSuperview : Invalid Native Object");
    if (argc == 0) {
        cobj->removeFromSuperview();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_removeFromSuperview : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_enabledTopShadow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_enabledTopShadow : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_enabledTopShadow : Error processing arguments");
        cobj->enabledTopShadow(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_enabledTopShadow : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_setLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setLayout : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setLayout : Error processing arguments");
        cobj->setLayout(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setLayout : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_setOpacityModifyRGB(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setOpacityModifyRGB : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setOpacityModifyRGB : Error processing arguments");
        cobj->setOpacityModifyRGB(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setOpacityModifyRGB : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_getSuperview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getSuperview : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getSuperview();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getSuperview : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_getSubviewByTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getSubviewByTag : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_getSubviewByTag : Error processing arguments");
        CrossApp::CAView* ret = cobj->getSubviewByTag(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getSubviewByTag : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_setOnExitCallback(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setOnExitCallback : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setOnExitCallback : Error processing arguments");
        cobj->setOnExitCallback(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setOnExitCallback : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_sortAllSubviews(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_sortAllSubviews : Invalid Native Object");
    if (argc == 0) {
        cobj->sortAllSubviews();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_sortAllSubviews : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_copy(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_copy : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->copy();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_copy : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_isOpacityModifyRGB(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_isOpacityModifyRGB : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isOpacityModifyRGB();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_isOpacityModifyRGB : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_updateDisplayedAlpha(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_updateDisplayedAlpha : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_updateDisplayedAlpha : Error processing arguments");
        cobj->updateDisplayedAlpha(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_updateDisplayedAlpha : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_isFlipX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_isFlipX : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isFlipX();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_isFlipX : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_isFlipY(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_isFlipY : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isFlipY();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_isFlipY : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_setRotation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setRotation : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setRotation : Error processing arguments");
        cobj->setRotation(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setRotation : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_getWorldToViewAffineTransform(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getWorldToViewAffineTransform : Invalid Native Object");
    if (argc == 0) {
        CrossApp::AffineTransform ret = cobj->getWorldToViewAffineTransform();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR AffineTransform;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getWorldToViewAffineTransform : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_setZOrder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setZOrder : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setZOrder : Error processing arguments");
        cobj->setZOrder(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setZOrder : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_setScaleY(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setScaleY : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setScaleY : Error processing arguments");
        cobj->setScaleY(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setScaleY : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_setScaleX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setScaleX : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setScaleX : Error processing arguments");
        cobj->setScaleX(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setScaleX : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_removeSubviewByTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_removeSubviewByTag : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_removeSubviewByTag : Error processing arguments");
        cobj->removeSubviewByTag(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_removeSubviewByTag : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_visitEve(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_visitEve : Invalid Native Object");
    if (argc == 0) {
        cobj->visitEve();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_visitEve : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_setCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setCenter : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setCenter : Error processing arguments");
        cobj->setCenter(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setCenter : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_getSuperviewToViewAffineTransform(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getSuperviewToViewAffineTransform : Invalid Native Object");
    if (argc == 0) {
        CrossApp::AffineTransform ret = cobj->getSuperviewToViewAffineTransform();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR AffineTransform;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getSuperviewToViewAffineTransform : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_setonEnterTransitionDidFinishCallback(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setonEnterTransitionDidFinishCallback : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setonEnterTransitionDidFinishCallback : Error processing arguments");
        cobj->setonEnterTransitionDidFinishCallback(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setonEnterTransitionDidFinishCallback : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_convertRectToWorldSpace(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_convertRectToWorldSpace : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_convertRectToWorldSpace : Error processing arguments");
        CrossApp::DRect ret = cobj->convertRectToWorldSpace(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = drect_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_convertRectToWorldSpace : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_getTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getTag : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getTag();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getTag : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_getonEnterTransitionDidFinishCallback(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getonEnterTransitionDidFinishCallback : Invalid Native Object");
    if (argc == 0) {
        const std::function<void ()>& ret = cobj->getonEnterTransitionDidFinishCallback();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR std::function;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getonEnterTransitionDidFinishCallback : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_getViewToWorldTransform(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getViewToWorldTransform : Invalid Native Object");
    if (argc == 0) {
        CrossApp::Mat4 ret = cobj->getViewToWorldTransform();
        jsval jsret = JSVAL_NULL;
        jsret = matrix_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getViewToWorldTransform : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_onExit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_onExit : Invalid Native Object");
    if (argc == 0) {
        cobj->onExit();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_onExit : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_setSuperview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setSuperview : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setSuperview : Error processing arguments");
        cobj->setSuperview(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setSuperview : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_setRotationX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setRotationX : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setRotationX : Error processing arguments");
        cobj->setRotationX(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setRotationX : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_convertToWorldSpace(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_convertToWorldSpace : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DPoint arg0;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_convertToWorldSpace : Error processing arguments");
        CrossApp::DPoint ret = cobj->convertToWorldSpace(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_convertToWorldSpace : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_getAlpha(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getAlpha : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getAlpha();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getAlpha : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_setSkewX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setSkewX : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setSkewX : Error processing arguments");
        cobj->setSkewX(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setSkewX : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_setSkewY(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setSkewY : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setSkewY : Error processing arguments");
        cobj->setSkewY(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setSkewY : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_setOnEnterCallback(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setOnEnterCallback : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setOnEnterCallback : Error processing arguments");
        cobj->setOnEnterCallback(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setOnEnterCallback : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_getLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getLayout : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DLayout& ret = cobj->getLayout();
        jsval jsret = JSVAL_NULL;
        jsret = dlayout_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getLayout : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_setonExitTransitionDidStartCallback(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setonExitTransitionDidStartCallback : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setonExitTransitionDidStartCallback : Error processing arguments");
        cobj->setonExitTransitionDidStartCallback(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setonExitTransitionDidStartCallback : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_removeAllSubviews(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_removeAllSubviews : Invalid Native Object");
    if (argc == 0) {
        cobj->removeAllSubviews();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_removeAllSubviews : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_reViewlayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_reViewlayout : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_reViewlayout : Error processing arguments");
        cobj->reViewlayout(arg0);
        args.rval().setUndefined();
        return true;
    }
    if (argc == 2) {
        CrossApp::DSize arg0;
        bool arg1;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_reViewlayout : Error processing arguments");
        cobj->reViewlayout(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_reViewlayout : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_getSubviewByTextTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getSubviewByTextTag : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_getSubviewByTextTag : Error processing arguments");
        CrossApp::CAView* ret = cobj->getSubviewByTextTag(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getSubviewByTextTag : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_removeSubviewByTextTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_removeSubviewByTextTag : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_removeSubviewByTextTag : Error processing arguments");
        cobj->removeSubviewByTextTag(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_removeSubviewByTextTag : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_convertRectToNodeSpace(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_convertRectToNodeSpace : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_convertRectToNodeSpace : Error processing arguments");
        CrossApp::DRect ret = cobj->convertRectToNodeSpace(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = drect_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_convertRectToNodeSpace : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_getonExitTransitionDidStartCallback(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getonExitTransitionDidStartCallback : Invalid Native Object");
    if (argc == 0) {
        const std::function<void ()>& ret = cobj->getonExitTransitionDidStartCallback();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR std::function;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getonExitTransitionDidStartCallback : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_enabledLeftShadow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_enabledLeftShadow : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_enabledLeftShadow : Error processing arguments");
        cobj->enabledLeftShadow(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_enabledLeftShadow : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_getFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getFrame : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DRect& ret = cobj->getFrame();
        jsval jsret = JSVAL_NULL;
        jsret = drect_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getFrame : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_convertToNodeSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_convertToNodeSize : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_convertToNodeSize : Error processing arguments");
        CrossApp::DSize ret = cobj->convertToNodeSize(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_convertToNodeSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_getImageRect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getImageRect : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DRect& ret = cobj->getImageRect();
        jsval jsret = JSVAL_NULL;
        jsret = drect_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getImageRect : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_initWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_initWithLayout : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_initWithLayout : Error processing arguments");
        bool ret = cobj->initWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_initWithLayout : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_getOnEnterCallback(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getOnEnterCallback : Invalid Native Object");
    if (argc == 0) {
        const std::function<void ()>& ret = cobj->getOnEnterCallback();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR std::function;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getOnEnterCallback : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_enabledBottomShadow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_enabledBottomShadow : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_enabledBottomShadow : Error processing arguments");
        cobj->enabledBottomShadow(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_enabledBottomShadow : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_getViewToWorldAffineTransform(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getViewToWorldAffineTransform : Invalid Native Object");
    if (argc == 0) {
        CrossApp::AffineTransform ret = cobj->getViewToWorldAffineTransform();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR AffineTransform;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getViewToWorldAffineTransform : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_getPointZ(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getPointZ : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getPointZ();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getPointZ : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_getLayoutType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getLayoutType : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getLayoutType();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getLayoutType : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_update(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_update : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_update : Error processing arguments");
        cobj->update(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_update : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_getFrameOrigin(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getFrameOrigin : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DPoint& ret = cobj->getFrameOrigin();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getFrameOrigin : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_setCameraMask(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setCameraMask : Invalid Native Object");
    if (argc == 1) {
        unsigned short arg0 = 0;
        ok &= jsval_to_ushort(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setCameraMask : Error processing arguments");
        cobj->setCameraMask(arg0);
        args.rval().setUndefined();
        return true;
    }
    if (argc == 2) {
        unsigned short arg0 = 0;
        bool arg1;
        ok &= jsval_to_ushort(cx, args.get(0), &arg0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setCameraMask : Error processing arguments");
        cobj->setCameraMask(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setCameraMask : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_isImageRectRotated(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_isImageRectRotated : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isImageRectRotated();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_isImageRectRotated : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_setGLProgramState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setGLProgramState : Invalid Native Object");
    if (argc == 1) {
        CrossApp::GLProgramState* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::GLProgramState*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setGLProgramState : Error processing arguments");
        cobj->setGLProgramState(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setGLProgramState : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_setColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setColor : Error processing arguments");
        cobj->setColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_getDisplayedColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getDisplayedColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getDisplayedColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getDisplayedColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_removeSubview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_removeSubview : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_removeSubview : Error processing arguments");
        cobj->removeSubview(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_removeSubview : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_getAnchorPoint(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getAnchorPoint : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DPoint& ret = cobj->getAnchorPoint();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getAnchorPoint : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_updateTransform(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_updateTransform : Invalid Native Object");
    if (argc == 0) {
        cobj->updateTransform();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_updateTransform : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_getAnchorPointInPoints(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getAnchorPointInPoints : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DPoint& ret = cobj->getAnchorPointInPoints();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getAnchorPointInPoints : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_getWorldToViewTransform(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getWorldToViewTransform : Invalid Native Object");
    if (argc == 0) {
        CrossApp::Mat4 ret = cobj->getWorldToViewTransform();
        jsval jsret = JSVAL_NULL;
        jsret = matrix_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getWorldToViewTransform : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_setAnchorPoint(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setAnchorPoint : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DPoint arg0;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setAnchorPoint : Error processing arguments");
        cobj->setAnchorPoint(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setAnchorPoint : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_onEnter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_onEnter : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnter();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_onEnter : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_getCenterOrigin(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getCenterOrigin : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DPoint& ret = cobj->getCenterOrigin();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getCenterOrigin : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_initWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_initWithCenter : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_initWithCenter : Error processing arguments");
        bool ret = cobj->initWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_initWithCenter : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_getRotation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getRotation : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getRotation();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getRotation : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_getViewToSuperviewTransform(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CAView* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getViewToSuperviewTransform : Invalid Native Object");
    do {
        if (argc == 1) {
            CrossApp::CAView* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::Mat4 ret = cobj->getViewToSuperviewTransform(arg0);
            jsval jsret = JSVAL_NULL;
            jsret = matrix_to_jsval(cx, ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 0) {
            const CrossApp::Mat4& ret = cobj->getViewToSuperviewTransform();
            jsval jsret = JSVAL_NULL;
            jsret = matrix_to_jsval(cx, ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CAView_getViewToSuperviewTransform : wrong number of arguments");
    return false;
}
bool js_crossapp_CAView_setCenterOrigin(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setCenterOrigin : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DPoint arg0;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setCenterOrigin : Error processing arguments");
        cobj->setCenterOrigin(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setCenterOrigin : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_getZOrder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getZOrder : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getZOrder();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getZOrder : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_getSubviewsCount(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getSubviewsCount : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getSubviewsCount();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getSubviewsCount : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_visit(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CAView* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_visit : Invalid Native Object");
    do {
        if (argc == 0) {
            cobj->visit();
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 3) {
            CrossApp::Renderer* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::Renderer*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::Mat4 arg1;
            ok &= jsval_to_matrix(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            uint32_t arg2 = 0;
            ok &= jsval_to_uint32(cx, args.get(2), &arg2);
            if (!ok) { ok = true; break; }
            cobj->visit(arg0, arg1, arg2);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CAView_visit : wrong number of arguments");
    return false;
}
bool js_crossapp_CAView_transform(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_transform : Invalid Native Object");
    if (argc == 1) {
        CrossApp::Mat4 arg0;
        ok &= jsval_to_matrix(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_transform : Error processing arguments");
        CrossApp::Mat4 ret = cobj->transform(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = matrix_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_transform : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_getGLProgramState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getGLProgramState : Invalid Native Object");
    if (argc == 0) {
        CrossApp::GLProgramState* ret = cobj->getGLProgramState();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::GLProgramState>(cx, (CrossApp::GLProgramState*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getGLProgramState : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_getSkewX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getSkewX : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getSkewX();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getSkewX : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_getSkewY(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getSkewY : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getSkewY();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getSkewY : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_setBounds(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setBounds : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setBounds : Error processing arguments");
        cobj->setBounds(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setBounds : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_setRotationY(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setRotationY : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setRotationY : Error processing arguments");
        cobj->setRotationY(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setRotationY : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_insertSubview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_insertSubview : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAView* arg0 = nullptr;
        int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_insertSubview : Error processing arguments");
        cobj->insertSubview(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_insertSubview : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAView_setAdditionalTransform(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CAView* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setAdditionalTransform : Invalid Native Object");
    do {
        if (argc == 1) {
            CrossApp::AffineTransform arg0;
            #pragma warning NO CONVERSION TO NATIVE FOR AffineTransform
			ok = false;
            if (!ok) { ok = true; break; }
            cobj->setAdditionalTransform(arg0);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 1) {
            const CrossApp::Mat4* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (const CrossApp::Mat4*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            cobj->setAdditionalTransform(arg0);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CAView_setAdditionalTransform : wrong number of arguments");
    return false;
}
bool js_crossapp_CAView_setFlipY(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setFlipY : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setFlipY : Error processing arguments");
        cobj->setFlipY(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setFlipY : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_setFlipX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setFlipX : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setFlipX : Error processing arguments");
        cobj->setFlipX(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setFlipX : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_getCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getCenter : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DRect& ret = cobj->getCenter();
        jsval jsret = JSVAL_NULL;
        jsret = drect_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getCenter : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_getRotationX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getRotationX : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getRotationX();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getRotationX : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_setViewToSuperviewTransform(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setViewToSuperviewTransform : Invalid Native Object");
    if (argc == 1) {
        CrossApp::Mat4 arg0;
        ok &= jsval_to_matrix(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setViewToSuperviewTransform : Error processing arguments");
        cobj->setViewToSuperviewTransform(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setViewToSuperviewTransform : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_getOrderOfArrival(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getOrderOfArrival : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getOrderOfArrival();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getOrderOfArrival : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_getRotationY(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getRotationY : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getRotationY();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getRotationY : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_isRunning(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_isRunning : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isRunning();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_isRunning : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_setBlendFunc(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setBlendFunc : Invalid Native Object");
    if (argc == 1) {
        CrossApp::BlendFunc arg0;
        #pragma warning NO CONVERSION TO NATIVE FOR BlendFunc
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setBlendFunc : Error processing arguments");
        cobj->setBlendFunc(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setBlendFunc : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_getQuad(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getQuad : Invalid Native Object");
    if (argc == 0) {
        CrossApp::_ccV3F_C4B_T2F_Quad ret = cobj->getQuad();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR _ccV3F_C4B_T2F_Quad;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getQuad : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_setVisible(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setVisible : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setVisible : Error processing arguments");
        cobj->setVisible(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setVisible : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_reorderSubview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_reorderSubview : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAView* arg0 = nullptr;
        int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_reorderSubview : Error processing arguments");
        cobj->reorderSubview(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_reorderSubview : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAView__setZOrder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView__setZOrder : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView__setZOrder : Error processing arguments");
        cobj->_setZOrder(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView__setZOrder : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_setScale(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CAView* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setScale : Invalid Native Object");
    do {
        if (argc == 2) {
            double arg0 = 0;
            ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            cobj->setScale(arg0, arg1);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 1) {
            double arg0 = 0;
            ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
            if (!ok) { ok = true; break; }
            cobj->setScale(arg0);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CAView_setScale : wrong number of arguments");
    return false;
}
bool js_crossapp_CAView_isDisplayRange(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_isDisplayRange : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isDisplayRange();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_isDisplayRange : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_getOnExitCallback(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getOnExitCallback : Invalid Native Object");
    if (argc == 0) {
        const std::function<void ()>& ret = cobj->getOnExitCallback();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR std::function;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getOnExitCallback : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_getDisplayedAlpha(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getDisplayedAlpha : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getDisplayedAlpha();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getDisplayedAlpha : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_getViewToSuperviewAffineTransform(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CAView* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getViewToSuperviewAffineTransform : Invalid Native Object");
    do {
        if (argc == 1) {
            CrossApp::CAView* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::AffineTransform ret = cobj->getViewToSuperviewAffineTransform(arg0);
            jsval jsret = JSVAL_NULL;
            #pragma warning NO CONVERSION FROM NATIVE FOR AffineTransform;
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 0) {
            CrossApp::AffineTransform ret = cobj->getViewToSuperviewAffineTransform();
            jsval jsret = JSVAL_NULL;
            #pragma warning NO CONVERSION FROM NATIVE FOR AffineTransform;
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CAView_getViewToSuperviewAffineTransform : wrong number of arguments");
    return false;
}
bool js_crossapp_CAView_setOrderOfArrival(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setOrderOfArrival : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setOrderOfArrival : Error processing arguments");
        cobj->setOrderOfArrival(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setOrderOfArrival : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_setFrameOrigin(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setFrameOrigin : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DPoint arg0;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setFrameOrigin : Error processing arguments");
        cobj->setFrameOrigin(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setFrameOrigin : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_getScaleY(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getScaleY : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getScaleY();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getScaleY : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_getScaleX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getScaleX : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getScaleX();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getScaleX : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_isVisitableByVisitingCamera(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_isVisitableByVisitingCamera : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isVisitableByVisitingCamera();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_isVisitableByVisitingCamera : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_addSubview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_addSubview : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_addSubview : Error processing arguments");
        cobj->addSubview(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_addSubview : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_setAnchorPointInPoints(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setAnchorPointInPoints : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DPoint arg0;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setAnchorPointInPoints : Error processing arguments");
        cobj->setAnchorPointInPoints(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setAnchorPointInPoints : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_initWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_initWithFrame : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_initWithFrame : Error processing arguments");
        bool ret = cobj->initWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_initWithFrame : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_setDisplayRange(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setDisplayRange : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setDisplayRange : Error processing arguments");
        cobj->setDisplayRange(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setDisplayRange : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_setAlpha(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setAlpha : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setAlpha : Error processing arguments");
        cobj->setAlpha(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setAlpha : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_processParentFlags(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_processParentFlags : Invalid Native Object");
    if (argc == 2) {
        CrossApp::Mat4 arg0;
        uint32_t arg1 = 0;
        ok &= jsval_to_matrix(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_processParentFlags : Error processing arguments");
        uint32_t ret = cobj->processParentFlags(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_processParentFlags : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAView_getSubviews(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getSubviews : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAVector<CrossApp::CAView *>& ret = cobj->getSubviews();
        jsval jsret = JSVAL_NULL;
        jsret = cavector_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getSubviews : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_getColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_draw(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CAView* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_draw : Invalid Native Object");
    do {
        if (argc == 0) {
            cobj->draw();
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 3) {
            CrossApp::Renderer* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::Renderer*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::Mat4 arg1;
            ok &= jsval_to_matrix(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            uint32_t arg2 = 0;
            ok &= jsval_to_uint32(cx, args.get(2), &arg2);
            if (!ok) { ok = true; break; }
            cobj->draw(arg0, arg1, arg2);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CAView_draw : wrong number of arguments");
    return false;
}
bool js_crossapp_CAView_getBlendFunc(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getBlendFunc : Invalid Native Object");
    if (argc == 0) {
        CrossApp::BlendFunc ret = cobj->getBlendFunc();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR BlendFunc;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getBlendFunc : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_description(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_description : Invalid Native Object");
    if (argc == 0) {
        const char* ret = cobj->description();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_description : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_isVisible(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_isVisible : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isVisible();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_isVisible : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_getSuperviewToViewTransform(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getSuperviewToViewTransform : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::Mat4& ret = cobj->getSuperviewToViewTransform();
        jsval jsret = JSVAL_NULL;
        jsret = matrix_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getSuperviewToViewTransform : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_convertToWorldSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_convertToWorldSize : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_convertToWorldSize : Error processing arguments");
        CrossApp::DSize ret = cobj->convertToWorldSize(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_convertToWorldSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_convertToNodeSpace(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_convertToNodeSpace : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DPoint arg0;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_convertToNodeSpace : Error processing arguments");
        CrossApp::DPoint ret = cobj->convertToNodeSpace(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_convertToNodeSpace : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_getBounds(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getBounds : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DRect& ret = cobj->getBounds();
        jsval jsret = JSVAL_NULL;
        jsret = drect_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getBounds : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_getScale(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_getScale : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getScale();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_getScale : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAView_enabledRightShadow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_enabledRightShadow : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_enabledRightShadow : Error processing arguments");
        cobj->enabledRightShadow(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_enabledRightShadow : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_initWithColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_initWithColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_initWithColor : Error processing arguments");
        bool ret = cobj->initWithColor(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_initWithColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_setFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setFrame : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setFrame : Error processing arguments");
        cobj->setFrame(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setFrame : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_setPointZ(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setPointZ : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setPointZ : Error processing arguments");
        cobj->setPointZ(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setPointZ : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_setTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAView_setTag : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_setTag : Error processing arguments");
        cobj->setTag(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAView_setTag : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAView_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAView* ret = CrossApp::CAView::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAView_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CAView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 2) {
            CrossApp::DRect arg0;
            ok &= jsval_to_drect(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::CAColor4B arg1;
            ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAView* ret = CrossApp::CAView::createWithFrame(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 1) {
            CrossApp::DRect arg0;
            ok &= jsval_to_drect(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::CAView* ret = CrossApp::CAView::createWithFrame(arg0);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_crossapp_CAView_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CAView_createWithColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAView_createWithColor : Error processing arguments");
        CrossApp::CAView* ret = CrossApp::CAView::createWithColor(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAView_createWithColor : wrong number of arguments");
    return false;
}
bool js_crossapp_CAView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 2) {
            CrossApp::DLayout arg0;
            ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::CAColor4B arg1;
            ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAView* ret = CrossApp::CAView::createWithLayout(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 1) {
            CrossApp::DLayout arg0;
            ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::CAView* ret = CrossApp::CAView::createWithLayout(arg0);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_crossapp_CAView_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CAView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 2) {
            CrossApp::DRect arg0;
            ok &= jsval_to_drect(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::CAColor4B arg1;
            ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAView* ret = CrossApp::CAView::createWithCenter(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 1) {
            CrossApp::DRect arg0;
            ok &= jsval_to_drect(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::CAView* ret = CrossApp::CAView::createWithCenter(arg0);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_crossapp_CAView_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CAView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAView* cobj = new (std::nothrow) CrossApp::CAView();
    TypeTest<CrossApp::CAView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAView");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_CAView_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::CAView *nobj = new (std::nothrow) CrossApp::CAView();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAView");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_CAResponder_prototype;

void js_CrossApp_CAView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAView *nobj = static_cast<CrossApp::CAView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_CAView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAView_class->name = "CAView";
    jsb_CrossApp_CAView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAView_class->finalize = js_CrossApp_CAView_finalize;
    jsb_CrossApp_CAView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("removeFromSuperview", js_crossapp_CAView_removeFromSuperview, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("enabledTopShadow", js_crossapp_CAView_enabledTopShadow, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setLayout", js_crossapp_CAView_setLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setOpacityModifyRGB", js_crossapp_CAView_setOpacityModifyRGB, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSuperview", js_crossapp_CAView_getSuperview, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSubviewByTag", js_crossapp_CAView_getSubviewByTag, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setOnExitCallback", js_crossapp_CAView_setOnExitCallback, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("sortAllSubviews", js_crossapp_CAView_sortAllSubviews, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("copy", js_crossapp_CAView_copy, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isOpacityModifyRGB", js_crossapp_CAView_isOpacityModifyRGB, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("updateDisplayedAlpha", js_crossapp_CAView_updateDisplayedAlpha, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isFlipX", js_crossapp_CAView_isFlipX, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isFlipY", js_crossapp_CAView_isFlipY, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CAView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setRotation", js_crossapp_CAView_setRotation, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getWorldToViewAffineTransform", js_crossapp_CAView_getWorldToViewAffineTransform, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setZOrder", js_crossapp_CAView_setZOrder, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setScaleY", js_crossapp_CAView_setScaleY, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setScaleX", js_crossapp_CAView_setScaleX, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeSubviewByTag", js_crossapp_CAView_removeSubviewByTag, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("visitEve", js_crossapp_CAView_visitEve, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCenter", js_crossapp_CAView_setCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSuperviewToViewAffineTransform", js_crossapp_CAView_getSuperviewToViewAffineTransform, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setonEnterTransitionDidFinishCallback", js_crossapp_CAView_setonEnterTransitionDidFinishCallback, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("convertRectToWorldSpace", js_crossapp_CAView_convertRectToWorldSpace, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTag", js_crossapp_CAView_getTag, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getonEnterTransitionDidFinishCallback", js_crossapp_CAView_getonEnterTransitionDidFinishCallback, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getViewToWorldTransform", js_crossapp_CAView_getViewToWorldTransform, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExit", js_crossapp_CAView_onExit, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSuperview", js_crossapp_CAView_setSuperview, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setRotationX", js_crossapp_CAView_setRotationX, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("convertToWorldSpace", js_crossapp_CAView_convertToWorldSpace, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAlpha", js_crossapp_CAView_getAlpha, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSkewX", js_crossapp_CAView_setSkewX, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSkewY", js_crossapp_CAView_setSkewY, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setOnEnterCallback", js_crossapp_CAView_setOnEnterCallback, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_crossapp_CAView_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getLayout", js_crossapp_CAView_getLayout, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setonExitTransitionDidStartCallback", js_crossapp_CAView_setonExitTransitionDidStartCallback, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeAllSubviews", js_crossapp_CAView_removeAllSubviews, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reViewlayout", js_crossapp_CAView_reViewlayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSubviewByTextTag", js_crossapp_CAView_getSubviewByTextTag, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeSubviewByTextTag", js_crossapp_CAView_removeSubviewByTextTag, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("convertRectToNodeSpace", js_crossapp_CAView_convertRectToNodeSpace, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getonExitTransitionDidStartCallback", js_crossapp_CAView_getonExitTransitionDidStartCallback, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("enabledLeftShadow", js_crossapp_CAView_enabledLeftShadow, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFrame", js_crossapp_CAView_getFrame, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("convertToNodeSize", js_crossapp_CAView_convertToNodeSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImageRect", js_crossapp_CAView_getImageRect, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithLayout", js_crossapp_CAView_initWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getOnEnterCallback", js_crossapp_CAView_getOnEnterCallback, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("enabledBottomShadow", js_crossapp_CAView_enabledBottomShadow, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getViewToWorldAffineTransform", js_crossapp_CAView_getViewToWorldAffineTransform, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPointZ", js_crossapp_CAView_getPointZ, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getLayoutType", js_crossapp_CAView_getLayoutType, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("update", js_crossapp_CAView_update, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFrameOrigin", js_crossapp_CAView_getFrameOrigin, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCameraMask", js_crossapp_CAView_setCameraMask, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isImageRectRotated", js_crossapp_CAView_isImageRectRotated, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setGLProgramState", js_crossapp_CAView_setGLProgramState, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setColor", js_crossapp_CAView_setColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDisplayedColor", js_crossapp_CAView_getDisplayedColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeSubview", js_crossapp_CAView_removeSubview, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAnchorPoint", js_crossapp_CAView_getAnchorPoint, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("updateTransform", js_crossapp_CAView_updateTransform, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAnchorPointInPoints", js_crossapp_CAView_getAnchorPointInPoints, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getWorldToViewTransform", js_crossapp_CAView_getWorldToViewTransform, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnchorPoint", js_crossapp_CAView_setAnchorPoint, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnter", js_crossapp_CAView_onEnter, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCenterOrigin", js_crossapp_CAView_getCenterOrigin, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithCenter", js_crossapp_CAView_initWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRotation", js_crossapp_CAView_getRotation, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getViewToSuperviewTransform", js_crossapp_CAView_getViewToSuperviewTransform, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCenterOrigin", js_crossapp_CAView_setCenterOrigin, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getZOrder", js_crossapp_CAView_getZOrder, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSubviewsCount", js_crossapp_CAView_getSubviewsCount, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("visit", js_crossapp_CAView_visit, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("transform", js_crossapp_CAView_transform, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getGLProgramState", js_crossapp_CAView_getGLProgramState, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSkewX", js_crossapp_CAView_getSkewX, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSkewY", js_crossapp_CAView_getSkewY, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBounds", js_crossapp_CAView_setBounds, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setRotationY", js_crossapp_CAView_setRotationY, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("insertSubview", js_crossapp_CAView_insertSubview, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAdditionalTransform", js_crossapp_CAView_setAdditionalTransform, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFlipY", js_crossapp_CAView_setFlipY, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFlipX", js_crossapp_CAView_setFlipX, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCenter", js_crossapp_CAView_getCenter, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRotationX", js_crossapp_CAView_getRotationX, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setViewToSuperviewTransform", js_crossapp_CAView_setViewToSuperviewTransform, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getOrderOfArrival", js_crossapp_CAView_getOrderOfArrival, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRotationY", js_crossapp_CAView_getRotationY, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isRunning", js_crossapp_CAView_isRunning, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBlendFunc", js_crossapp_CAView_setBlendFunc, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getQuad", js_crossapp_CAView_getQuad, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setVisible", js_crossapp_CAView_setVisible, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reorderSubview", js_crossapp_CAView_reorderSubview, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("_setZOrder", js_crossapp_CAView__setZOrder, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setScale", js_crossapp_CAView_setScale, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isDisplayRange", js_crossapp_CAView_isDisplayRange, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getOnExitCallback", js_crossapp_CAView_getOnExitCallback, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDisplayedAlpha", js_crossapp_CAView_getDisplayedAlpha, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getViewToSuperviewAffineTransform", js_crossapp_CAView_getViewToSuperviewAffineTransform, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setOrderOfArrival", js_crossapp_CAView_setOrderOfArrival, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFrameOrigin", js_crossapp_CAView_setFrameOrigin, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getScaleY", js_crossapp_CAView_getScaleY, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getScaleX", js_crossapp_CAView_getScaleX, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isVisitableByVisitingCamera", js_crossapp_CAView_isVisitableByVisitingCamera, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addSubview", js_crossapp_CAView_addSubview, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnchorPointInPoints", js_crossapp_CAView_setAnchorPointInPoints, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithFrame", js_crossapp_CAView_initWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDisplayRange", js_crossapp_CAView_setDisplayRange, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlpha", js_crossapp_CAView_setAlpha, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("processParentFlags", js_crossapp_CAView_processParentFlags, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSubviews", js_crossapp_CAView_getSubviews, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getColor", js_crossapp_CAView_getColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("draw", js_crossapp_CAView_draw, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBlendFunc", js_crossapp_CAView_getBlendFunc, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("description", js_crossapp_CAView_description, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isVisible", js_crossapp_CAView_isVisible, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSuperviewToViewTransform", js_crossapp_CAView_getSuperviewToViewTransform, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("convertToWorldSize", js_crossapp_CAView_convertToWorldSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("convertToNodeSpace", js_crossapp_CAView_convertToNodeSpace, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_crossapp_CAView_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBounds", js_crossapp_CAView_getBounds, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getScale", js_crossapp_CAView_getScale, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("enabledRightShadow", js_crossapp_CAView_enabledRightShadow, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithColor", js_crossapp_CAView_initWithColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFrame", js_crossapp_CAView_setFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPointZ", js_crossapp_CAView_setPointZ, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTag", js_crossapp_CAView_setTag, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_CAView_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CAView_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_crossapp_CAView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithColor", js_crossapp_CAView_createWithColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CAView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CAView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAResponder_prototype),
        jsb_CrossApp_CAView_class,
        js_crossapp_CAView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAView_class;
        p->proto = jsb_CrossApp_CAView_prototype;
        p->parentProto = jsb_CrossApp_CAResponder_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.CAView.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_CAImageView_class;
JSObject *jsb_CrossApp_CAImageView_prototype;

bool js_crossapp_CAImageView_isAnimating(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageView_isAnimating : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAnimating();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageView_isAnimating : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImageView_getAnimationRepeatCount(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageView_getAnimationRepeatCount : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getAnimationRepeatCount();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageView_getAnimationRepeatCount : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImageView_copy(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageView_copy : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->copy();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageView_copy : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImageView_stopAnimating(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageView_stopAnimating : Invalid Native Object");
    if (argc == 0) {
        cobj->stopAnimating();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageView_stopAnimating : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImageView_setImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageView_setImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImageView_setImage : Error processing arguments");
        cobj->setImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageView_setImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAImageView_getAnimationImages(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageView_getAnimationImages : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAVector<CrossApp::CAImage *> ret = cobj->getAnimationImages();
        jsval jsret = JSVAL_NULL;
        jsret = cavector_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageView_getAnimationImages : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImageView_initWithImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageView_initWithImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImageView_initWithImage : Error processing arguments");
        bool ret = cobj->initWithImage(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageView_initWithImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAImageView_setAnimationImages(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageView_setAnimationImages : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAVector<CrossApp::CAImage *> arg0;
        ok &= jsval_to_cavector(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImageView_setAnimationImages : Error processing arguments");
        cobj->setAnimationImages(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageView_setAnimationImages : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAImageView_setImageAsyncWithFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageView_setImageAsyncWithFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImageView_setImageAsyncWithFile : Error processing arguments");
        cobj->setImageAsyncWithFile(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageView_setImageAsyncWithFile : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAImageView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImageView_setAnimationDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageView_setAnimationDuration : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImageView_setAnimationDuration : Error processing arguments");
        cobj->setAnimationDuration(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageView_setAnimationDuration : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAImageView_getScaleType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageView_getScaleType : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getScaleType();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageView_getScaleType : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImageView_getAnimationDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageView_getAnimationDuration : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getAnimationDuration();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageView_getAnimationDuration : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImageView_setImageRect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageView_setImageRect : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImageView_setImageRect : Error processing arguments");
        cobj->setImageRect(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageView_setImageRect : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAImageView_setScaleType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageView_setScaleType : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImageView::ScaleType arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImageView_setScaleType : Error processing arguments");
        cobj->setScaleType(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageView_setScaleType : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAImageView_getImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageView_getImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageView_getImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImageView_startAnimating(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageView_startAnimating : Invalid Native Object");
    if (argc == 0) {
        cobj->startAnimating();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageView_startAnimating : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImageView_setAnimationRepeatCount(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImageView_setAnimationRepeatCount : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImageView_setAnimationRepeatCount : Error processing arguments");
        cobj->setAnimationRepeatCount(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImageView_setAnimationRepeatCount : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAImageView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImageView_createWithFrame : Error processing arguments");
        CrossApp::CAImageView* ret = CrossApp::CAImageView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImageView>(cx, (CrossApp::CAImageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImageView_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImageView_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAImageView* ret = CrossApp::CAImageView::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImageView>(cx, (CrossApp::CAImageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImageView_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImageView_createWithImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImageView_createWithImage : Error processing arguments");
        CrossApp::CAImageView* ret = CrossApp::CAImageView::createWithImage(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImageView>(cx, (CrossApp::CAImageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImageView_createWithImage : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImageView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImageView_createWithLayout : Error processing arguments");
        CrossApp::CAImageView* ret = CrossApp::CAImageView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImageView>(cx, (CrossApp::CAImageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImageView_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImageView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImageView_createWithCenter : Error processing arguments");
        CrossApp::CAImageView* ret = CrossApp::CAImageView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImageView>(cx, (CrossApp::CAImageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImageView_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImageView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAImageView* cobj = new (std::nothrow) CrossApp::CAImageView();
    TypeTest<CrossApp::CAImageView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAImageView");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAImageView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAImageView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAImageView *nobj = static_cast<CrossApp::CAImageView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAImageView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAImageView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAImageView_class->name = "CAImageView";
    jsb_CrossApp_CAImageView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAImageView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAImageView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAImageView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAImageView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAImageView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAImageView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAImageView_class->finalize = js_CrossApp_CAImageView_finalize;
    jsb_CrossApp_CAImageView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("isAnimating", js_crossapp_CAImageView_isAnimating, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAnimationRepeatCount", js_crossapp_CAImageView_getAnimationRepeatCount, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("copy", js_crossapp_CAImageView_copy, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("stopAnimating", js_crossapp_CAImageView_stopAnimating, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImage", js_crossapp_CAImageView_setImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAnimationImages", js_crossapp_CAImageView_getAnimationImages, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithImage", js_crossapp_CAImageView_initWithImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnimationImages", js_crossapp_CAImageView_setAnimationImages, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageAsyncWithFile", js_crossapp_CAImageView_setImageAsyncWithFile, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CAImageView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnimationDuration", js_crossapp_CAImageView_setAnimationDuration, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getScaleType", js_crossapp_CAImageView_getScaleType, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAnimationDuration", js_crossapp_CAImageView_getAnimationDuration, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageRect", js_crossapp_CAImageView_setImageRect, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setScaleType", js_crossapp_CAImageView_setScaleType, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImage", js_crossapp_CAImageView_getImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("startAnimating", js_crossapp_CAImageView_startAnimating, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnimationRepeatCount", js_crossapp_CAImageView_setAnimationRepeatCount, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_crossapp_CAImageView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("create", js_crossapp_CAImageView_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithImage", js_crossapp_CAImageView_createWithImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CAImageView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CAImageView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAImageView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAImageView_class,
        js_crossapp_CAImageView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAImageView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAImageView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAImageView_class;
        p->proto = jsb_CrossApp_CAImageView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAScale9ImageView_class;
JSObject *jsb_CrossApp_CAScale9ImageView_prototype;

bool js_crossapp_CAScale9ImageView_setInsetBottom(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScale9ImageView_setInsetBottom : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScale9ImageView_setInsetBottom : Error processing arguments");
        cobj->setInsetBottom(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScale9ImageView_setInsetBottom : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScale9ImageView_getOriginalSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScale9ImageView_getOriginalSize : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DSize ret = cobj->getOriginalSize();
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScale9ImageView_getOriginalSize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScale9ImageView_draw(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScale9ImageView_draw : Invalid Native Object");
    if (argc == 3) {
        CrossApp::Renderer* arg0 = nullptr;
        CrossApp::Mat4 arg1;
        uint32_t arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::Renderer*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_matrix(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScale9ImageView_draw : Error processing arguments");
        cobj->draw(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScale9ImageView_draw : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_crossapp_CAScale9ImageView_setColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScale9ImageView_setColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScale9ImageView_setColor : Error processing arguments");
        cobj->setColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScale9ImageView_setColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScale9ImageView_setImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScale9ImageView_setImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScale9ImageView_setImage : Error processing arguments");
        cobj->setImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScale9ImageView_setImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScale9ImageView_initWithImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScale9ImageView_initWithImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScale9ImageView_initWithImage : Error processing arguments");
        bool ret = cobj->initWithImage(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScale9ImageView_initWithImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScale9ImageView_getInsetTop(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScale9ImageView_getInsetTop : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getInsetTop();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScale9ImageView_getInsetTop : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScale9ImageView_setInsetLeft(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScale9ImageView_setInsetLeft : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScale9ImageView_setInsetLeft : Error processing arguments");
        cobj->setInsetLeft(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScale9ImageView_setInsetLeft : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScale9ImageView_setCapInsets(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScale9ImageView_setCapInsets : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScale9ImageView_setCapInsets : Error processing arguments");
        cobj->setCapInsets(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScale9ImageView_setCapInsets : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScale9ImageView_getCapInsets(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScale9ImageView_getCapInsets : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DRect ret = cobj->getCapInsets();
        jsval jsret = JSVAL_NULL;
        jsret = drect_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScale9ImageView_getCapInsets : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScale9ImageView_setInsetTop(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScale9ImageView_setInsetTop : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScale9ImageView_setInsetTop : Error processing arguments");
        cobj->setInsetTop(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScale9ImageView_setInsetTop : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScale9ImageView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScale9ImageView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScale9ImageView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScale9ImageView_setAlpha(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScale9ImageView_setAlpha : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScale9ImageView_setAlpha : Error processing arguments");
        cobj->setAlpha(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScale9ImageView_setAlpha : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScale9ImageView_getColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScale9ImageView_getColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScale9ImageView_getColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScale9ImageView_getInsetLeft(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScale9ImageView_getInsetLeft : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getInsetLeft();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScale9ImageView_getInsetLeft : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScale9ImageView_getInsetBottom(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScale9ImageView_getInsetBottom : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getInsetBottom();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScale9ImageView_getInsetBottom : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScale9ImageView_setInsetRight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScale9ImageView_setInsetRight : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScale9ImageView_setInsetRight : Error processing arguments");
        cobj->setInsetRight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScale9ImageView_setInsetRight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScale9ImageView_copy(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScale9ImageView_copy : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->copy();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScale9ImageView_copy : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScale9ImageView_getInsetRight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScale9ImageView_getInsetRight : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getInsetRight();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScale9ImageView_getInsetRight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScale9ImageView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScale9ImageView_createWithFrame : Error processing arguments");
        CrossApp::CAScale9ImageView* ret = CrossApp::CAScale9ImageView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAScale9ImageView>(cx, (CrossApp::CAScale9ImageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAScale9ImageView_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CAScale9ImageView_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAScale9ImageView* ret = CrossApp::CAScale9ImageView::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAScale9ImageView>(cx, (CrossApp::CAScale9ImageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAScale9ImageView_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CAScale9ImageView_createWithImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScale9ImageView_createWithImage : Error processing arguments");
        CrossApp::CAScale9ImageView* ret = CrossApp::CAScale9ImageView::createWithImage(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAScale9ImageView>(cx, (CrossApp::CAScale9ImageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAScale9ImageView_createWithImage : wrong number of arguments");
    return false;
}
bool js_crossapp_CAScale9ImageView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScale9ImageView_createWithLayout : Error processing arguments");
        CrossApp::CAScale9ImageView* ret = CrossApp::CAScale9ImageView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAScale9ImageView>(cx, (CrossApp::CAScale9ImageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAScale9ImageView_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CAScale9ImageView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScale9ImageView_createWithCenter : Error processing arguments");
        CrossApp::CAScale9ImageView* ret = CrossApp::CAScale9ImageView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAScale9ImageView>(cx, (CrossApp::CAScale9ImageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAScale9ImageView_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CAScale9ImageView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAScale9ImageView* cobj = new (std::nothrow) CrossApp::CAScale9ImageView();
    TypeTest<CrossApp::CAScale9ImageView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAScale9ImageView");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAScale9ImageView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAScale9ImageView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAScale9ImageView *nobj = static_cast<CrossApp::CAScale9ImageView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAScale9ImageView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAScale9ImageView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAScale9ImageView_class->name = "CAScale9ImageView";
    jsb_CrossApp_CAScale9ImageView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAScale9ImageView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAScale9ImageView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAScale9ImageView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAScale9ImageView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAScale9ImageView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAScale9ImageView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAScale9ImageView_class->finalize = js_CrossApp_CAScale9ImageView_finalize;
    jsb_CrossApp_CAScale9ImageView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setInsetBottom", js_crossapp_CAScale9ImageView_setInsetBottom, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getOriginalSize", js_crossapp_CAScale9ImageView_getOriginalSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("draw", js_crossapp_CAScale9ImageView_draw, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setColor", js_crossapp_CAScale9ImageView_setColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImage", js_crossapp_CAScale9ImageView_setImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithImage", js_crossapp_CAScale9ImageView_initWithImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getInsetTop", js_crossapp_CAScale9ImageView_getInsetTop, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setInsetLeft", js_crossapp_CAScale9ImageView_setInsetLeft, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCapInsets", js_crossapp_CAScale9ImageView_setCapInsets, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCapInsets", js_crossapp_CAScale9ImageView_getCapInsets, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setInsetTop", js_crossapp_CAScale9ImageView_setInsetTop, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CAScale9ImageView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlpha", js_crossapp_CAScale9ImageView_setAlpha, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getColor", js_crossapp_CAScale9ImageView_getColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getInsetLeft", js_crossapp_CAScale9ImageView_getInsetLeft, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getInsetBottom", js_crossapp_CAScale9ImageView_getInsetBottom, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setInsetRight", js_crossapp_CAScale9ImageView_setInsetRight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("copy", js_crossapp_CAScale9ImageView_copy, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getInsetRight", js_crossapp_CAScale9ImageView_getInsetRight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_crossapp_CAScale9ImageView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("create", js_crossapp_CAScale9ImageView_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithImage", js_crossapp_CAScale9ImageView_createWithImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CAScale9ImageView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CAScale9ImageView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAScale9ImageView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAScale9ImageView_class,
        js_crossapp_CAScale9ImageView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAScale9ImageView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAScale9ImageView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAScale9ImageView_class;
        p->proto = jsb_CrossApp_CAScale9ImageView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAViewAnimation_class;
JSObject *jsb_CrossApp_CAViewAnimation_prototype;

bool js_crossapp_CAViewAnimation_setAnimationsEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAViewAnimation_setAnimationsEnabled : Error processing arguments");
        CrossApp::CAViewAnimation::setAnimationsEnabled(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAViewAnimation_setAnimationsEnabled : wrong number of arguments");
    return false;
}
bool js_crossapp_CAViewAnimation_beginAnimations(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAViewAnimation_beginAnimations : Error processing arguments");
        CrossApp::CAViewAnimation::beginAnimations(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAViewAnimation_beginAnimations : wrong number of arguments");
    return false;
}
bool js_crossapp_CAViewAnimation_removeAllAnimations(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAViewAnimation::removeAllAnimations();
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAViewAnimation_removeAllAnimations : wrong number of arguments");
    return false;
}
bool js_crossapp_CAViewAnimation_setAnimationDidStopSelector(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAViewAnimation_setAnimationDidStopSelector : Error processing arguments");
        CrossApp::CAViewAnimation::setAnimationDidStopSelector(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAViewAnimation_setAnimationDidStopSelector : wrong number of arguments");
    return false;
}
bool js_crossapp_CAViewAnimation_setAnimationDelay(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAViewAnimation_setAnimationDelay : Error processing arguments");
        CrossApp::CAViewAnimation::setAnimationDelay(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAViewAnimation_setAnimationDelay : wrong number of arguments");
    return false;
}
bool js_crossapp_CAViewAnimation_setAnimationWillStartSelector(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAViewAnimation_setAnimationWillStartSelector : Error processing arguments");
        CrossApp::CAViewAnimation::setAnimationWillStartSelector(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAViewAnimation_setAnimationWillStartSelector : wrong number of arguments");
    return false;
}
bool js_crossapp_CAViewAnimation_areAnimationsEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        bool ret = CrossApp::CAViewAnimation::areAnimationsEnabled();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAViewAnimation_areAnimationsEnabled : wrong number of arguments");
    return false;
}
bool js_crossapp_CAViewAnimation_removeAnimationsWithView(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAViewAnimation_removeAnimationsWithView : Error processing arguments");
        CrossApp::CAViewAnimation::removeAnimationsWithView(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAViewAnimation_removeAnimationsWithView : wrong number of arguments");
    return false;
}
bool js_crossapp_CAViewAnimation_setAnimationDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAViewAnimation_setAnimationDuration : Error processing arguments");
        CrossApp::CAViewAnimation::setAnimationDuration(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAViewAnimation_setAnimationDuration : wrong number of arguments");
    return false;
}
bool js_crossapp_CAViewAnimation_areBeginAnimationsWithID(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAViewAnimation_areBeginAnimationsWithID : Error processing arguments");
        bool ret = CrossApp::CAViewAnimation::areBeginAnimationsWithID(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAViewAnimation_areBeginAnimationsWithID : wrong number of arguments");
    return false;
}
bool js_crossapp_CAViewAnimation_removeAnimations(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAViewAnimation_removeAnimations : Error processing arguments");
        CrossApp::CAViewAnimation::removeAnimations(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAViewAnimation_removeAnimations : wrong number of arguments");
    return false;
}
bool js_crossapp_CAViewAnimation_commitAnimations(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAViewAnimation::commitAnimations();
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAViewAnimation_commitAnimations : wrong number of arguments");
    return false;
}
bool js_crossapp_CAViewAnimation_setAnimationRepeatAutoreverses(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAViewAnimation_setAnimationRepeatAutoreverses : Error processing arguments");
        CrossApp::CAViewAnimation::setAnimationRepeatAutoreverses(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAViewAnimation_setAnimationRepeatAutoreverses : wrong number of arguments");
    return false;
}
bool js_crossapp_CAViewAnimation_setAnimationCurve(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAViewAnimation::Curve arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAViewAnimation_setAnimationCurve : Error processing arguments");
        CrossApp::CAViewAnimation::setAnimationCurve(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAViewAnimation_setAnimationCurve : wrong number of arguments");
    return false;
}
bool js_crossapp_CAViewAnimation_setAnimationRepeatCount(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAViewAnimation_setAnimationRepeatCount : Error processing arguments");
        CrossApp::CAViewAnimation::setAnimationRepeatCount(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAViewAnimation_setAnimationRepeatCount : wrong number of arguments");
    return false;
}
bool js_crossapp_CAViewAnimation_areBeginAnimations(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        bool ret = CrossApp::CAViewAnimation::areBeginAnimations();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAViewAnimation_areBeginAnimations : wrong number of arguments");
    return false;
}
bool js_crossapp_CAViewAnimation_setAnimationCurveCallback(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::function<float (float, float, float)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](float larg0, float larg1, float larg2) -> float {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[3];
		            largv[0] = DOUBLE_TO_JSVAL(larg0);
		            largv[1] = DOUBLE_TO_JSVAL(larg1);
		            largv[2] = DOUBLE_TO_JSVAL(larg2);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(3, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            double ret;
		            ok &= JS::ToNumber( cx, rval, &ret) && !isnan(ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAViewAnimation_setAnimationCurveCallback : Error processing arguments");
        CrossApp::CAViewAnimation::setAnimationCurveCallback(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAViewAnimation_setAnimationCurveCallback : wrong number of arguments");
    return false;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAViewAnimation_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAViewAnimation)", obj);
}
void js_register_crossapp_CAViewAnimation(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAViewAnimation_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAViewAnimation_class->name = "CAViewAnimation";
    jsb_CrossApp_CAViewAnimation_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAViewAnimation_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAViewAnimation_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAViewAnimation_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAViewAnimation_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAViewAnimation_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAViewAnimation_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAViewAnimation_class->finalize = js_CrossApp_CAViewAnimation_finalize;
    jsb_CrossApp_CAViewAnimation_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("setAnimationsEnabled", js_crossapp_CAViewAnimation_setAnimationsEnabled, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("beginAnimations", js_crossapp_CAViewAnimation_beginAnimations, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeAllAnimations", js_crossapp_CAViewAnimation_removeAllAnimations, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnimationDidStopSelector", js_crossapp_CAViewAnimation_setAnimationDidStopSelector, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnimationDelay", js_crossapp_CAViewAnimation_setAnimationDelay, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnimationWillStartSelector", js_crossapp_CAViewAnimation_setAnimationWillStartSelector, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("areAnimationsEnabled", js_crossapp_CAViewAnimation_areAnimationsEnabled, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeAnimationsWithView", js_crossapp_CAViewAnimation_removeAnimationsWithView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnimationDuration", js_crossapp_CAViewAnimation_setAnimationDuration, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("areBeginAnimationsWithID", js_crossapp_CAViewAnimation_areBeginAnimationsWithID, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeAnimations", js_crossapp_CAViewAnimation_removeAnimations, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("commitAnimations", js_crossapp_CAViewAnimation_commitAnimations, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnimationRepeatAutoreverses", js_crossapp_CAViewAnimation_setAnimationRepeatAutoreverses, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnimationCurve", js_crossapp_CAViewAnimation_setAnimationCurve, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnimationRepeatCount", js_crossapp_CAViewAnimation_setAnimationRepeatCount, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("areBeginAnimations", js_crossapp_CAViewAnimation_areBeginAnimations, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnimationCurveCallback", js_crossapp_CAViewAnimation_setAnimationCurveCallback, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAViewAnimation_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAViewAnimation_class,
        dummy_constructor<CrossApp::CAViewAnimation>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAViewAnimation", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAViewAnimation> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAViewAnimation_class;
        p->proto = jsb_CrossApp_CAViewAnimation_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAControl_class;
JSObject *jsb_CrossApp_CAControl_prototype;

bool js_crossapp_CAControl_setControlStateSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAControl* cobj = (CrossApp::CAControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAControl_setControlStateSelected : Invalid Native Object");
    if (argc == 0) {
        cobj->setControlStateSelected();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAControl_setControlStateSelected : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAControl_setControlStateHighlighted(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAControl* cobj = (CrossApp::CAControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAControl_setControlStateHighlighted : Invalid Native Object");
    if (argc == 0) {
        cobj->setControlStateHighlighted();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAControl_setControlStateHighlighted : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAControl_getControlState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAControl* cobj = (CrossApp::CAControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAControl_getControlState : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getControlState();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAControl_getControlState : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAControl_setControlState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAControl* cobj = (CrossApp::CAControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAControl_setControlState : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAControl::State arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAControl_setControlState : Error processing arguments");
        cobj->setControlState(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAControl_setControlState : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAControl_isRecSpe(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAControl* cobj = (CrossApp::CAControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAControl_isRecSpe : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isRecSpe();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAControl_isRecSpe : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAControl_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAControl* cobj = (CrossApp::CAControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAControl_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAControl_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAControl_setControlStateNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAControl* cobj = (CrossApp::CAControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAControl_setControlStateNormal : Invalid Native Object");
    if (argc == 0) {
        cobj->setControlStateNormal();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAControl_setControlStateNormal : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAControl_setRecSpe(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAControl* cobj = (CrossApp::CAControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAControl_setRecSpe : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAControl_setRecSpe : Error processing arguments");
        cobj->setRecSpe(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAControl_setRecSpe : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAControl_setControlStateDisabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAControl* cobj = (CrossApp::CAControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAControl_setControlStateDisabled : Invalid Native Object");
    if (argc == 0) {
        cobj->setControlStateDisabled();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAControl_setControlStateDisabled : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAControl_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAControl* cobj = new (std::nothrow) CrossApp::CAControl();
    TypeTest<CrossApp::CAControl> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAControl");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_CAControl_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::CAControl *nobj = new (std::nothrow) CrossApp::CAControl();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAControl");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAControl_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAControl)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAControl *nobj = static_cast<CrossApp::CAControl *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_CAControl(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAControl_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAControl_class->name = "CAControl";
    jsb_CrossApp_CAControl_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAControl_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAControl_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAControl_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAControl_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAControl_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAControl_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAControl_class->finalize = js_CrossApp_CAControl_finalize;
    jsb_CrossApp_CAControl_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setControlStateSelected", js_crossapp_CAControl_setControlStateSelected, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setControlStateHighlighted", js_crossapp_CAControl_setControlStateHighlighted, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getControlState", js_crossapp_CAControl_getControlState, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setControlState", js_crossapp_CAControl_setControlState, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isRecSpe", js_crossapp_CAControl_isRecSpe, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CAControl_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setControlStateNormal", js_crossapp_CAControl_setControlStateNormal, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setRecSpe", js_crossapp_CAControl_setRecSpe, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setControlStateDisabled", js_crossapp_CAControl_setControlStateDisabled, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_CAControl_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAControl_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAControl_class,
        js_crossapp_CAControl_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAControl", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAControl> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAControl_class;
        p->proto = jsb_CrossApp_CAControl_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.CAControl.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_CALabel_class;
JSObject *jsb_CrossApp_CALabel_prototype;

bool js_crossapp_CALabel_setTextAlignment(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_setTextAlignment : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATextAlignment arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CALabel_setTextAlignment : Error processing arguments");
        cobj->setTextAlignment(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_setTextAlignment : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CALabel_getText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_getText : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getText();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_getText : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CALabel_setUnderLine(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_setUnderLine : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CALabel_setUnderLine : Error processing arguments");
        cobj->setUnderLine(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_setUnderLine : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CALabel_setFontName(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_setFontName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CALabel_setFontName : Error processing arguments");
        cobj->setFontName(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_setFontName : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CALabel_setLineSpacing(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_setLineSpacing : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CALabel_setLineSpacing : Error processing arguments");
        cobj->setLineSpacing(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_setLineSpacing : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CALabel_setBold(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_setBold : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CALabel_setBold : Error processing arguments");
        cobj->setBold(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_setBold : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CALabel_setEnableCopy(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_setEnableCopy : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CALabel_setEnableCopy : Error processing arguments");
        cobj->setEnableCopy(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_setEnableCopy : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CALabel_sizeToFit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_sizeToFit : Invalid Native Object");
    if (argc == 0) {
        cobj->sizeToFit();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_sizeToFit : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CALabel_getLabelSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_getLabelSize : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DSize& ret = cobj->getLabelSize();
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_getLabelSize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CALabel_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CALabel_visitEve(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_visitEve : Invalid Native Object");
    if (argc == 0) {
        cobj->visitEve();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_visitEve : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CALabel_setWordWrap(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_setWordWrap : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CALabel_setWordWrap : Error processing arguments");
        cobj->setWordWrap(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_setWordWrap : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CALabel_getEnableCopy(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_getEnableCopy : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->getEnableCopy();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_getEnableCopy : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CALabel_setNumberOfLine(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_setNumberOfLine : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CALabel_setNumberOfLine : Error processing arguments");
        cobj->setNumberOfLine(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_setNumberOfLine : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CALabel_setVerticalTextAlignmet(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_setVerticalTextAlignmet : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAVerticalTextAlignment arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CALabel_setVerticalTextAlignmet : Error processing arguments");
        cobj->setVerticalTextAlignmet(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_setVerticalTextAlignmet : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CALabel_getFont(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_getFont : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAFont& ret = cobj->getFont();
        jsval jsret = JSVAL_NULL;
        jsret = cafont_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_getFont : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CALabel_getColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_getColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_getColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CALabel_getNumberOfLine(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_getNumberOfLine : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getNumberOfLine();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_getNumberOfLine : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CALabel_setItalics(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_setItalics : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CALabel_setItalics : Error processing arguments");
        cobj->setItalics(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_setItalics : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CALabel_setFontSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_setFontSize : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CALabel_setFontSize : Error processing arguments");
        cobj->setFontSize(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_setFontSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CALabel_setColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_setColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CALabel_setColor : Error processing arguments");
        cobj->setColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_setColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CALabel_setDeleteLine(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_setDeleteLine : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CALabel_setDeleteLine : Error processing arguments");
        cobj->setDeleteLine(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_setDeleteLine : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CALabel_unsizeToFit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_unsizeToFit : Invalid Native Object");
    if (argc == 0) {
        cobj->unsizeToFit();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_unsizeToFit : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CALabel_setText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_setText : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CALabel_setText : Error processing arguments");
        cobj->setText(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_setText : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CALabel_setFont(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CALabel_setFont : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAFont arg0;
        ok &= jsval_to_cafont(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CALabel_setFont : Error processing arguments");
        cobj->setFont(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CALabel_setFont : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CALabel_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CALabel* ret = CrossApp::CALabel::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CALabel>(cx, (CrossApp::CALabel*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CALabel_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CALabel_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CALabel_createWithFrame : Error processing arguments");
        CrossApp::CALabel* ret = CrossApp::CALabel::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CALabel>(cx, (CrossApp::CALabel*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CALabel_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CALabel_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CALabel_createWithLayout : Error processing arguments");
        CrossApp::CALabel* ret = CrossApp::CALabel::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CALabel>(cx, (CrossApp::CALabel*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CALabel_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CALabel_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CALabel_createWithCenter : Error processing arguments");
        CrossApp::CALabel* ret = CrossApp::CALabel::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CALabel>(cx, (CrossApp::CALabel*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CALabel_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CALabel_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CALabel* cobj = new (std::nothrow) CrossApp::CALabel();
    TypeTest<CrossApp::CALabel> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CALabel");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CALabel_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CALabel)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CALabel *nobj = static_cast<CrossApp::CALabel *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CALabel(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CALabel_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CALabel_class->name = "CALabel";
    jsb_CrossApp_CALabel_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CALabel_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CALabel_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CALabel_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CALabel_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CALabel_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CALabel_class->convert = JS_ConvertStub;
    jsb_CrossApp_CALabel_class->finalize = js_CrossApp_CALabel_finalize;
    jsb_CrossApp_CALabel_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setTextAlignment", js_crossapp_CALabel_setTextAlignment, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getText", js_crossapp_CALabel_getText, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setUnderLine", js_crossapp_CALabel_setUnderLine, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFontName", js_crossapp_CALabel_setFontName, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setLineSpacing", js_crossapp_CALabel_setLineSpacing, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBold", js_crossapp_CALabel_setBold, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setEnableCopy", js_crossapp_CALabel_setEnableCopy, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("sizeToFit", js_crossapp_CALabel_sizeToFit, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getLabelSize", js_crossapp_CALabel_getLabelSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CALabel_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("visitEve", js_crossapp_CALabel_visitEve, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setWordWrap", js_crossapp_CALabel_setWordWrap, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getEnableCopy", js_crossapp_CALabel_getEnableCopy, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setNumberOfLine", js_crossapp_CALabel_setNumberOfLine, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setVerticalTextAlignmet", js_crossapp_CALabel_setVerticalTextAlignmet, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFont", js_crossapp_CALabel_getFont, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getColor", js_crossapp_CALabel_getColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNumberOfLine", js_crossapp_CALabel_getNumberOfLine, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setItalics", js_crossapp_CALabel_setItalics, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFontSize", js_crossapp_CALabel_setFontSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setColor", js_crossapp_CALabel_setColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDeleteLine", js_crossapp_CALabel_setDeleteLine, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("unsizeToFit", js_crossapp_CALabel_unsizeToFit, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setText", js_crossapp_CALabel_setText, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFont", js_crossapp_CALabel_setFont, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CALabel_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_crossapp_CALabel_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CALabel_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CALabel_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CALabel_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CALabel_class,
        js_crossapp_CALabel_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CALabel", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CALabel> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CALabel_class;
        p->proto = jsb_CrossApp_CALabel_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAApplication_class;
JSObject *jsb_CrossApp_CAApplication_prototype;

bool js_crossapp_CAApplication_onReset(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_onReset : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_onReset : Error processing arguments");
        cobj->onReset(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_onReset : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAApplication_setCrossAppCCLogNotification(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_setCrossAppCCLogNotification : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_setCrossAppCCLogNotification : Error processing arguments");
        cobj->setCrossAppCCLogNotification(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_setCrossAppCCLogNotification : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAApplication_getStatusBarOrientation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getStatusBarOrientation : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getStatusBarOrientation();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getStatusBarOrientation : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_getNotificationCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getNotificationCenter : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CANotificationCenter* ret = cobj->getNotificationCenter();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CANotificationCenter>(cx, (CrossApp::CANotificationCenter*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getNotificationCenter : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_getCurrentLanguage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getCurrentLanguage : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getCurrentLanguage();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getCurrentLanguage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_getImageCache(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getImageCache : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImageCache* ret = cobj->getImageCache();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImageCache>(cx, (CrossApp::CAImageCache*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getImageCache : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_getDeltaTime(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CAApplication* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getDeltaTime : Invalid Native Object");
    do {
        if (argc == 0) {
            double ret = cobj->getDeltaTime();
            jsval jsret = JSVAL_NULL;
            jsret = DOUBLE_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 0) {
            double ret = cobj->getDeltaTime();
            jsval jsret = JSVAL_NULL;
            jsret = DOUBLE_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CAApplication_getDeltaTime : wrong number of arguments");
    return false;
}
bool js_crossapp_CAApplication_setGLDefaultValues(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_setGLDefaultValues : Invalid Native Object");
    if (argc == 0) {
        cobj->setGLDefaultValues();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_setGLDefaultValues : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_setActionManager(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_setActionManager : Invalid Native Object");
    if (argc == 1) {
        CrossApp::ActionManager* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionManager*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_setActionManager : Error processing arguments");
        cobj->setActionManager(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_setActionManager : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAApplication_setAlphaBlending(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_setAlphaBlending : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_setAlphaBlending : Error processing arguments");
        cobj->setAlphaBlending(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_setAlphaBlending : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAApplication_loadMatrix(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_loadMatrix : Invalid Native Object");
    if (argc == 2) {
        CrossApp::MATRIX_STACK_TYPE arg0;
        CrossApp::Mat4 arg1;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        ok &= jsval_to_matrix(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_loadMatrix : Error processing arguments");
        cobj->loadMatrix(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_loadMatrix : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAApplication_updateDraw(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_updateDraw : Invalid Native Object");
    if (argc == 0) {
        cobj->updateDraw();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_updateDraw : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_getKeypadDispatcher(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getKeypadDispatcher : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAKeypadDispatcher* ret = cobj->getKeypadDispatcher();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAKeypadDispatcher>(cx, (CrossApp::CAKeypadDispatcher*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getKeypadDispatcher : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_getRenderer(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getRenderer : Invalid Native Object");
    if (argc == 0) {
        CrossApp::Renderer* ret = cobj->getRenderer();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Renderer>(cx, (CrossApp::Renderer*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getRenderer : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_getWinSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getWinSize : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DSize ret = cobj->getWinSize();
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getWinSize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_end(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_end : Invalid Native Object");
    if (argc == 0) {
        cobj->end();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_end : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_multiplyMatrix(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_multiplyMatrix : Invalid Native Object");
    if (argc == 2) {
        CrossApp::MATRIX_STACK_TYPE arg0;
        CrossApp::Mat4 arg1;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        ok &= jsval_to_matrix(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_multiplyMatrix : Error processing arguments");
        cobj->multiplyMatrix(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_multiplyMatrix : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAApplication_runWindow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_runWindow : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAWindow* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAWindow*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_runWindow : Error processing arguments");
        cobj->runWindow(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_runWindow : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAApplication_setDefaultValues(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_setDefaultValues : Invalid Native Object");
    if (argc == 0) {
        cobj->setDefaultValues();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_setDefaultValues : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_getVisibleOrigin(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getVisibleOrigin : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DPoint ret = cobj->getVisibleOrigin();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getVisibleOrigin : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_mainLoop(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_mainLoop : Invalid Native Object");
    if (argc == 0) {
        cobj->mainLoop();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_mainLoop : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_isDrawing(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_isDrawing : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isDrawing();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_isDrawing : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_setDepthTest(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_setDepthTest : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_setDepthTest : Error processing arguments");
        cobj->setDepthTest(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_setDepthTest : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAApplication_getSecondsPerFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getSecondsPerFrame : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getSecondsPerFrame();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getSecondsPerFrame : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_resetMatrixStack(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_resetMatrixStack : Invalid Native Object");
    if (argc == 0) {
        cobj->resetMatrixStack();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_resetMatrixStack : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_getMotionManager(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getMotionManager : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAMotionManager* ret = cobj->getMotionManager();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAMotionManager>(cx, (CrossApp::CAMotionManager*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getMotionManager : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_getStatusBarStyle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getStatusBarStyle : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getStatusBarStyle();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getStatusBarStyle : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_setScheduler(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_setScheduler : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAScheduler* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAScheduler*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_setScheduler : Error processing arguments");
        cobj->setScheduler(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_setScheduler : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAApplication_reshapeProjection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_reshapeProjection : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_reshapeProjection : Error processing arguments");
        cobj->reshapeProjection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_reshapeProjection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAApplication_getMatrix(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getMatrix : Invalid Native Object");
    if (argc == 1) {
        CrossApp::MATRIX_STACK_TYPE arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_getMatrix : Error processing arguments");
        const CrossApp::Mat4& ret = cobj->getMatrix(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = matrix_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getMatrix : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAApplication_setKeypadDispatcher(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_setKeypadDispatcher : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAKeypadDispatcher* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAKeypadDispatcher*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_setKeypadDispatcher : Error processing arguments");
        cobj->setKeypadDispatcher(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_setKeypadDispatcher : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAApplication_getOpenGLView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getOpenGLView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CCEGLView* ret = cobj->getOpenGLView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CCEGLView>(cx, (CrossApp::CCEGLView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getOpenGLView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_setViewport(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_setViewport : Invalid Native Object");
    if (argc == 0) {
        cobj->setViewport();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_setViewport : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_stopAnimation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_stopAnimation : Invalid Native Object");
    if (argc == 0) {
        cobj->stopAnimation();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_stopAnimation : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_getNumberOfDraws(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getNumberOfDraws : Invalid Native Object");
    if (argc == 0) {
        unsigned long ret = cobj->getNumberOfDraws();
        jsval jsret = JSVAL_NULL;
        jsret = ulong_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getNumberOfDraws : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_getProjection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getProjection : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getProjection();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getProjection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_resume(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_resume : Invalid Native Object");
    if (argc == 0) {
        cobj->resume();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_resume : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_isStatusBarHidden(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_isStatusBarHidden : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isStatusBarHidden();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_isStatusBarHidden : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_isNextDeltaTimeZero(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_isNextDeltaTimeZero : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isNextDeltaTimeZero();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_isNextDeltaTimeZero : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_setImageCache(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_setImageCache : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImageCache* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImageCache*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_setImageCache : Error processing arguments");
        cobj->setImageCache(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_setImageCache : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAApplication_isCrossAppCCLogNotification(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_isCrossAppCCLogNotification : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isCrossAppCCLogNotification();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_isCrossAppCCLogNotification : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_setStatusBarStyle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_setStatusBarStyle : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAStatusBarStyle arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_setStatusBarStyle : Error processing arguments");
        cobj->setStatusBarStyle(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_setStatusBarStyle : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAApplication_setClearColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_setClearColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4F arg0;
        ok &= jsval_to_cacolor4f(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_setClearColor : Error processing arguments");
        cobj->setClearColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_setClearColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAApplication_setOpenGLView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_setOpenGLView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CCEGLView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CCEGLView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_setOpenGLView : Error processing arguments");
        cobj->setOpenGLView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_setOpenGLView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAApplication_startAnimation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_startAnimation : Invalid Native Object");
    if (argc == 0) {
        cobj->startAnimation();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_startAnimation : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_purgeCachedData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_purgeCachedData : Invalid Native Object");
    if (argc == 0) {
        cobj->purgeCachedData();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_purgeCachedData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_getTotalFrames(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getTotalFrames : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getTotalFrames();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getTotalFrames : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_pause(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_pause : Invalid Native Object");
    if (argc == 0) {
        cobj->pause();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_pause : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_setThemeManager(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_setThemeManager : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAThemeManager* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAThemeManager*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_setThemeManager : Error processing arguments");
        cobj->setThemeManager(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_setThemeManager : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAApplication_restart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_restart : Invalid Native Object");
    if (argc == 0) {
        cobj->restart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_restart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_loadIdentityMatrix(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_loadIdentityMatrix : Invalid Native Object");
    if (argc == 1) {
        CrossApp::MATRIX_STACK_TYPE arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_loadIdentityMatrix : Error processing arguments");
        cobj->loadIdentityMatrix(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_loadIdentityMatrix : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAApplication_isDisplayStats(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_isDisplayStats : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isDisplayStats();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_isDisplayStats : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_setProjection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_setProjection : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAApplication::Projection arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_setProjection : Error processing arguments");
        cobj->setProjection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_setProjection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAApplication_setStatusBarHidden(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_setStatusBarHidden : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_setStatusBarHidden : Error processing arguments");
        cobj->setStatusBarHidden(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_setStatusBarHidden : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAApplication_getTouchDispatcher(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getTouchDispatcher : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CATouchDispatcher* ret = cobj->getTouchDispatcher();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATouchDispatcher>(cx, (CrossApp::CATouchDispatcher*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getTouchDispatcher : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_getZEye(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getZEye : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getZEye();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getZEye : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_setNextDeltaTimeZero(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_setNextDeltaTimeZero : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_setNextDeltaTimeZero : Error processing arguments");
        cobj->setNextDeltaTimeZero(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_setNextDeltaTimeZero : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAApplication_getThemeManager(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getThemeManager : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAThemeManager* ret = cobj->getThemeManager();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAThemeManager>(cx, (CrossApp::CAThemeManager*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getThemeManager : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_popMatrix(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_popMatrix : Invalid Native Object");
    if (argc == 1) {
        CrossApp::MATRIX_STACK_TYPE arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_popMatrix : Error processing arguments");
        cobj->popMatrix(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_popMatrix : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAApplication_getVisibleSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getVisibleSize : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DSize ret = cobj->getVisibleSize();
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getVisibleSize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_setTouchDispatcher(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_setTouchDispatcher : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATouchDispatcher* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouchDispatcher*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_setTouchDispatcher : Error processing arguments");
        cobj->setTouchDispatcher(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_setTouchDispatcher : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAApplication_getScheduler(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getScheduler : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAScheduler* ret = cobj->getScheduler();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAScheduler>(cx, (CrossApp::CAScheduler*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getScheduler : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_getRootWindow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getRootWindow : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAWindow* ret = cobj->getRootWindow();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWindow>(cx, (CrossApp::CAWindow*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getRootWindow : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_getClassTypeInfo(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getClassTypeInfo : Invalid Native Object");
    if (argc == 0) {
        long ret = cobj->getClassTypeInfo();
        jsval jsret = JSVAL_NULL;
        jsret = long_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getClassTypeInfo : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_getAnimationInterval(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getAnimationInterval : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getAnimationInterval();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getAnimationInterval : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_isPaused(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_isPaused : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isPaused();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_isPaused : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_getCurrentNumberOfDraws(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getCurrentNumberOfDraws : Invalid Native Object");
    if (argc == 0) {
        unsigned long ret = cobj->getCurrentNumberOfDraws();
        jsval jsret = JSVAL_NULL;
        jsret = ulong_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getCurrentNumberOfDraws : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_setDisplayStats(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_setDisplayStats : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_setDisplayStats : Error processing arguments");
        cobj->setDisplayStats(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_setDisplayStats : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAApplication_drawScene(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_drawScene : Invalid Native Object");
    if (argc == 0) {
        cobj->drawScene();
        args.rval().setUndefined();
        return true;
    }
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_drawScene : Error processing arguments");
        cobj->drawScene(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_drawScene : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_getActionManager(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_getActionManager : Invalid Native Object");
    if (argc == 0) {
        CrossApp::ActionManager* ret = cobj->getActionManager();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::ActionManager>(cx, (CrossApp::ActionManager*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_getActionManager : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAApplication_pushMatrix(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAApplication_pushMatrix : Invalid Native Object");
    if (argc == 1) {
        CrossApp::MATRIX_STACK_TYPE arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAApplication_pushMatrix : Error processing arguments");
        cobj->pushMatrix(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAApplication_pushMatrix : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAApplication_getApplication(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAApplication* ret = CrossApp::CAApplication::getApplication();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAApplication>(cx, (CrossApp::CAApplication*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAApplication_getApplication : wrong number of arguments");
    return false;
}

void js_CrossApp_CAApplication_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAApplication)", obj);
}
void js_register_crossapp_CAApplication(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAApplication_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAApplication_class->name = "CAApplication";
    jsb_CrossApp_CAApplication_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAApplication_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAApplication_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAApplication_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAApplication_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAApplication_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAApplication_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAApplication_class->finalize = js_CrossApp_CAApplication_finalize;
    jsb_CrossApp_CAApplication_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("onReset", js_crossapp_CAApplication_onReset, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCrossAppCCLogNotification", js_crossapp_CAApplication_setCrossAppCCLogNotification, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getStatusBarOrientation", js_crossapp_CAApplication_getStatusBarOrientation, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNotificationCenter", js_crossapp_CAApplication_getNotificationCenter, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCurrentLanguage", js_crossapp_CAApplication_getCurrentLanguage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImageCache", js_crossapp_CAApplication_getImageCache, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDeltaTime", js_crossapp_CAApplication_getDeltaTime, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setGLDefaultValues", js_crossapp_CAApplication_setGLDefaultValues, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setActionManager", js_crossapp_CAApplication_setActionManager, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlphaBlending", js_crossapp_CAApplication_setAlphaBlending, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("loadMatrix", js_crossapp_CAApplication_loadMatrix, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("updateDraw", js_crossapp_CAApplication_updateDraw, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getKeypadDispatcher", js_crossapp_CAApplication_getKeypadDispatcher, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRenderer", js_crossapp_CAApplication_getRenderer, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getWinSize", js_crossapp_CAApplication_getWinSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("end", js_crossapp_CAApplication_end, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("multiplyMatrix", js_crossapp_CAApplication_multiplyMatrix, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("runWindow", js_crossapp_CAApplication_runWindow, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDefaultValues", js_crossapp_CAApplication_setDefaultValues, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getVisibleOrigin", js_crossapp_CAApplication_getVisibleOrigin, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("mainLoop", js_crossapp_CAApplication_mainLoop, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isDrawing", js_crossapp_CAApplication_isDrawing, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDepthTest", js_crossapp_CAApplication_setDepthTest, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSecondsPerFrame", js_crossapp_CAApplication_getSecondsPerFrame, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("resetMatrixStack", js_crossapp_CAApplication_resetMatrixStack, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMotionManager", js_crossapp_CAApplication_getMotionManager, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getStatusBarStyle", js_crossapp_CAApplication_getStatusBarStyle, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CAApplication_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setScheduler", js_crossapp_CAApplication_setScheduler, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reshapeProjection", js_crossapp_CAApplication_reshapeProjection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMatrix", js_crossapp_CAApplication_getMatrix, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setKeypadDispatcher", js_crossapp_CAApplication_setKeypadDispatcher, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getOpenGLView", js_crossapp_CAApplication_getOpenGLView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setViewport", js_crossapp_CAApplication_setViewport, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("stopAnimation", js_crossapp_CAApplication_stopAnimation, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNumberOfDraws", js_crossapp_CAApplication_getNumberOfDraws, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getProjection", js_crossapp_CAApplication_getProjection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("resume", js_crossapp_CAApplication_resume, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isStatusBarHidden", js_crossapp_CAApplication_isStatusBarHidden, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isNextDeltaTimeZero", js_crossapp_CAApplication_isNextDeltaTimeZero, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageCache", js_crossapp_CAApplication_setImageCache, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isCrossAppCCLogNotification", js_crossapp_CAApplication_isCrossAppCCLogNotification, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setStatusBarStyle", js_crossapp_CAApplication_setStatusBarStyle, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setClearColor", js_crossapp_CAApplication_setClearColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setOpenGLView", js_crossapp_CAApplication_setOpenGLView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("startAnimation", js_crossapp_CAApplication_startAnimation, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("purgeCachedData", js_crossapp_CAApplication_purgeCachedData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTotalFrames", js_crossapp_CAApplication_getTotalFrames, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("pause", js_crossapp_CAApplication_pause, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setThemeManager", js_crossapp_CAApplication_setThemeManager, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("restart", js_crossapp_CAApplication_restart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("loadIdentityMatrix", js_crossapp_CAApplication_loadIdentityMatrix, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isDisplayStats", js_crossapp_CAApplication_isDisplayStats, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setProjection", js_crossapp_CAApplication_setProjection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setStatusBarHidden", js_crossapp_CAApplication_setStatusBarHidden, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTouchDispatcher", js_crossapp_CAApplication_getTouchDispatcher, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getZEye", js_crossapp_CAApplication_getZEye, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setNextDeltaTimeZero", js_crossapp_CAApplication_setNextDeltaTimeZero, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getThemeManager", js_crossapp_CAApplication_getThemeManager, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("popMatrix", js_crossapp_CAApplication_popMatrix, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getVisibleSize", js_crossapp_CAApplication_getVisibleSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTouchDispatcher", js_crossapp_CAApplication_setTouchDispatcher, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getScheduler", js_crossapp_CAApplication_getScheduler, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRootWindow", js_crossapp_CAApplication_getRootWindow, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getClassTypeInfo", js_crossapp_CAApplication_getClassTypeInfo, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAnimationInterval", js_crossapp_CAApplication_getAnimationInterval, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isPaused", js_crossapp_CAApplication_isPaused, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCurrentNumberOfDraws", js_crossapp_CAApplication_getCurrentNumberOfDraws, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDisplayStats", js_crossapp_CAApplication_setDisplayStats, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawScene", js_crossapp_CAApplication_drawScene, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getActionManager", js_crossapp_CAApplication_getActionManager, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("pushMatrix", js_crossapp_CAApplication_pushMatrix, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("getApplication", js_crossapp_CAApplication_getApplication, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAApplication_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CAApplication_class,
        empty_constructor, 0,
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAApplication", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAApplication> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAApplication_class;
        p->proto = jsb_CrossApp_CAApplication_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAButton_class;
JSObject *jsb_CrossApp_CAButton_prototype;

bool js_crossapp_CAButton_setImageSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAButton_setImageSize : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAButton_setImageSize : Error processing arguments");
        cobj->setImageSize(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAButton_setImageSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAButton_interruptTouchState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAButton_interruptTouchState : Invalid Native Object");
    if (argc == 0) {
        cobj->interruptTouchState();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAButton_interruptTouchState : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAButton_addTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAButton_addTarget : Invalid Native Object");
    if (argc == 2) {
        std::function<void ()> arg0;
        CrossApp::CAButton::Event arg1;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAButton_addTarget : Error processing arguments");
        cobj->addTarget(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAButton_addTarget : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAButton_getTitleFont(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAButton_getTitleFont : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAFont& ret = cobj->getTitleFont();
        jsval jsret = JSVAL_NULL;
        jsret = cafont_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAButton_getTitleFont : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAButton_setTitleLabelSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAButton_setTitleLabelSize : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAButton_setTitleLabelSize : Error processing arguments");
        cobj->setTitleLabelSize(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAButton_setTitleLabelSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAButton_setTitleBold(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAButton_setTitleBold : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAButton_setTitleBold : Error processing arguments");
        cobj->setTitleBold(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAButton_setTitleBold : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAButton_setImageOffset(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAButton_setImageOffset : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAButton_setImageOffset : Error processing arguments");
        cobj->setImageOffset(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAButton_setImageOffset : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAButton_setTitleFontSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAButton_setTitleFontSize : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAButton_setTitleFontSize : Error processing arguments");
        cobj->setTitleFontSize(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAButton_setTitleFontSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAButton_setTitleFontName(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAButton_setTitleFontName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAButton_setTitleFontName : Error processing arguments");
        cobj->setTitleFontName(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAButton_setTitleFontName : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAButton_getBackgroundImageForState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAButton_getBackgroundImageForState : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAControl::State arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAButton_getBackgroundImageForState : Error processing arguments");
        CrossApp::CAImage* ret = cobj->getBackgroundImageForState(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAButton_getBackgroundImageForState : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAButton_setImageForState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAButton_setImageForState : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAControl::State arg0;
        CrossApp::CAImage* arg1 = nullptr;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAButton_setImageForState : Error processing arguments");
        cobj->setImageForState(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAButton_setImageForState : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAButton_setTitleFont(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAButton_setTitleFont : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAFont arg0;
        ok &= jsval_to_cafont(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAButton_setTitleFont : Error processing arguments");
        cobj->setTitleFont(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAButton_setTitleFont : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAButton_setTitleColorForState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAButton_setTitleColorForState : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAControl::State arg0;
        CrossApp::CAColor4B arg1;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAButton_setTitleColorForState : Error processing arguments");
        cobj->setTitleColorForState(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAButton_setTitleColorForState : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAButton_setImageColorForState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAButton_setImageColorForState : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAControl::State arg0;
        CrossApp::CAColor4B arg1;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAButton_setImageColorForState : Error processing arguments");
        cobj->setImageColorForState(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAButton_setImageColorForState : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAButton_setBackgroundImageForState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAButton_setBackgroundImageForState : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CAControl::State arg0;
        CrossApp::CAImage* arg1 = nullptr;
        bool arg2;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        arg2 = JS::ToBoolean(args.get(2));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAButton_setBackgroundImageForState : Error processing arguments");
        cobj->setBackgroundImageForState(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAButton_setBackgroundImageForState : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_crossapp_CAButton_setTitleForState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAButton_setTitleForState : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAControl::State arg0;
        std::string arg1;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAButton_setTitleForState : Error processing arguments");
        cobj->setTitleForState(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAButton_setTitleForState : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAButton_getImageForState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAButton_getImageForState : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAControl::State arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAButton_getImageForState : Error processing arguments");
        CrossApp::CAImage* ret = cobj->getImageForState(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAButton_getImageForState : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAButton_setTitleTextAlignment(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAButton_setTitleTextAlignment : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATextAlignment arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAButton_setTitleTextAlignment : Error processing arguments");
        cobj->setTitleTextAlignment(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAButton_setTitleTextAlignment : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAButton_getTitleForState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAButton_getTitleForState : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAControl::State arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAButton_getTitleForState : Error processing arguments");
        const std::string& ret = cobj->getTitleForState(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAButton_getTitleForState : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAButton_setTitleOffset(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAButton_setTitleOffset : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAButton_setTitleOffset : Error processing arguments");
        cobj->setTitleOffset(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAButton_setTitleOffset : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAButton_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAButton::Type arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAButton_create : Error processing arguments");
        CrossApp::CAButton* ret = CrossApp::CAButton::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAButton>(cx, (CrossApp::CAButton*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAButton_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CAButton_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DRect arg0;
        CrossApp::CAButton::Type arg1;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAButton_createWithFrame : Error processing arguments");
        CrossApp::CAButton* ret = CrossApp::CAButton::createWithFrame(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAButton>(cx, (CrossApp::CAButton*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAButton_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CAButton_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DLayout arg0;
        CrossApp::CAButton::Type arg1;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAButton_createWithLayout : Error processing arguments");
        CrossApp::CAButton* ret = CrossApp::CAButton::createWithLayout(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAButton>(cx, (CrossApp::CAButton*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAButton_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CAButton_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DRect arg0;
        CrossApp::CAButton::Type arg1;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAButton_createWithCenter : Error processing arguments");
        CrossApp::CAButton* ret = CrossApp::CAButton::createWithCenter(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAButton>(cx, (CrossApp::CAButton*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAButton_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CAButton_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAButton::Type arg0;
    ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
    JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAButton_constructor : Error processing arguments");
    CrossApp::CAButton* cobj = new (std::nothrow) CrossApp::CAButton(arg0);
    TypeTest<CrossApp::CAButton> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAButton");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAControl_prototype;

void js_CrossApp_CAButton_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAButton)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAButton *nobj = static_cast<CrossApp::CAButton *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAButton(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAButton_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAButton_class->name = "CAButton";
    jsb_CrossApp_CAButton_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAButton_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAButton_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAButton_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAButton_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAButton_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAButton_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAButton_class->finalize = js_CrossApp_CAButton_finalize;
    jsb_CrossApp_CAButton_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setImageSize", js_crossapp_CAButton_setImageSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("interruptTouchState", js_crossapp_CAButton_interruptTouchState, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addTarget", js_crossapp_CAButton_addTarget, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitleFont", js_crossapp_CAButton_getTitleFont, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleLabelSize", js_crossapp_CAButton_setTitleLabelSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleBold", js_crossapp_CAButton_setTitleBold, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageOffset", js_crossapp_CAButton_setImageOffset, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleFontSize", js_crossapp_CAButton_setTitleFontSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleFontName", js_crossapp_CAButton_setTitleFontName, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBackgroundImageForState", js_crossapp_CAButton_getBackgroundImageForState, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageForState", js_crossapp_CAButton_setImageForState, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleFont", js_crossapp_CAButton_setTitleFont, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleColorForState", js_crossapp_CAButton_setTitleColorForState, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageColorForState", js_crossapp_CAButton_setImageColorForState, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundImageForState", js_crossapp_CAButton_setBackgroundImageForState, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleForState", js_crossapp_CAButton_setTitleForState, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImageForState", js_crossapp_CAButton_getImageForState, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleTextAlignment", js_crossapp_CAButton_setTitleTextAlignment, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitleForState", js_crossapp_CAButton_getTitleForState, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleOffset", js_crossapp_CAButton_setTitleOffset, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CAButton_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_crossapp_CAButton_createWithFrame, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CAButton_createWithLayout, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CAButton_createWithCenter, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAButton_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAControl_prototype),
        jsb_CrossApp_CAButton_class,
        js_crossapp_CAButton_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAButton", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAButton> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAButton_class;
        p->proto = jsb_CrossApp_CAButton_prototype;
        p->parentProto = jsb_CrossApp_CAControl_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CASegmentedControl_class;
JSObject *jsb_CrossApp_CASegmentedControl_prototype;

bool js_crossapp_CASegmentedControl_setTitleFontSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_setTitleFontSize : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_setTitleFontSize : Error processing arguments");
        cobj->setTitleFontSize(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_setTitleFontSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASegmentedControl_setSegmentItemBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_setSegmentItemBackgroundImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_setSegmentItemBackgroundImage : Error processing arguments");
        cobj->setSegmentItemBackgroundImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_setSegmentItemBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASegmentedControl_setImageSizeAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_setImageSizeAtIndex : Invalid Native Object");
    if (argc == 2) {
        CrossApp::DSize arg0;
        int arg1 = 0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_setImageSizeAtIndex : Error processing arguments");
        cobj->setImageSizeAtIndex(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_setImageSizeAtIndex : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CASegmentedControl_setSelectedAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_setSelectedAtIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_setSelectedAtIndex : Error processing arguments");
        cobj->setSelectedAtIndex(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_setSelectedAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASegmentedControl_getTitleFont(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_getTitleFont : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAFont& ret = cobj->getTitleFont();
        jsval jsret = JSVAL_NULL;
        jsret = cafont_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_getTitleFont : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASegmentedControl_setImageForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_setImageForSegmentAtIndex : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CAImage* arg0 = nullptr;
        int arg1 = 0;
        CrossApp::CAControl::State arg2;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_setImageForSegmentAtIndex : Error processing arguments");
        cobj->setImageForSegmentAtIndex(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_setImageForSegmentAtIndex : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_crossapp_CASegmentedControl_setImageColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_setImageColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_setImageColor : Error processing arguments");
        cobj->setImageColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_setImageColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASegmentedControl_getSelectedAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_getSelectedAtIndex : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getSelectedAtIndex();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_getSelectedAtIndex : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASegmentedControl_setTitleSelectedColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_setTitleSelectedColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_setTitleSelectedColor : Error processing arguments");
        cobj->setTitleSelectedColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_setTitleSelectedColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASegmentedControl_getNumberOfSegments(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_getNumberOfSegments : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getNumberOfSegments();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_getNumberOfSegments : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASegmentedControl_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASegmentedControl_setTitleColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_setTitleColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_setTitleColor : Error processing arguments");
        cobj->setTitleColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_setTitleColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASegmentedControl_isEnabledForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_isEnabledForSegmentAtIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_isEnabledForSegmentAtIndex : Error processing arguments");
        bool ret = cobj->isEnabledForSegmentAtIndex(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_isEnabledForSegmentAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASegmentedControl_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_setBackgroundImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_setBackgroundImage : Error processing arguments");
        cobj->setBackgroundImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_setBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASegmentedControl_setTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_setTarget : Invalid Native Object");
    if (argc == 1) {
        std::function<void (int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](int larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = int32_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_setTarget : Error processing arguments");
        cobj->setTarget(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_setTarget : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASegmentedControl_setTitleFontName(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_setTitleFontName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_setTitleFontName : Error processing arguments");
        cobj->setTitleFontName(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_setTitleFontName : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASegmentedControl_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASegmentedControl_setTitleFont(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_setTitleFont : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAFont arg0;
        ok &= jsval_to_cafont(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_setTitleFont : Error processing arguments");
        cobj->setTitleFont(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_setTitleFont : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASegmentedControl_getTitleSelectedColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_getTitleSelectedColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getTitleSelectedColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_getTitleSelectedColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASegmentedControl_setImageSelectedColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_setImageSelectedColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_setImageSelectedColor : Error processing arguments");
        cobj->setImageSelectedColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_setImageSelectedColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASegmentedControl_getContentOffsetForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_getContentOffsetForSegmentAtIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_getContentOffsetForSegmentAtIndex : Error processing arguments");
        CrossApp::DSize ret = cobj->getContentOffsetForSegmentAtIndex(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_getContentOffsetForSegmentAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASegmentedControl_getImageSelectedColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_getImageSelectedColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getImageSelectedColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_getImageSelectedColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASegmentedControl_getImageForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_getImageForSegmentAtIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_getImageForSegmentAtIndex : Error processing arguments");
        CrossApp::CAImage* ret = cobj->getImageForSegmentAtIndex(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_getImageForSegmentAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASegmentedControl_setContentOffsetForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_setContentOffsetForSegmentAtIndex : Invalid Native Object");
    if (argc == 2) {
        CrossApp::DSize arg0;
        int arg1 = 0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_setContentOffsetForSegmentAtIndex : Error processing arguments");
        cobj->setContentOffsetForSegmentAtIndex(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_setContentOffsetForSegmentAtIndex : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CASegmentedControl_getTitleColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_getTitleColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getTitleColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_getTitleColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASegmentedControl_setTitleForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_setTitleForSegmentAtIndex : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        int arg1 = 0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_setTitleForSegmentAtIndex : Error processing arguments");
        cobj->setTitleForSegmentAtIndex(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_setTitleForSegmentAtIndex : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CASegmentedControl_setTintColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_setTintColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_setTintColor : Error processing arguments");
        cobj->setTintColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_setTintColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASegmentedControl_getTitleForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_getTitleForSegmentAtIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_getTitleForSegmentAtIndex : Error processing arguments");
        std::string ret = cobj->getTitleForSegmentAtIndex(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_getTitleForSegmentAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASegmentedControl_getImageColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_getImageColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getImageColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_getImageColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASegmentedControl_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASegmentedControl_setEnabledForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASegmentedControl_setEnabledForSegmentAtIndex : Invalid Native Object");
    if (argc == 2) {
        bool arg0;
        int arg1 = 0;
        arg0 = JS::ToBoolean(args.get(0));
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_setEnabledForSegmentAtIndex : Error processing arguments");
        cobj->setEnabledForSegmentAtIndex(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASegmentedControl_setEnabledForSegmentAtIndex : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CASegmentedControl_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_create : Error processing arguments");
        CrossApp::CASegmentedControl* ret = CrossApp::CASegmentedControl::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CASegmentedControl>(cx, (CrossApp::CASegmentedControl*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CASegmentedControl_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CASegmentedControl_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DRect arg0;
        uint32_t arg1 = 0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_createWithFrame : Error processing arguments");
        CrossApp::CASegmentedControl* ret = CrossApp::CASegmentedControl::createWithFrame(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CASegmentedControl>(cx, (CrossApp::CASegmentedControl*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CASegmentedControl_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CASegmentedControl_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DLayout arg0;
        uint32_t arg1 = 0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_createWithLayout : Error processing arguments");
        CrossApp::CASegmentedControl* ret = CrossApp::CASegmentedControl::createWithLayout(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CASegmentedControl>(cx, (CrossApp::CASegmentedControl*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CASegmentedControl_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CASegmentedControl_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DRect arg0;
        uint32_t arg1 = 0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_createWithCenter : Error processing arguments");
        CrossApp::CASegmentedControl* ret = CrossApp::CASegmentedControl::createWithCenter(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CASegmentedControl>(cx, (CrossApp::CASegmentedControl*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CASegmentedControl_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CASegmentedControl_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    uint32_t arg0 = 0;
    ok &= jsval_to_uint32(cx, args.get(0), &arg0);
    JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASegmentedControl_constructor : Error processing arguments");
    CrossApp::CASegmentedControl* cobj = new (std::nothrow) CrossApp::CASegmentedControl(arg0);
    TypeTest<CrossApp::CASegmentedControl> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CASegmentedControl");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAControl_prototype;

void js_CrossApp_CASegmentedControl_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CASegmentedControl)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CASegmentedControl *nobj = static_cast<CrossApp::CASegmentedControl *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CASegmentedControl(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CASegmentedControl_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CASegmentedControl_class->name = "CASegmentedControl";
    jsb_CrossApp_CASegmentedControl_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CASegmentedControl_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CASegmentedControl_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CASegmentedControl_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CASegmentedControl_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CASegmentedControl_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CASegmentedControl_class->convert = JS_ConvertStub;
    jsb_CrossApp_CASegmentedControl_class->finalize = js_CrossApp_CASegmentedControl_finalize;
    jsb_CrossApp_CASegmentedControl_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setTitleFontSize", js_crossapp_CASegmentedControl_setTitleFontSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSegmentItemBackgroundImage", js_crossapp_CASegmentedControl_setSegmentItemBackgroundImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageSizeAtIndex", js_crossapp_CASegmentedControl_setImageSizeAtIndex, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSelectedAtIndex", js_crossapp_CASegmentedControl_setSelectedAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitleFont", js_crossapp_CASegmentedControl_getTitleFont, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageForSegmentAtIndex", js_crossapp_CASegmentedControl_setImageForSegmentAtIndex, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageColor", js_crossapp_CASegmentedControl_setImageColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSelectedAtIndex", js_crossapp_CASegmentedControl_getSelectedAtIndex, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleSelectedColor", js_crossapp_CASegmentedControl_setTitleSelectedColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNumberOfSegments", js_crossapp_CASegmentedControl_getNumberOfSegments, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CASegmentedControl_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleColor", js_crossapp_CASegmentedControl_setTitleColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isEnabledForSegmentAtIndex", js_crossapp_CASegmentedControl_isEnabledForSegmentAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundImage", js_crossapp_CASegmentedControl_setBackgroundImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTarget", js_crossapp_CASegmentedControl_setTarget, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleFontName", js_crossapp_CASegmentedControl_setTitleFontName, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_crossapp_CASegmentedControl_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleFont", js_crossapp_CASegmentedControl_setTitleFont, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitleSelectedColor", js_crossapp_CASegmentedControl_getTitleSelectedColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageSelectedColor", js_crossapp_CASegmentedControl_setImageSelectedColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getContentOffsetForSegmentAtIndex", js_crossapp_CASegmentedControl_getContentOffsetForSegmentAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImageSelectedColor", js_crossapp_CASegmentedControl_getImageSelectedColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImageForSegmentAtIndex", js_crossapp_CASegmentedControl_getImageForSegmentAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setContentOffsetForSegmentAtIndex", js_crossapp_CASegmentedControl_setContentOffsetForSegmentAtIndex, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitleColor", js_crossapp_CASegmentedControl_getTitleColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleForSegmentAtIndex", js_crossapp_CASegmentedControl_setTitleForSegmentAtIndex, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTintColor", js_crossapp_CASegmentedControl_setTintColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitleForSegmentAtIndex", js_crossapp_CASegmentedControl_getTitleForSegmentAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImageColor", js_crossapp_CASegmentedControl_getImageColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_crossapp_CASegmentedControl_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setEnabledForSegmentAtIndex", js_crossapp_CASegmentedControl_setEnabledForSegmentAtIndex, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CASegmentedControl_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_crossapp_CASegmentedControl_createWithFrame, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CASegmentedControl_createWithLayout, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CASegmentedControl_createWithCenter, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CASegmentedControl_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAControl_prototype),
        jsb_CrossApp_CASegmentedControl_class,
        js_crossapp_CASegmentedControl_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CASegmentedControl", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CASegmentedControl> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CASegmentedControl_class;
        p->proto = jsb_CrossApp_CASegmentedControl_prototype;
        p->parentProto = jsb_CrossApp_CAControl_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CABarItem_class;
JSObject *jsb_CrossApp_CABarItem_prototype;

bool js_crossapp_CABarItem_setImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarItem* cobj = (CrossApp::CABarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CABarItem_setImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CABarItem_setImage : Error processing arguments");
        cobj->setImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CABarItem_setImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CABarItem_setTitle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarItem* cobj = (CrossApp::CABarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CABarItem_setTitle : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CABarItem_setTitle : Error processing arguments");
        cobj->setTitle(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CABarItem_setTitle : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CABarItem_getImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarItem* cobj = (CrossApp::CABarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CABarItem_getImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CABarItem_getImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CABarItem_getTitle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarItem* cobj = (CrossApp::CABarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CABarItem_getTitle : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getTitle();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CABarItem_getTitle : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CABarItem_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CABarItem* cobj = new (std::nothrow) CrossApp::CABarItem();
    TypeTest<CrossApp::CABarItem> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CABarItem");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CABarItem_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CABarItem)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CABarItem *nobj = static_cast<CrossApp::CABarItem *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CABarItem(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CABarItem_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CABarItem_class->name = "CABarItem";
    jsb_CrossApp_CABarItem_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CABarItem_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CABarItem_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CABarItem_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CABarItem_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CABarItem_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CABarItem_class->convert = JS_ConvertStub;
    jsb_CrossApp_CABarItem_class->finalize = js_CrossApp_CABarItem_finalize;
    jsb_CrossApp_CABarItem_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setImage", js_crossapp_CABarItem_setImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitle", js_crossapp_CABarItem_setTitle, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImage", js_crossapp_CABarItem_getImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitle", js_crossapp_CABarItem_getTitle, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CABarItem_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CABarItem_class,
        js_crossapp_CABarItem_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CABarItem", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CABarItem> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CABarItem_class;
        p->proto = jsb_CrossApp_CABarItem_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CABarButtonItem_class;
JSObject *jsb_CrossApp_CABarButtonItem_prototype;

bool js_crossapp_CABarButtonItem_getImageOffsetX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CABarButtonItem_getImageOffsetX : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getImageOffsetX();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CABarButtonItem_getImageOffsetX : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CABarButtonItem_getCustomView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CABarButtonItem_getCustomView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getCustomView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CABarButtonItem_getCustomView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CABarButtonItem_setLabelWidth(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CABarButtonItem_setLabelWidth : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CABarButtonItem_setLabelWidth : Error processing arguments");
        cobj->setLabelWidth(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CABarButtonItem_setLabelWidth : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CABarButtonItem_setImageOffsetX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CABarButtonItem_setImageOffsetX : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CABarButtonItem_setImageOffsetX : Error processing arguments");
        cobj->setImageOffsetX(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CABarButtonItem_setImageOffsetX : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CABarButtonItem_initWithCustomView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CABarButtonItem_initWithCustomView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CABarButtonItem_initWithCustomView : Error processing arguments");
        bool ret = cobj->initWithCustomView(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CABarButtonItem_initWithCustomView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CABarButtonItem_setItemWidth(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CABarButtonItem_setItemWidth : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CABarButtonItem_setItemWidth : Error processing arguments");
        cobj->setItemWidth(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CABarButtonItem_setItemWidth : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CABarButtonItem_initWithImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CABarButtonItem_initWithImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CABarButtonItem_initWithImage : Error processing arguments");
        bool ret = cobj->initWithImage(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::CAImage* arg0 = nullptr;
        CrossApp::CAImage* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CABarButtonItem_initWithImage : Error processing arguments");
        bool ret = cobj->initWithImage(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CABarButtonItem_initWithImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CABarButtonItem_getHighlightedImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CABarButtonItem_getHighlightedImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getHighlightedImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CABarButtonItem_getHighlightedImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CABarButtonItem_setLabelOffsetX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CABarButtonItem_setLabelOffsetX : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CABarButtonItem_setLabelOffsetX : Error processing arguments");
        cobj->setLabelOffsetX(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CABarButtonItem_setLabelOffsetX : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CABarButtonItem_setImageWidth(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CABarButtonItem_setImageWidth : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CABarButtonItem_setImageWidth : Error processing arguments");
        cobj->setImageWidth(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CABarButtonItem_setImageWidth : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CABarButtonItem_setHighlightedImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CABarButtonItem_setHighlightedImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CABarButtonItem_setHighlightedImage : Error processing arguments");
        cobj->setHighlightedImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CABarButtonItem_setHighlightedImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CABarButtonItem_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CABarButtonItem_init : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CABarButtonItem_init : Error processing arguments");
        bool ret = cobj->init(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        std::string arg0;
        CrossApp::CAImage* arg1 = nullptr;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CABarButtonItem_init : Error processing arguments");
        bool ret = cobj->init(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 3) {
        std::string arg0;
        CrossApp::CAImage* arg1 = nullptr;
        CrossApp::CAImage* arg2 = nullptr;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(2).isNull()) { arg2 = nullptr; break; }
            if (!args.get(2).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(2).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg2 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg2, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CABarButtonItem_init : Error processing arguments");
        bool ret = cobj->init(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CABarButtonItem_init : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CABarButtonItem_initWithTitle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CABarButtonItem_initWithTitle : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CABarButtonItem_initWithTitle : Error processing arguments");
        bool ret = cobj->initWithTitle(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        std::string arg0;
        CrossApp::CAImage* arg1 = nullptr;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CABarButtonItem_initWithTitle : Error processing arguments");
        bool ret = cobj->initWithTitle(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 3) {
        std::string arg0;
        CrossApp::CAImage* arg1 = nullptr;
        CrossApp::CAImage* arg2 = nullptr;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(2).isNull()) { arg2 = nullptr; break; }
            if (!args.get(2).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(2).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg2 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg2, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CABarButtonItem_initWithTitle : Error processing arguments");
        bool ret = cobj->initWithTitle(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CABarButtonItem_initWithTitle : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CABarButtonItem_setCallbackFunction(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CABarButtonItem_setCallbackFunction : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CABarButtonItem_setCallbackFunction : Error processing arguments");
        cobj->setCallbackFunction(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CABarButtonItem_setCallbackFunction : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CABarButtonItem_getItemWidth(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CABarButtonItem_getItemWidth : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getItemWidth();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CABarButtonItem_getItemWidth : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CABarButtonItem_getImageWidth(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CABarButtonItem_getImageWidth : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getImageWidth();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CABarButtonItem_getImageWidth : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CABarButtonItem_getLabelOffsetX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CABarButtonItem_getLabelOffsetX : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getLabelOffsetX();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CABarButtonItem_getLabelOffsetX : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CABarButtonItem_getCallbackFunction(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CABarButtonItem_getCallbackFunction : Invalid Native Object");
    if (argc == 0) {
        const std::function<void ()>& ret = cobj->getCallbackFunction();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR std::function;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CABarButtonItem_getCallbackFunction : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CABarButtonItem_getLabelWidth(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CABarButtonItem_getLabelWidth : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getLabelWidth();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CABarButtonItem_getLabelWidth : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CABarButtonItem_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 3) {
        std::string arg0;
        CrossApp::CAImage* arg1 = nullptr;
        CrossApp::CAImage* arg2 = nullptr;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(2).isNull()) { arg2 = nullptr; break; }
            if (!args.get(2).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(2).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg2 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg2, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CABarButtonItem_create : Error processing arguments");
        CrossApp::CABarButtonItem* ret = CrossApp::CABarButtonItem::create(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CABarButtonItem>(cx, (CrossApp::CABarButtonItem*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CABarButtonItem_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CABarButtonItem_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CABarButtonItem* cobj = new (std::nothrow) CrossApp::CABarButtonItem();
    TypeTest<CrossApp::CABarButtonItem> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CABarButtonItem");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CABarItem_prototype;

void js_CrossApp_CABarButtonItem_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CABarButtonItem)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CABarButtonItem *nobj = static_cast<CrossApp::CABarButtonItem *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CABarButtonItem(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CABarButtonItem_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CABarButtonItem_class->name = "CABarButtonItem";
    jsb_CrossApp_CABarButtonItem_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CABarButtonItem_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CABarButtonItem_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CABarButtonItem_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CABarButtonItem_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CABarButtonItem_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CABarButtonItem_class->convert = JS_ConvertStub;
    jsb_CrossApp_CABarButtonItem_class->finalize = js_CrossApp_CABarButtonItem_finalize;
    jsb_CrossApp_CABarButtonItem_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getImageOffsetX", js_crossapp_CABarButtonItem_getImageOffsetX, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCustomView", js_crossapp_CABarButtonItem_getCustomView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setLabelWidth", js_crossapp_CABarButtonItem_setLabelWidth, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageOffsetX", js_crossapp_CABarButtonItem_setImageOffsetX, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithCustomView", js_crossapp_CABarButtonItem_initWithCustomView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setItemWidth", js_crossapp_CABarButtonItem_setItemWidth, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithImage", js_crossapp_CABarButtonItem_initWithImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getHighlightedImage", js_crossapp_CABarButtonItem_getHighlightedImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setLabelOffsetX", js_crossapp_CABarButtonItem_setLabelOffsetX, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageWidth", js_crossapp_CABarButtonItem_setImageWidth, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setHighlightedImage", js_crossapp_CABarButtonItem_setHighlightedImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CABarButtonItem_init, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithTitle", js_crossapp_CABarButtonItem_initWithTitle, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCallbackFunction", js_crossapp_CABarButtonItem_setCallbackFunction, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getItemWidth", js_crossapp_CABarButtonItem_getItemWidth, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImageWidth", js_crossapp_CABarButtonItem_getImageWidth, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getLabelOffsetX", js_crossapp_CABarButtonItem_getLabelOffsetX, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCallbackFunction", js_crossapp_CABarButtonItem_getCallbackFunction, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getLabelWidth", js_crossapp_CABarButtonItem_getLabelWidth, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CABarButtonItem_create, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CABarButtonItem_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CABarItem_prototype),
        jsb_CrossApp_CABarButtonItem_class,
        js_crossapp_CABarButtonItem_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CABarButtonItem", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CABarButtonItem> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CABarButtonItem_class;
        p->proto = jsb_CrossApp_CABarButtonItem_prototype;
        p->parentProto = jsb_CrossApp_CABarItem_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CANavigationBarItem_class;
JSObject *jsb_CrossApp_CANavigationBarItem_prototype;

bool js_crossapp_CANavigationBarItem_addLeftButtonItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBarItem_addLeftButtonItem : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CABarButtonItem* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CABarButtonItem*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationBarItem_addLeftButtonItem : Error processing arguments");
        cobj->addLeftButtonItem(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBarItem_addLeftButtonItem : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationBarItem_getRightButtonItems(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBarItem_getRightButtonItems : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAVector<CrossApp::CAObject *>& ret = cobj->getRightButtonItems();
        jsval jsret = JSVAL_NULL;
        jsret = cavector_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBarItem_getRightButtonItems : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationBarItem_setNagigationBarHidden(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBarItem_setNagigationBarHidden : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationBarItem_setNagigationBarHidden : Error processing arguments");
        cobj->setNagigationBarHidden(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBarItem_setNagigationBarHidden : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationBarItem_getTitleViewImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBarItem_getTitleViewImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getTitleViewImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBarItem_getTitleViewImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationBarItem_setShowGoBackButton(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBarItem_setShowGoBackButton : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationBarItem_setShowGoBackButton : Error processing arguments");
        cobj->setShowGoBackButton(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBarItem_setShowGoBackButton : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationBarItem_addRightButtonItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBarItem_addRightButtonItem : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CABarButtonItem* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CABarButtonItem*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationBarItem_addRightButtonItem : Error processing arguments");
        cobj->addRightButtonItem(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBarItem_addRightButtonItem : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationBarItem_getTitleView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBarItem_getTitleView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getTitleView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBarItem_getTitleView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationBarItem_isEnabledShadow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBarItem_isEnabledShadow : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isEnabledShadow();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBarItem_isEnabledShadow : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationBarItem_setTitleView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBarItem_setTitleView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationBarItem_setTitleView : Error processing arguments");
        cobj->setTitleView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBarItem_setTitleView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationBarItem_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBarItem_init : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationBarItem_init : Error processing arguments");
        bool ret = cobj->init(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBarItem_init : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationBarItem_getLeftButtonItems(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBarItem_getLeftButtonItems : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAVector<CrossApp::CAObject *>& ret = cobj->getLeftButtonItems();
        jsval jsret = JSVAL_NULL;
        jsret = cavector_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBarItem_getLeftButtonItems : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationBarItem_setTitleViewImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBarItem_setTitleViewImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationBarItem_setTitleViewImage : Error processing arguments");
        cobj->setTitleViewImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBarItem_setTitleViewImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationBarItem_setEnabledShadow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBarItem_setEnabledShadow : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationBarItem_setEnabledShadow : Error processing arguments");
        cobj->setEnabledShadow(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBarItem_setEnabledShadow : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationBarItem_isNagigationBarHidden(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBarItem_isNagigationBarHidden : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isNagigationBarHidden();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBarItem_isNagigationBarHidden : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationBarItem_isShowGoBackButton(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBarItem_isShowGoBackButton : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isShowGoBackButton();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBarItem_isShowGoBackButton : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationBarItem_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationBarItem_create : Error processing arguments");
        CrossApp::CANavigationBarItem* ret = CrossApp::CANavigationBarItem::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CANavigationBarItem>(cx, (CrossApp::CANavigationBarItem*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CANavigationBarItem_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CANavigationBarItem_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CANavigationBarItem* cobj = new (std::nothrow) CrossApp::CANavigationBarItem();
    TypeTest<CrossApp::CANavigationBarItem> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CANavigationBarItem");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CABarItem_prototype;

void js_CrossApp_CANavigationBarItem_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CANavigationBarItem)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CANavigationBarItem *nobj = static_cast<CrossApp::CANavigationBarItem *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CANavigationBarItem(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CANavigationBarItem_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CANavigationBarItem_class->name = "CANavigationBarItem";
    jsb_CrossApp_CANavigationBarItem_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CANavigationBarItem_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CANavigationBarItem_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CANavigationBarItem_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CANavigationBarItem_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CANavigationBarItem_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CANavigationBarItem_class->convert = JS_ConvertStub;
    jsb_CrossApp_CANavigationBarItem_class->finalize = js_CrossApp_CANavigationBarItem_finalize;
    jsb_CrossApp_CANavigationBarItem_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("addLeftButtonItem", js_crossapp_CANavigationBarItem_addLeftButtonItem, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRightButtonItems", js_crossapp_CANavigationBarItem_getRightButtonItems, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setNagigationBarHidden", js_crossapp_CANavigationBarItem_setNagigationBarHidden, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitleViewImage", js_crossapp_CANavigationBarItem_getTitleViewImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setShowGoBackButton", js_crossapp_CANavigationBarItem_setShowGoBackButton, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addRightButtonItem", js_crossapp_CANavigationBarItem_addRightButtonItem, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitleView", js_crossapp_CANavigationBarItem_getTitleView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isEnabledShadow", js_crossapp_CANavigationBarItem_isEnabledShadow, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleView", js_crossapp_CANavigationBarItem_setTitleView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CANavigationBarItem_init, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getLeftButtonItems", js_crossapp_CANavigationBarItem_getLeftButtonItems, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleViewImage", js_crossapp_CANavigationBarItem_setTitleViewImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setEnabledShadow", js_crossapp_CANavigationBarItem_setEnabledShadow, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isNagigationBarHidden", js_crossapp_CANavigationBarItem_isNagigationBarHidden, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isShowGoBackButton", js_crossapp_CANavigationBarItem_isShowGoBackButton, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CANavigationBarItem_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CANavigationBarItem_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CABarItem_prototype),
        jsb_CrossApp_CANavigationBarItem_class,
        js_crossapp_CANavigationBarItem_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CANavigationBarItem", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CANavigationBarItem> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CANavigationBarItem_class;
        p->proto = jsb_CrossApp_CANavigationBarItem_prototype;
        p->parentProto = jsb_CrossApp_CABarItem_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CATabBarItem_class;
JSObject *jsb_CrossApp_CATabBarItem_prototype;

bool js_crossapp_CATabBarItem_getBadgeValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarItem* cobj = (CrossApp::CATabBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarItem_getBadgeValue : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getBadgeValue();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarItem_getBadgeValue : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBarItem_setSelectedImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarItem* cobj = (CrossApp::CATabBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarItem_setSelectedImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBarItem_setSelectedImage : Error processing arguments");
        cobj->setSelectedImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarItem_setSelectedImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBarItem_getSelectedImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarItem* cobj = (CrossApp::CATabBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarItem_getSelectedImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getSelectedImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarItem_getSelectedImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBarItem_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarItem* cobj = (CrossApp::CATabBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarItem_init : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        CrossApp::CAImage* arg1 = nullptr;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBarItem_init : Error processing arguments");
        bool ret = cobj->init(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 3) {
        std::string arg0;
        CrossApp::CAImage* arg1 = nullptr;
        CrossApp::CAImage* arg2 = nullptr;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(2).isNull()) { arg2 = nullptr; break; }
            if (!args.get(2).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(2).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg2 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg2, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBarItem_init : Error processing arguments");
        bool ret = cobj->init(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarItem_init : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CATabBarItem_setBadgeValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarItem* cobj = (CrossApp::CATabBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarItem_setBadgeValue : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBarItem_setBadgeValue : Error processing arguments");
        cobj->setBadgeValue(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarItem_setBadgeValue : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBarItem_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        std::string arg0;
        CrossApp::CAImage* arg1 = nullptr;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBarItem_create : Error processing arguments");
        CrossApp::CATabBarItem* ret = CrossApp::CATabBarItem::create(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBarItem>(cx, (CrossApp::CATabBarItem*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 3) {
        std::string arg0;
        CrossApp::CAImage* arg1 = nullptr;
        CrossApp::CAImage* arg2 = nullptr;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(2).isNull()) { arg2 = nullptr; break; }
            if (!args.get(2).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(2).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg2 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg2, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBarItem_create : Error processing arguments");
        CrossApp::CATabBarItem* ret = CrossApp::CATabBarItem::create(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBarItem>(cx, (CrossApp::CATabBarItem*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CATabBarItem_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CATabBarItem_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CATabBarItem* cobj = new (std::nothrow) CrossApp::CATabBarItem();
    TypeTest<CrossApp::CATabBarItem> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CATabBarItem");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CABarItem_prototype;

void js_CrossApp_CATabBarItem_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CATabBarItem)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATabBarItem *nobj = static_cast<CrossApp::CATabBarItem *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CATabBarItem(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATabBarItem_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATabBarItem_class->name = "CATabBarItem";
    jsb_CrossApp_CATabBarItem_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATabBarItem_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATabBarItem_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATabBarItem_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATabBarItem_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATabBarItem_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATabBarItem_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATabBarItem_class->finalize = js_CrossApp_CATabBarItem_finalize;
    jsb_CrossApp_CATabBarItem_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getBadgeValue", js_crossapp_CATabBarItem_getBadgeValue, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSelectedImage", js_crossapp_CATabBarItem_setSelectedImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSelectedImage", js_crossapp_CATabBarItem_getSelectedImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CATabBarItem_init, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBadgeValue", js_crossapp_CATabBarItem_setBadgeValue, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CATabBarItem_create, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CATabBarItem_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CABarItem_prototype),
        jsb_CrossApp_CATabBarItem_class,
        js_crossapp_CATabBarItem_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CATabBarItem", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATabBarItem> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATabBarItem_class;
        p->proto = jsb_CrossApp_CATabBarItem_prototype;
        p->parentProto = jsb_CrossApp_CABarItem_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CABar_class;
JSObject *jsb_CrossApp_CABar_prototype;

bool js_crossapp_CABar_get_bottom_clearance(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CABar_get_bottom_clearance : Error processing arguments");
        int ret = CrossApp::CABar::get_bottom_clearance(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CABar_get_bottom_clearance : wrong number of arguments");
    return false;
}
bool js_crossapp_CABar_get_top_clearance(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CABar_get_top_clearance : Error processing arguments");
        int ret = CrossApp::CABar::get_top_clearance(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CABar_get_top_clearance : wrong number of arguments");
    return false;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CABar_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CABar)", obj);
}
void js_register_crossapp_CABar(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CABar_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CABar_class->name = "CABar";
    jsb_CrossApp_CABar_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CABar_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CABar_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CABar_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CABar_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CABar_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CABar_class->convert = JS_ConvertStub;
    jsb_CrossApp_CABar_class->finalize = js_CrossApp_CABar_finalize;
    jsb_CrossApp_CABar_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("get_bottom_clearance", js_crossapp_CABar_get_bottom_clearance, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("get_top_clearance", js_crossapp_CABar_get_top_clearance, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CABar_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CABar_class,
        dummy_constructor<CrossApp::CABar>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CABar", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CABar> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CABar_class;
        p->proto = jsb_CrossApp_CABar_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CANavigationBar_class;
JSObject *jsb_CrossApp_CANavigationBar_prototype;

bool js_crossapp_CANavigationBar_onPopViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBar_onPopViewController : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationBar_onPopViewController : Error processing arguments");
        cobj->onPopViewController(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBar_onPopViewController : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationBar_getGoBackBarButtonItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBar_getGoBackBarButtonItem : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CABarButtonItem* ret = cobj->getGoBackBarButtonItem();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CABarButtonItem>(cx, (CrossApp::CABarButtonItem*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBar_getGoBackBarButtonItem : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationBar_setTitleColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBar_setTitleColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationBar_setTitleColor : Error processing arguments");
        cobj->setTitleColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBar_setTitleColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationBar_isEnabledShadow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBar_isEnabledShadow : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isEnabledShadow();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBar_isEnabledShadow : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationBar_setButtonColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBar_setButtonColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationBar_setButtonColor : Error processing arguments");
        cobj->setButtonColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBar_setButtonColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationBar_setEnabledShadow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBar_setEnabledShadow : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationBar_setEnabledShadow : Error processing arguments");
        cobj->setEnabledShadow(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBar_setEnabledShadow : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationBar_getTitleColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBar_getTitleColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getTitleColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBar_getTitleColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationBar_setItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBar_setItem : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CANavigationBarItem* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CANavigationBarItem*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationBar_setItem : Error processing arguments");
        cobj->setItem(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBar_setItem : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationBar_getBackgroundView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBar_getBackgroundView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getBackgroundView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBar_getBackgroundView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationBar_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBar_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBar_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationBar_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBar_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBar_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationBar_getItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBar_getItem : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CANavigationBarItem* ret = cobj->getItem();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CANavigationBarItem>(cx, (CrossApp::CANavigationBarItem*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBar_getItem : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationBar_getButtonColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBar_getButtonColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getButtonColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBar_getButtonColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationBar_updateClearance(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBar_updateClearance : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationBar_updateClearance : Error processing arguments");
        cobj->updateClearance(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBar_updateClearance : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationBar_setGoBackBarButtonItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBar_setGoBackBarButtonItem : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CABarButtonItem* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CABarButtonItem*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationBar_setGoBackBarButtonItem : Error processing arguments");
        cobj->setGoBackBarButtonItem(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBar_setGoBackBarButtonItem : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationBar_setBackgroundView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationBar_setBackgroundView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationBar_setBackgroundView : Error processing arguments");
        cobj->setBackgroundView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationBar_setBackgroundView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationBar_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationBar_createWithFrame : Error processing arguments");
        CrossApp::CANavigationBar* ret = CrossApp::CANavigationBar::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CANavigationBar>(cx, (CrossApp::CANavigationBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::DRect arg0;
        int arg1 = 0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationBar_createWithFrame : Error processing arguments");
        CrossApp::CANavigationBar* ret = CrossApp::CANavigationBar::createWithFrame(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CANavigationBar>(cx, (CrossApp::CANavigationBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CANavigationBar_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CANavigationBar_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationBar_createWithLayout : Error processing arguments");
        CrossApp::CANavigationBar* ret = CrossApp::CANavigationBar::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CANavigationBar>(cx, (CrossApp::CANavigationBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::DLayout arg0;
        int arg1 = 0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationBar_createWithLayout : Error processing arguments");
        CrossApp::CANavigationBar* ret = CrossApp::CANavigationBar::createWithLayout(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CANavigationBar>(cx, (CrossApp::CANavigationBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CANavigationBar_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CANavigationBar_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationBar_createWithCenter : Error processing arguments");
        CrossApp::CANavigationBar* ret = CrossApp::CANavigationBar::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CANavigationBar>(cx, (CrossApp::CANavigationBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::DRect arg0;
        int arg1 = 0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationBar_createWithCenter : Error processing arguments");
        CrossApp::CANavigationBar* ret = CrossApp::CANavigationBar::createWithCenter(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CANavigationBar>(cx, (CrossApp::CANavigationBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CANavigationBar_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CANavigationBar_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CANavigationBar* cobj = new (std::nothrow) CrossApp::CANavigationBar();
    TypeTest<CrossApp::CANavigationBar> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CANavigationBar");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CABar_prototype;

void js_CrossApp_CANavigationBar_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CANavigationBar)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CANavigationBar *nobj = static_cast<CrossApp::CANavigationBar *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CANavigationBar(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CANavigationBar_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CANavigationBar_class->name = "CANavigationBar";
    jsb_CrossApp_CANavigationBar_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CANavigationBar_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CANavigationBar_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CANavigationBar_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CANavigationBar_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CANavigationBar_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CANavigationBar_class->convert = JS_ConvertStub;
    jsb_CrossApp_CANavigationBar_class->finalize = js_CrossApp_CANavigationBar_finalize;
    jsb_CrossApp_CANavigationBar_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("onPopViewController", js_crossapp_CANavigationBar_onPopViewController, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getGoBackBarButtonItem", js_crossapp_CANavigationBar_getGoBackBarButtonItem, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleColor", js_crossapp_CANavigationBar_setTitleColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isEnabledShadow", js_crossapp_CANavigationBar_isEnabledShadow, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setButtonColor", js_crossapp_CANavigationBar_setButtonColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setEnabledShadow", js_crossapp_CANavigationBar_setEnabledShadow, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitleColor", js_crossapp_CANavigationBar_getTitleColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setItem", js_crossapp_CANavigationBar_setItem, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBackgroundView", js_crossapp_CANavigationBar_getBackgroundView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_crossapp_CANavigationBar_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_crossapp_CANavigationBar_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getItem", js_crossapp_CANavigationBar_getItem, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getButtonColor", js_crossapp_CANavigationBar_getButtonColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("updateClearance", js_crossapp_CANavigationBar_updateClearance, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setGoBackBarButtonItem", js_crossapp_CANavigationBar_setGoBackBarButtonItem, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundView", js_crossapp_CANavigationBar_setBackgroundView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_crossapp_CANavigationBar_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CANavigationBar_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CANavigationBar_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CANavigationBar_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CABar_prototype),
        jsb_CrossApp_CANavigationBar_class,
        js_crossapp_CANavigationBar_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CANavigationBar", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CANavigationBar> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CANavigationBar_class;
        p->proto = jsb_CrossApp_CANavigationBar_prototype;
        p->parentProto = jsb_CrossApp_CABar_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CATabBar_class;
JSObject *jsb_CrossApp_CATabBar_prototype;

bool js_crossapp_CATabBar_setSelectedBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_setSelectedBackgroundImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBar_setSelectedBackgroundImage : Error processing arguments");
        cobj->setSelectedBackgroundImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_setSelectedBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBar_onSelectedItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_onSelectedItem : Invalid Native Object");
    if (argc == 1) {
        std::function<void (CrossApp::CATabBarItem *, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::CATabBarItem* larg0, unsigned int larg1) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            do {
		            if (larg0) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBarItem>(cx, (CrossApp::CATabBarItem*)larg0);
		                largv[0] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[0] = JSVAL_NULL;
		            }
		        } while (0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBar_onSelectedItem : Error processing arguments");
        cobj->onSelectedItem(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_onSelectedItem : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBar_getItemSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_getItemSize : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DSize& ret = cobj->getItemSize();
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_getItemSize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBar_replaceItemAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_replaceItemAtIndex : Invalid Native Object");
    if (argc == 2) {
        unsigned long arg0 = 0;
        CrossApp::CATabBarItem* arg1 = nullptr;
        ok &= jsval_to_ulong(cx, args.get(0), &arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CATabBarItem*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBar_replaceItemAtIndex : Error processing arguments");
        cobj->replaceItemAtIndex(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_replaceItemAtIndex : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CATabBar_getContentViewFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_getContentViewFrame : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DRect ret = cobj->getContentViewFrame();
        jsval jsret = JSVAL_NULL;
        jsret = drect_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_getContentViewFrame : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBar_getTitleBoldForSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_getTitleBoldForSelected : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->getTitleBoldForSelected();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_getTitleBoldForSelected : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBar_setSelectedAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_setSelectedAtIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBar_setSelectedAtIndex : Error processing arguments");
        cobj->setSelectedAtIndex(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_setSelectedAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBar_showSelectedIndicator(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_showSelectedIndicator : Invalid Native Object");
    if (argc == 0) {
        cobj->showSelectedIndicator();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_showSelectedIndicator : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBar_addForbidSelectedAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_addForbidSelectedAtIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBar_addForbidSelectedAtIndex : Error processing arguments");
        cobj->addForbidSelectedAtIndex(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_addForbidSelectedAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBar_setTitleBoldForSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_setTitleBoldForSelected : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBar_setTitleBoldForSelected : Error processing arguments");
        cobj->setTitleBoldForSelected(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_setTitleBoldForSelected : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBar_getSelectedIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_getSelectedIndex : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getSelectedIndex();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_getSelectedIndex : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBar_setSelectedIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_setSelectedIndicatorImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBar_setSelectedIndicatorImage : Error processing arguments");
        cobj->setSelectedIndicatorImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_setSelectedIndicatorImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBar_getTitleColorForNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_getTitleColorForNormal : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getTitleColorForNormal();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_getTitleColorForNormal : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBar_getTitleColorForSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_getTitleColorForSelected : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getTitleColorForSelected();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_getTitleColorForSelected : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBar_setItems(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_setItems : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAVector<CrossApp::CATabBarItem *> arg0;
        ok &= jsval_to_cavector(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBar_setItems : Error processing arguments");
        cobj->setItems(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_setItems : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBar_getBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_getBackgroundImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getBackgroundImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_getBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBar_getItems(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_getItems : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAVector<CrossApp::CATabBarItem *>& ret = cobj->getItems();
        jsval jsret = JSVAL_NULL;
        jsret = cavector_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_getItems : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBar_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_setBackgroundImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBar_setBackgroundImage : Error processing arguments");
        cobj->setBackgroundImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_setBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBar_onClickToForbidSelectedItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_onClickToForbidSelectedItem : Invalid Native Object");
    if (argc == 1) {
        std::function<void (CrossApp::CATabBarItem *, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::CATabBarItem* larg0, unsigned int larg1) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            do {
		            if (larg0) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBarItem>(cx, (CrossApp::CATabBarItem*)larg0);
		                largv[0] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[0] = JSVAL_NULL;
		            }
		        } while (0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBar_onClickToForbidSelectedItem : Error processing arguments");
        cobj->onClickToForbidSelectedItem(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_onClickToForbidSelectedItem : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBar_setTitleColorForSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_setTitleColorForSelected : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBar_setTitleColorForSelected : Error processing arguments");
        cobj->setTitleColorForSelected(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_setTitleColorForSelected : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBar_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBar_getForbidSelectedIndexs(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_getForbidSelectedIndexs : Invalid Native Object");
    if (argc == 0) {
        std::set<int, std::less<int>, std::allocator<int> > ret = cobj->getForbidSelectedIndexs();
        jsval jsret = JSVAL_NULL;
        jsret = std_set_int_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_getForbidSelectedIndexs : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBar_getSelectedIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_getSelectedIndicatorImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getSelectedIndicatorImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_getSelectedIndicatorImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBar_updateClearance(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_updateClearance : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBar_updateClearance : Error processing arguments");
        cobj->updateClearance(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_updateClearance : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBar_setTitleColorForNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_setTitleColorForNormal : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBar_setTitleColorForNormal : Error processing arguments");
        cobj->setTitleColorForNormal(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_setTitleColorForNormal : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBar_getSelectedBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_getSelectedBackgroundImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getSelectedBackgroundImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_getSelectedBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBar_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBar_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBar_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBar_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBar_createWithFrame : Error processing arguments");
        CrossApp::CATabBar* ret = CrossApp::CATabBar::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBar>(cx, (CrossApp::CATabBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::DRect arg0;
        int arg1 = 0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBar_createWithFrame : Error processing arguments");
        CrossApp::CATabBar* ret = CrossApp::CATabBar::createWithFrame(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBar>(cx, (CrossApp::CATabBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 3) {
        CrossApp::DRect arg0;
        int arg1 = 0;
        CrossApp::CATabBar::VerticalAlignment arg2;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBar_createWithFrame : Error processing arguments");
        CrossApp::CATabBar* ret = CrossApp::CATabBar::createWithFrame(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBar>(cx, (CrossApp::CATabBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CATabBar_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CATabBar_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBar_createWithLayout : Error processing arguments");
        CrossApp::CATabBar* ret = CrossApp::CATabBar::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBar>(cx, (CrossApp::CATabBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::DLayout arg0;
        int arg1 = 0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBar_createWithLayout : Error processing arguments");
        CrossApp::CATabBar* ret = CrossApp::CATabBar::createWithLayout(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBar>(cx, (CrossApp::CATabBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 3) {
        CrossApp::DLayout arg0;
        int arg1 = 0;
        CrossApp::CATabBar::VerticalAlignment arg2;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBar_createWithLayout : Error processing arguments");
        CrossApp::CATabBar* ret = CrossApp::CATabBar::createWithLayout(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBar>(cx, (CrossApp::CATabBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CATabBar_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CATabBar_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBar_createWithCenter : Error processing arguments");
        CrossApp::CATabBar* ret = CrossApp::CATabBar::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBar>(cx, (CrossApp::CATabBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::DRect arg0;
        int arg1 = 0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBar_createWithCenter : Error processing arguments");
        CrossApp::CATabBar* ret = CrossApp::CATabBar::createWithCenter(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBar>(cx, (CrossApp::CATabBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 3) {
        CrossApp::DRect arg0;
        int arg1 = 0;
        CrossApp::CATabBar::VerticalAlignment arg2;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBar_createWithCenter : Error processing arguments");
        CrossApp::CATabBar* ret = CrossApp::CATabBar::createWithCenter(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBar>(cx, (CrossApp::CATabBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CATabBar_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CATabBar_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CATabBar* cobj = new (std::nothrow) CrossApp::CATabBar();
    TypeTest<CrossApp::CATabBar> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CATabBar");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CABar_prototype;

void js_CrossApp_CATabBar_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CATabBar)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATabBar *nobj = static_cast<CrossApp::CATabBar *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CATabBar(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATabBar_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATabBar_class->name = "CATabBar";
    jsb_CrossApp_CATabBar_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATabBar_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATabBar_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATabBar_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATabBar_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATabBar_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATabBar_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATabBar_class->finalize = js_CrossApp_CATabBar_finalize;
    jsb_CrossApp_CATabBar_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setSelectedBackgroundImage", js_crossapp_CATabBar_setSelectedBackgroundImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onSelectedItem", js_crossapp_CATabBar_onSelectedItem, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getItemSize", js_crossapp_CATabBar_getItemSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("replaceItemAtIndex", js_crossapp_CATabBar_replaceItemAtIndex, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getContentViewFrame", js_crossapp_CATabBar_getContentViewFrame, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitleBoldForSelected", js_crossapp_CATabBar_getTitleBoldForSelected, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSelectedAtIndex", js_crossapp_CATabBar_setSelectedAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("showSelectedIndicator", js_crossapp_CATabBar_showSelectedIndicator, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addForbidSelectedAtIndex", js_crossapp_CATabBar_addForbidSelectedAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleBoldForSelected", js_crossapp_CATabBar_setTitleBoldForSelected, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSelectedIndex", js_crossapp_CATabBar_getSelectedIndex, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSelectedIndicatorImage", js_crossapp_CATabBar_setSelectedIndicatorImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitleColorForNormal", js_crossapp_CATabBar_getTitleColorForNormal, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitleColorForSelected", js_crossapp_CATabBar_getTitleColorForSelected, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setItems", js_crossapp_CATabBar_setItems, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBackgroundImage", js_crossapp_CATabBar_getBackgroundImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getItems", js_crossapp_CATabBar_getItems, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundImage", js_crossapp_CATabBar_setBackgroundImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onClickToForbidSelectedItem", js_crossapp_CATabBar_onClickToForbidSelectedItem, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleColorForSelected", js_crossapp_CATabBar_setTitleColorForSelected, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_crossapp_CATabBar_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getForbidSelectedIndexs", js_crossapp_CATabBar_getForbidSelectedIndexs, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSelectedIndicatorImage", js_crossapp_CATabBar_getSelectedIndicatorImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("updateClearance", js_crossapp_CATabBar_updateClearance, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleColorForNormal", js_crossapp_CATabBar_setTitleColorForNormal, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSelectedBackgroundImage", js_crossapp_CATabBar_getSelectedBackgroundImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_crossapp_CATabBar_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_crossapp_CATabBar_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CATabBar_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CATabBar_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CATabBar_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CABar_prototype),
        jsb_CrossApp_CATabBar_class,
        js_crossapp_CATabBar_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CATabBar", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATabBar> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATabBar_class;
        p->proto = jsb_CrossApp_CATabBar_prototype;
        p->parentProto = jsb_CrossApp_CABar_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAActivityIndicatorView_class;
JSObject *jsb_CrossApp_CAActivityIndicatorView_prototype;

bool js_crossapp_CAActivityIndicatorView_onCancel(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAActivityIndicatorView_onCancel : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAActivityIndicatorView_onCancel : Error processing arguments");
        cobj->onCancel(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAActivityIndicatorView_onCancel : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAActivityIndicatorView_setCycleTime(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAActivityIndicatorView_setCycleTime : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAActivityIndicatorView_setCycleTime : Error processing arguments");
        cobj->setCycleTime(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAActivityIndicatorView_setCycleTime : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAActivityIndicatorView_onEnter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAActivityIndicatorView_onEnter : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnter();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAActivityIndicatorView_onEnter : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAActivityIndicatorView_onExit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAActivityIndicatorView_onExit : Invalid Native Object");
    if (argc == 0) {
        cobj->onExit();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAActivityIndicatorView_onExit : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAActivityIndicatorView_getActivityBackView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAActivityIndicatorView_getActivityBackView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getActivityBackView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAActivityIndicatorView_getActivityBackView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAActivityIndicatorView_getActivityIndicatorView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAActivityIndicatorView_getActivityIndicatorView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getActivityIndicatorView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAActivityIndicatorView_getActivityIndicatorView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAActivityIndicatorView_setTimesOneCycle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAActivityIndicatorView_setTimesOneCycle : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAActivityIndicatorView_setTimesOneCycle : Error processing arguments");
        cobj->setTimesOneCycle(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAActivityIndicatorView_setTimesOneCycle : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAActivityIndicatorView_getColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAActivityIndicatorView_getColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAActivityIndicatorView_getColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAActivityIndicatorView_setActivityBackView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAActivityIndicatorView_setActivityBackView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAActivityIndicatorView_setActivityBackView : Error processing arguments");
        cobj->setActivityBackView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAActivityIndicatorView_setActivityBackView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAActivityIndicatorView_setStyle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAActivityIndicatorView_setStyle : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAActivityIndicatorView::Style arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAActivityIndicatorView_setStyle : Error processing arguments");
        cobj->setStyle(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAActivityIndicatorView_setStyle : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAActivityIndicatorView_setLoadingMinTime(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAActivityIndicatorView_setLoadingMinTime : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAActivityIndicatorView_setLoadingMinTime : Error processing arguments");
        cobj->setLoadingMinTime(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAActivityIndicatorView_setLoadingMinTime : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAActivityIndicatorView_setActivityIndicatorOffset(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAActivityIndicatorView_setActivityIndicatorOffset : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAActivityIndicatorView_setActivityIndicatorOffset : Error processing arguments");
        cobj->setActivityIndicatorOffset(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAActivityIndicatorView_setActivityIndicatorOffset : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAActivityIndicatorView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAActivityIndicatorView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAActivityIndicatorView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAActivityIndicatorView_isAnimating(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAActivityIndicatorView_isAnimating : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAnimating();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAActivityIndicatorView_isAnimating : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAActivityIndicatorView_setActivityIndicatorView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAActivityIndicatorView_setActivityIndicatorView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAActivityIndicatorView_setActivityIndicatorView : Error processing arguments");
        cobj->setActivityIndicatorView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAActivityIndicatorView_setActivityIndicatorView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAActivityIndicatorView_getLoadingMinTime(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAActivityIndicatorView_getLoadingMinTime : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getLoadingMinTime();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAActivityIndicatorView_getLoadingMinTime : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAActivityIndicatorView_startAnimating(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAActivityIndicatorView_startAnimating : Invalid Native Object");
    if (argc == 0) {
        cobj->startAnimating();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAActivityIndicatorView_startAnimating : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAActivityIndicatorView_stopAnimating(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAActivityIndicatorView_stopAnimating : Invalid Native Object");
    if (argc == 0) {
        cobj->stopAnimating();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAActivityIndicatorView_stopAnimating : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAActivityIndicatorView_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAActivityIndicatorView* ret = CrossApp::CAActivityIndicatorView::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAActivityIndicatorView>(cx, (CrossApp::CAActivityIndicatorView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAActivityIndicatorView_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CAActivityIndicatorView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAActivityIndicatorView_createWithFrame : Error processing arguments");
        CrossApp::CAActivityIndicatorView* ret = CrossApp::CAActivityIndicatorView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAActivityIndicatorView>(cx, (CrossApp::CAActivityIndicatorView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAActivityIndicatorView_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CAActivityIndicatorView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAActivityIndicatorView_createWithLayout : Error processing arguments");
        CrossApp::CAActivityIndicatorView* ret = CrossApp::CAActivityIndicatorView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAActivityIndicatorView>(cx, (CrossApp::CAActivityIndicatorView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAActivityIndicatorView_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CAActivityIndicatorView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAActivityIndicatorView_createWithCenter : Error processing arguments");
        CrossApp::CAActivityIndicatorView* ret = CrossApp::CAActivityIndicatorView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAActivityIndicatorView>(cx, (CrossApp::CAActivityIndicatorView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAActivityIndicatorView_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CAActivityIndicatorView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAActivityIndicatorView* cobj = new (std::nothrow) CrossApp::CAActivityIndicatorView();
    TypeTest<CrossApp::CAActivityIndicatorView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAActivityIndicatorView");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAActivityIndicatorView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAActivityIndicatorView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAActivityIndicatorView *nobj = static_cast<CrossApp::CAActivityIndicatorView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAActivityIndicatorView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAActivityIndicatorView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAActivityIndicatorView_class->name = "CAActivityIndicatorView";
    jsb_CrossApp_CAActivityIndicatorView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAActivityIndicatorView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAActivityIndicatorView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAActivityIndicatorView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAActivityIndicatorView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAActivityIndicatorView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAActivityIndicatorView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAActivityIndicatorView_class->finalize = js_CrossApp_CAActivityIndicatorView_finalize;
    jsb_CrossApp_CAActivityIndicatorView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("onCancel", js_crossapp_CAActivityIndicatorView_onCancel, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCycleTime", js_crossapp_CAActivityIndicatorView_setCycleTime, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnter", js_crossapp_CAActivityIndicatorView_onEnter, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExit", js_crossapp_CAActivityIndicatorView_onExit, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getActivityBackView", js_crossapp_CAActivityIndicatorView_getActivityBackView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getActivityIndicatorView", js_crossapp_CAActivityIndicatorView_getActivityIndicatorView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTimesOneCycle", js_crossapp_CAActivityIndicatorView_setTimesOneCycle, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getColor", js_crossapp_CAActivityIndicatorView_getColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setActivityBackView", js_crossapp_CAActivityIndicatorView_setActivityBackView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setStyle", js_crossapp_CAActivityIndicatorView_setStyle, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setLoadingMinTime", js_crossapp_CAActivityIndicatorView_setLoadingMinTime, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setActivityIndicatorOffset", js_crossapp_CAActivityIndicatorView_setActivityIndicatorOffset, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CAActivityIndicatorView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAnimating", js_crossapp_CAActivityIndicatorView_isAnimating, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setActivityIndicatorView", js_crossapp_CAActivityIndicatorView_setActivityIndicatorView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getLoadingMinTime", js_crossapp_CAActivityIndicatorView_getLoadingMinTime, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("startAnimating", js_crossapp_CAActivityIndicatorView_startAnimating, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("stopAnimating", js_crossapp_CAActivityIndicatorView_stopAnimating, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CAActivityIndicatorView_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_crossapp_CAActivityIndicatorView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CAActivityIndicatorView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CAActivityIndicatorView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAActivityIndicatorView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAActivityIndicatorView_class,
        js_crossapp_CAActivityIndicatorView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAActivityIndicatorView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAActivityIndicatorView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAActivityIndicatorView_class;
        p->proto = jsb_CrossApp_CAActivityIndicatorView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAPullToRefreshView_class;
JSObject *jsb_CrossApp_CAPullToRefreshView_prototype;

bool js_crossapp_CAPullToRefreshView_getLoadingView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPullToRefreshView_getLoadingView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAActivityIndicatorView* ret = cobj->getLoadingView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAActivityIndicatorView>(cx, (CrossApp::CAActivityIndicatorView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPullToRefreshView_getLoadingView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPullToRefreshView_setPullToRefreshText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPullToRefreshView_setPullToRefreshText : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPullToRefreshView_setPullToRefreshText : Error processing arguments");
        cobj->setPullToRefreshText(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPullToRefreshView_setPullToRefreshText : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPullToRefreshView_getType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPullToRefreshView_getType : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getType();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPullToRefreshView_getType : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPullToRefreshView_getRefreshingText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPullToRefreshView_getRefreshingText : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getRefreshingText();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPullToRefreshView_getRefreshingText : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPullToRefreshView_setLoadingView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPullToRefreshView_setLoadingView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAActivityIndicatorView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAActivityIndicatorView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPullToRefreshView_setLoadingView : Error processing arguments");
        cobj->setLoadingView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPullToRefreshView_setLoadingView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPullToRefreshView_setRefreshingText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPullToRefreshView_setRefreshingText : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPullToRefreshView_setRefreshingText : Error processing arguments");
        cobj->setRefreshingText(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPullToRefreshView_setRefreshingText : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPullToRefreshView_getLabelColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPullToRefreshView_getLabelColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getLabelColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPullToRefreshView_getLabelColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPullToRefreshView_getPullToImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPullToRefreshView_getPullToImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getPullToImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPullToRefreshView_getPullToImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPullToRefreshView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPullToRefreshView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPullToRefreshView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPullToRefreshView_getReleaseToRefreshText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPullToRefreshView_getReleaseToRefreshText : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getReleaseToRefreshText();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPullToRefreshView_getReleaseToRefreshText : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPullToRefreshView_setLabelColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPullToRefreshView_setLabelColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPullToRefreshView_setLabelColor : Error processing arguments");
        cobj->setLabelColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPullToRefreshView_setLabelColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPullToRefreshView_setReleaseToRefreshText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPullToRefreshView_setReleaseToRefreshText : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPullToRefreshView_setReleaseToRefreshText : Error processing arguments");
        cobj->setReleaseToRefreshText(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPullToRefreshView_setReleaseToRefreshText : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPullToRefreshView_setPullToImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPullToRefreshView_setPullToImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPullToRefreshView_setPullToImage : Error processing arguments");
        cobj->setPullToImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPullToRefreshView_setPullToImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPullToRefreshView_getPullToRefreshText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPullToRefreshView_getPullToRefreshText : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getPullToRefreshText();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPullToRefreshView_getPullToRefreshText : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPullToRefreshView_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAPullToRefreshView::Type arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPullToRefreshView_create : Error processing arguments");
        CrossApp::CAPullToRefreshView* ret = CrossApp::CAPullToRefreshView::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPullToRefreshView>(cx, (CrossApp::CAPullToRefreshView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAPullToRefreshView_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CAPullToRefreshView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAPullToRefreshView::Type arg0;
    ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
    JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPullToRefreshView_constructor : Error processing arguments");
    CrossApp::CAPullToRefreshView* cobj = new (std::nothrow) CrossApp::CAPullToRefreshView(arg0);
    TypeTest<CrossApp::CAPullToRefreshView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAPullToRefreshView");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAPullToRefreshView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAPullToRefreshView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAPullToRefreshView *nobj = static_cast<CrossApp::CAPullToRefreshView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAPullToRefreshView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAPullToRefreshView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAPullToRefreshView_class->name = "CAPullToRefreshView";
    jsb_CrossApp_CAPullToRefreshView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAPullToRefreshView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAPullToRefreshView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAPullToRefreshView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAPullToRefreshView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAPullToRefreshView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAPullToRefreshView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAPullToRefreshView_class->finalize = js_CrossApp_CAPullToRefreshView_finalize;
    jsb_CrossApp_CAPullToRefreshView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getLoadingView", js_crossapp_CAPullToRefreshView_getLoadingView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPullToRefreshText", js_crossapp_CAPullToRefreshView_setPullToRefreshText, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getType", js_crossapp_CAPullToRefreshView_getType, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRefreshingText", js_crossapp_CAPullToRefreshView_getRefreshingText, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setLoadingView", js_crossapp_CAPullToRefreshView_setLoadingView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setRefreshingText", js_crossapp_CAPullToRefreshView_setRefreshingText, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getLabelColor", js_crossapp_CAPullToRefreshView_getLabelColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPullToImage", js_crossapp_CAPullToRefreshView_getPullToImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CAPullToRefreshView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getReleaseToRefreshText", js_crossapp_CAPullToRefreshView_getReleaseToRefreshText, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setLabelColor", js_crossapp_CAPullToRefreshView_setLabelColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setReleaseToRefreshText", js_crossapp_CAPullToRefreshView_setReleaseToRefreshText, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPullToImage", js_crossapp_CAPullToRefreshView_setPullToImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPullToRefreshText", js_crossapp_CAPullToRefreshView_getPullToRefreshText, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CAPullToRefreshView_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAPullToRefreshView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAPullToRefreshView_class,
        js_crossapp_CAPullToRefreshView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAPullToRefreshView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAPullToRefreshView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAPullToRefreshView_class;
        p->proto = jsb_CrossApp_CAPullToRefreshView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAScrollView_class;
JSObject *jsb_CrossApp_CAScrollView_prototype;

bool js_crossapp_CAScrollView_setBounceVertical(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_setBounceVertical : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_setBounceVertical : Error processing arguments");
        cobj->setBounceVertical(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_setBounceVertical : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_isTracking(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_isTracking : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isTracking();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_isTracking : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScrollView_startDeaccelerateScroll(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_startDeaccelerateScroll : Invalid Native Object");
    if (argc == 0) {
        cobj->startDeaccelerateScroll();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_startDeaccelerateScroll : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScrollView_isBounceVertical(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_isBounceVertical : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isBounceVertical();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_isBounceVertical : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScrollView_isShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_isShowsScrollIndicators : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isShowsScrollIndicators();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_isShowsScrollIndicators : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScrollView_setShowsHorizontalScrollIndicator(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_setShowsHorizontalScrollIndicator : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_setShowsHorizontalScrollIndicator : Error processing arguments");
        cobj->setShowsHorizontalScrollIndicator(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_setShowsHorizontalScrollIndicator : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_setTouchEnabledAtSubviews(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_setTouchEnabledAtSubviews : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_setTouchEnabledAtSubviews : Error processing arguments");
        cobj->setTouchEnabledAtSubviews(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_setTouchEnabledAtSubviews : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_getZoomScale(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_getZoomScale : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getZoomScale();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_getZoomScale : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScrollView_endFooterRefresh(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_endFooterRefresh : Invalid Native Object");
    if (argc == 0) {
        cobj->endFooterRefresh();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_endFooterRefresh : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScrollView_onTouchUpWithoutMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_onTouchUpWithoutMoved : Invalid Native Object");
    if (argc == 1) {
        std::function<void (CrossApp::DPoint)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::DPoint larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = dpoint_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_onTouchUpWithoutMoved : Error processing arguments");
        cobj->onTouchUpWithoutMoved(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_onTouchUpWithoutMoved : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_setFooterRefreshView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_setFooterRefreshView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAPullToRefreshView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAPullToRefreshView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_setFooterRefreshView : Error processing arguments");
        cobj->setFooterRefreshView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_setFooterRefreshView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_getHeaderRefreshView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_getHeaderRefreshView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAPullToRefreshView* ret = cobj->getHeaderRefreshView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPullToRefreshView>(cx, (CrossApp::CAPullToRefreshView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_getHeaderRefreshView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScrollView_setShowsVerticalScrollIndicator(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_setShowsVerticalScrollIndicator : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_setShowsVerticalScrollIndicator : Error processing arguments");
        cobj->setShowsVerticalScrollIndicator(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_setShowsVerticalScrollIndicator : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_setContentOffset(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_setContentOffset : Invalid Native Object");
    if (argc == 2) {
        CrossApp::DPoint arg0;
        bool arg1;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_setContentOffset : Error processing arguments");
        cobj->setContentOffset(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_setContentOffset : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAScrollView_isBounceHorizontal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_isBounceHorizontal : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isBounceHorizontal();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_isBounceHorizontal : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScrollView_isShowsVerticalScrollIndicator(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_isShowsVerticalScrollIndicator : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isShowsVerticalScrollIndicator();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_isShowsVerticalScrollIndicator : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScrollView_startPullToHeaderRefreshView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_startPullToHeaderRefreshView : Invalid Native Object");
    if (argc == 0) {
        cobj->startPullToHeaderRefreshView();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_startPullToHeaderRefreshView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScrollView_isTouchEnabledAtSubviews(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_isTouchEnabledAtSubviews : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isTouchEnabledAtSubviews();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_isTouchEnabledAtSubviews : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScrollView_getMultitouchGesture(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_getMultitouchGesture : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getMultitouchGesture();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_getMultitouchGesture : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScrollView_setHeaderRefreshView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_setHeaderRefreshView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAPullToRefreshView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAPullToRefreshView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_setHeaderRefreshView : Error processing arguments");
        cobj->setHeaderRefreshView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_setHeaderRefreshView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_onDidEndDragging(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_onDidEndDragging : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_onDidEndDragging : Error processing arguments");
        cobj->onDidEndDragging(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_onDidEndDragging : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_onHeaderBeginRefreshing(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_onHeaderBeginRefreshing : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_onHeaderBeginRefreshing : Error processing arguments");
        cobj->onHeaderBeginRefreshing(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_onHeaderBeginRefreshing : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_setBounces(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_setBounces : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_setBounces : Error processing arguments");
        cobj->setBounces(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_setBounces : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_getContentOffset(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_getContentOffset : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DPoint ret = cobj->getContentOffset();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_getContentOffset : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScrollView_isDecelerating(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_isDecelerating : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isDecelerating();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_isDecelerating : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScrollView_onWillBeginDragging(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_onWillBeginDragging : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_onWillBeginDragging : Error processing arguments");
        cobj->onWillBeginDragging(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_onWillBeginDragging : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_setShowsScrollIndicators : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_setShowsScrollIndicators : Error processing arguments");
        cobj->setShowsScrollIndicators(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_setShowsScrollIndicators : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_onFooterBeginRefreshing(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_onFooterBeginRefreshing : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_onFooterBeginRefreshing : Error processing arguments");
        cobj->onFooterBeginRefreshing(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_onFooterBeginRefreshing : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_isBounces(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_isBounces : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isBounces();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_isBounces : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScrollView_setViewSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_setViewSize : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_setViewSize : Error processing arguments");
        cobj->setViewSize(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_setViewSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_getMaximumZoomScale(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_getMaximumZoomScale : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getMaximumZoomScale();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_getMaximumZoomScale : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScrollView_getViewSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_getViewSize : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DSize& ret = cobj->getViewSize();
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_getViewSize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScrollView_setMaximumZoomScale(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_setMaximumZoomScale : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_setMaximumZoomScale : Error processing arguments");
        cobj->setMaximumZoomScale(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_setMaximumZoomScale : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_isZooming(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_isZooming : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isZooming();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_isZooming : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScrollView_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_setBackgroundImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_setBackgroundImage : Error processing arguments");
        cobj->setBackgroundImage(arg0);
        args.rval().setUndefined();
        return true;
    }
    if (argc == 2) {
        CrossApp::CAImage* arg0 = nullptr;
        bool arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_setBackgroundImage : Error processing arguments");
        cobj->setBackgroundImage(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_setBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_onStopMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_onStopMoved : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_onStopMoved : Error processing arguments");
        cobj->onStopMoved(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_onStopMoved : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_isShowsHorizontalScrollIndicator(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_isShowsHorizontalScrollIndicator : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isShowsHorizontalScrollIndicator();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_isShowsHorizontalScrollIndicator : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScrollView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_switchPCMode : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_switchPCMode : Error processing arguments");
        cobj->switchPCMode(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_switchPCMode : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_onDragging(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_onDragging : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_onDragging : Error processing arguments");
        cobj->onDragging(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_onDragging : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_getFooterRefreshView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_getFooterRefreshView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAPullToRefreshView* ret = cobj->getFooterRefreshView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPullToRefreshView>(cx, (CrossApp::CAPullToRefreshView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_getFooterRefreshView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScrollView_stopDeaccelerateScroll(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_stopDeaccelerateScroll : Invalid Native Object");
    if (argc == 0) {
        cobj->stopDeaccelerateScroll();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_stopDeaccelerateScroll : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScrollView_onDidMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_onDidMoved : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_onDidMoved : Error processing arguments");
        cobj->onDidMoved(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_onDidMoved : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_onDidZoom(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_onDidZoom : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_onDidZoom : Error processing arguments");
        cobj->onDidZoom(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_onDidZoom : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_setMinimumZoomScale(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_setMinimumZoomScale : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_setMinimumZoomScale : Error processing arguments");
        cobj->setMinimumZoomScale(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_setMinimumZoomScale : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_endHeaderRefresh(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_endHeaderRefresh : Invalid Native Object");
    if (argc == 0) {
        cobj->endHeaderRefresh();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_endHeaderRefresh : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScrollView_getMinimumZoomScale(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_getMinimumZoomScale : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getMinimumZoomScale();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_getMinimumZoomScale : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAScrollView_setBounceHorizontal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_setBounceHorizontal : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_setBounceHorizontal : Error processing arguments");
        cobj->setBounceHorizontal(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_setBounceHorizontal : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_setZoomScale(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_setZoomScale : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_setZoomScale : Error processing arguments");
        cobj->setZoomScale(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_setZoomScale : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_setMultitouchGesture(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAScrollView_setMultitouchGesture : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAScrollView::MultitouchGesture arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_setMultitouchGesture : Error processing arguments");
        cobj->setMultitouchGesture(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAScrollView_setMultitouchGesture : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAScrollView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_createWithFrame : Error processing arguments");
        CrossApp::CAScrollView* ret = CrossApp::CAScrollView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAScrollView>(cx, (CrossApp::CAScrollView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAScrollView_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CAScrollView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_createWithLayout : Error processing arguments");
        CrossApp::CAScrollView* ret = CrossApp::CAScrollView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAScrollView>(cx, (CrossApp::CAScrollView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAScrollView_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CAScrollView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScrollView_createWithCenter : Error processing arguments");
        CrossApp::CAScrollView* ret = CrossApp::CAScrollView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAScrollView>(cx, (CrossApp::CAScrollView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAScrollView_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CAScrollView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAScrollView* cobj = new (std::nothrow) CrossApp::CAScrollView();
    TypeTest<CrossApp::CAScrollView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAScrollView");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAScrollView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAScrollView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAScrollView *nobj = static_cast<CrossApp::CAScrollView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAScrollView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAScrollView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAScrollView_class->name = "CAScrollView";
    jsb_CrossApp_CAScrollView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAScrollView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAScrollView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAScrollView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAScrollView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAScrollView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAScrollView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAScrollView_class->finalize = js_CrossApp_CAScrollView_finalize;
    jsb_CrossApp_CAScrollView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setBounceVertical", js_crossapp_CAScrollView_setBounceVertical, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isTracking", js_crossapp_CAScrollView_isTracking, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("startDeaccelerateScroll", js_crossapp_CAScrollView_startDeaccelerateScroll, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isBounceVertical", js_crossapp_CAScrollView_isBounceVertical, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isShowsScrollIndicators", js_crossapp_CAScrollView_isShowsScrollIndicators, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setShowsHorizontalScrollIndicator", js_crossapp_CAScrollView_setShowsHorizontalScrollIndicator, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTouchEnabledAtSubviews", js_crossapp_CAScrollView_setTouchEnabledAtSubviews, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getZoomScale", js_crossapp_CAScrollView_getZoomScale, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("endFooterRefresh", js_crossapp_CAScrollView_endFooterRefresh, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onTouchUpWithoutMoved", js_crossapp_CAScrollView_onTouchUpWithoutMoved, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFooterRefreshView", js_crossapp_CAScrollView_setFooterRefreshView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getHeaderRefreshView", js_crossapp_CAScrollView_getHeaderRefreshView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setShowsVerticalScrollIndicator", js_crossapp_CAScrollView_setShowsVerticalScrollIndicator, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setContentOffset", js_crossapp_CAScrollView_setContentOffset, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isBounceHorizontal", js_crossapp_CAScrollView_isBounceHorizontal, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isShowsVerticalScrollIndicator", js_crossapp_CAScrollView_isShowsVerticalScrollIndicator, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("startPullToHeaderRefreshView", js_crossapp_CAScrollView_startPullToHeaderRefreshView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isTouchEnabledAtSubviews", js_crossapp_CAScrollView_isTouchEnabledAtSubviews, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMultitouchGesture", js_crossapp_CAScrollView_getMultitouchGesture, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setHeaderRefreshView", js_crossapp_CAScrollView_setHeaderRefreshView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDidEndDragging", js_crossapp_CAScrollView_onDidEndDragging, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onHeaderBeginRefreshing", js_crossapp_CAScrollView_onHeaderBeginRefreshing, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBounces", js_crossapp_CAScrollView_setBounces, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getContentOffset", js_crossapp_CAScrollView_getContentOffset, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isDecelerating", js_crossapp_CAScrollView_isDecelerating, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onWillBeginDragging", js_crossapp_CAScrollView_onWillBeginDragging, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setShowsScrollIndicators", js_crossapp_CAScrollView_setShowsScrollIndicators, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onFooterBeginRefreshing", js_crossapp_CAScrollView_onFooterBeginRefreshing, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isBounces", js_crossapp_CAScrollView_isBounces, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setViewSize", js_crossapp_CAScrollView_setViewSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMaximumZoomScale", js_crossapp_CAScrollView_getMaximumZoomScale, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getViewSize", js_crossapp_CAScrollView_getViewSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMaximumZoomScale", js_crossapp_CAScrollView_setMaximumZoomScale, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isZooming", js_crossapp_CAScrollView_isZooming, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundImage", js_crossapp_CAScrollView_setBackgroundImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onStopMoved", js_crossapp_CAScrollView_onStopMoved, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isShowsHorizontalScrollIndicator", js_crossapp_CAScrollView_isShowsHorizontalScrollIndicator, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("switchPCMode", js_crossapp_CAScrollView_switchPCMode, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDragging", js_crossapp_CAScrollView_onDragging, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFooterRefreshView", js_crossapp_CAScrollView_getFooterRefreshView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("stopDeaccelerateScroll", js_crossapp_CAScrollView_stopDeaccelerateScroll, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDidMoved", js_crossapp_CAScrollView_onDidMoved, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDidZoom", js_crossapp_CAScrollView_onDidZoom, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMinimumZoomScale", js_crossapp_CAScrollView_setMinimumZoomScale, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("endHeaderRefresh", js_crossapp_CAScrollView_endHeaderRefresh, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMinimumZoomScale", js_crossapp_CAScrollView_getMinimumZoomScale, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBounceHorizontal", js_crossapp_CAScrollView_setBounceHorizontal, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setZoomScale", js_crossapp_CAScrollView_setZoomScale, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMultitouchGesture", js_crossapp_CAScrollView_setMultitouchGesture, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_crossapp_CAScrollView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CAScrollView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CAScrollView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAScrollView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAScrollView_class,
        js_crossapp_CAScrollView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAScrollView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAScrollView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAScrollView_class;
        p->proto = jsb_CrossApp_CAScrollView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CAPageView_class;
JSObject *jsb_CAPageView_prototype;

bool js_crossapp_CAPageView_setSpacing(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CAPageView* cobj = (CAPageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageView_setSpacing : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageView_setSpacing : Error processing arguments");
        cobj->setSpacing(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageView_setSpacing : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPageView_onEndTurning(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CAPageView* cobj = (CAPageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageView_onEndTurning : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageView_onEndTurning : Error processing arguments");
        cobj->onEndTurning(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageView_onEndTurning : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPageView_setViews(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CAPageView* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CAPageView *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageView_setViews : Invalid Native Object");
    do {
        if (argc == 1) {
            CrossApp::CAVector<CrossApp::CAView *> arg0;
            ok &= jsval_to_cavector(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            cobj->setViews(arg0);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 1) {
            CrossApp::CADeque<CrossApp::CAView *> arg0;
            ok &= jsval_to_cadeque(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            cobj->setViews(arg0);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CAPageView_setViews : wrong number of arguments");
    return false;
}
bool js_crossapp_CAPageView_onBeginTurning(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CAPageView* cobj = (CAPageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageView_onBeginTurning : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageView_onBeginTurning : Error processing arguments");
        cobj->onBeginTurning(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageView_onBeginTurning : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPageView_getOrientation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CAPageView* cobj = (CAPageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageView_getOrientation : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getOrientation();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageView_getOrientation : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPageView_getSpacing(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CAPageView* cobj = (CAPageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageView_getSpacing : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getSpacing();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageView_getSpacing : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPageView_getCurrPage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CAPageView* cobj = (CAPageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageView_getCurrPage : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getCurrPage();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageView_getCurrPage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPageView_setCurrPage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CAPageView* cobj = (CAPageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageView_setCurrPage : Invalid Native Object");
    if (argc == 2) {
        int arg0 = 0;
        bool arg1;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageView_setCurrPage : Error processing arguments");
        cobj->setCurrPage(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }
    if (argc == 3) {
        int arg0 = 0;
        bool arg1;
        bool arg2;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        arg1 = JS::ToBoolean(args.get(1));
        arg2 = JS::ToBoolean(args.get(2));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageView_setCurrPage : Error processing arguments");
        cobj->setCurrPage(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageView_setCurrPage : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAPageView_getPageCount(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CAPageView* cobj = (CAPageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageView_getPageCount : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getPageCount();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageView_getPageCount : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPageView_onDidSelectedPageAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CAPageView* cobj = (CAPageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageView_onDidSelectedPageAtIndex : Invalid Native Object");
    if (argc == 1) {
        std::function<void (unsigned int, CrossApp::DPoint)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0, CrossApp::DPoint larg1) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            largv[1] = dpoint_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageView_onDidSelectedPageAtIndex : Error processing arguments");
        cobj->onDidSelectedPageAtIndex(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageView_onDidSelectedPageAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPageView_getSubViewAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CAPageView* cobj = (CAPageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageView_getSubViewAtIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageView_getSubViewAtIndex : Error processing arguments");
        CrossApp::CAView* ret = cobj->getSubViewAtIndex(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageView_getSubViewAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPageView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DRect arg0;
        CAPageView::Orientation arg1;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageView_createWithFrame : Error processing arguments");
        CAPageView* ret = CAPageView::createWithFrame(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CAPageView>(cx, (CAPageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAPageView_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CAPageView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DLayout arg0;
        CAPageView::Orientation arg1;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageView_createWithLayout : Error processing arguments");
        CAPageView* ret = CAPageView::createWithLayout(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CAPageView>(cx, (CAPageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAPageView_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CAPageView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DRect arg0;
        CAPageView::Orientation arg1;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageView_createWithCenter : Error processing arguments");
        CAPageView* ret = CAPageView::createWithCenter(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CAPageView>(cx, (CAPageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAPageView_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CAPageView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CAPageView::Orientation arg0;
    ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
    JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageView_constructor : Error processing arguments");
    CAPageView* cobj = new (std::nothrow) CAPageView(arg0);
    TypeTest<CAPageView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CAPageView");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAScrollView_prototype;

void js_CAPageView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAPageView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CAPageView *nobj = static_cast<CAPageView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAPageView(JSContext *cx, JS::HandleObject global) {
    jsb_CAPageView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CAPageView_class->name = "CAPageView";
    jsb_CAPageView_class->addProperty = JS_PropertyStub;
    jsb_CAPageView_class->delProperty = JS_DeletePropertyStub;
    jsb_CAPageView_class->getProperty = JS_PropertyStub;
    jsb_CAPageView_class->setProperty = JS_StrictPropertyStub;
    jsb_CAPageView_class->enumerate = JS_EnumerateStub;
    jsb_CAPageView_class->resolve = JS_ResolveStub;
    jsb_CAPageView_class->convert = JS_ConvertStub;
    jsb_CAPageView_class->finalize = js_CAPageView_finalize;
    jsb_CAPageView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setSpacing", js_crossapp_CAPageView_setSpacing, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEndTurning", js_crossapp_CAPageView_onEndTurning, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setViews", js_crossapp_CAPageView_setViews, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onBeginTurning", js_crossapp_CAPageView_onBeginTurning, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getOrientation", js_crossapp_CAPageView_getOrientation, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSpacing", js_crossapp_CAPageView_getSpacing, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCurrPage", js_crossapp_CAPageView_getCurrPage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCurrPage", js_crossapp_CAPageView_setCurrPage, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPageCount", js_crossapp_CAPageView_getPageCount, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDidSelectedPageAtIndex", js_crossapp_CAPageView_onDidSelectedPageAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSubViewAtIndex", js_crossapp_CAPageView_getSubViewAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_crossapp_CAPageView_createWithFrame, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CAPageView_createWithLayout, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CAPageView_createWithCenter, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CAPageView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAScrollView_prototype),
        jsb_CAPageView_class,
        js_crossapp_CAPageView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAPageView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CAPageView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CAPageView_class;
        p->proto = jsb_CAPageView_prototype;
        p->parentProto = jsb_CrossApp_CAScrollView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAViewController_class;
JSObject *jsb_CrossApp_CAViewController_prototype;

bool js_crossapp_CAViewController_getView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_getView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_getView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAViewController_dismissModalViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_dismissModalViewController : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAViewController_dismissModalViewController : Error processing arguments");
        cobj->dismissModalViewController(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_dismissModalViewController : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAViewController_getTabBarItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_getTabBarItem : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CATabBarItem* ret = cobj->getTabBarItem();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBarItem>(cx, (CrossApp::CATabBarItem*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_getTabBarItem : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAViewController_setTabBarItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_setTabBarItem : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATabBarItem* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATabBarItem*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAViewController_setTabBarItem : Error processing arguments");
        cobj->setTabBarItem(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_setTabBarItem : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAViewController_getViewWithID(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_getViewWithID : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAViewController_getViewWithID : Error processing arguments");
        CrossApp::CAView* ret = cobj->getViewWithID(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_getViewWithID : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAViewController_setTitle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_setTitle : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAViewController_setTitle : Error processing arguments");
        cobj->setTitle(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_setTitle : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAViewController_parser(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_parser : Invalid Native Object");
    if (argc == 0) {
        cobj->parser();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_parser : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAViewController_isViewRunning(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_isViewRunning : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isViewRunning();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_isViewRunning : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAViewController_viewDidLoad(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_viewDidLoad : Invalid Native Object");
    if (argc == 0) {
        cobj->viewDidLoad();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_viewDidLoad : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAViewController_presentModalViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_presentModalViewController : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAViewController* arg0 = nullptr;
        bool arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAViewController_presentModalViewController : Error processing arguments");
        cobj->presentModalViewController(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_presentModalViewController : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAViewController_setViewVisibleTrue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_setViewVisibleTrue : Invalid Native Object");
    if (argc == 0) {
        cobj->setViewVisibleTrue();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_setViewVisibleTrue : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAViewController_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAViewController_getNavigationBarItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_getNavigationBarItem : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CANavigationBarItem* ret = cobj->getNavigationBarItem();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CANavigationBarItem>(cx, (CrossApp::CANavigationBarItem*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_getNavigationBarItem : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAViewController_removeViewFromSuperview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_removeViewFromSuperview : Invalid Native Object");
    if (argc == 0) {
        cobj->removeViewFromSuperview();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_removeViewFromSuperview : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAViewController_viewOnSizeTransitionDidChanged(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_viewOnSizeTransitionDidChanged : Invalid Native Object");
    if (argc == 0) {
        cobj->viewOnSizeTransitionDidChanged();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_viewOnSizeTransitionDidChanged : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAViewController_viewDidDisappear(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_viewDidDisappear : Invalid Native Object");
    if (argc == 0) {
        cobj->viewDidDisappear();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_viewDidDisappear : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAViewController_viewOnExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_viewOnExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->viewOnExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_viewOnExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAViewController_getNibName(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_getNibName : Invalid Native Object");
    if (argc == 0) {
        std::string ret = cobj->getNibName();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_getNibName : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAViewController_setNavigationBarItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_setNavigationBarItem : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CANavigationBarItem* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CANavigationBarItem*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAViewController_setNavigationBarItem : Error processing arguments");
        cobj->setNavigationBarItem(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_setNavigationBarItem : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAViewController_setViewVisibleFalse(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_setViewVisibleFalse : Invalid Native Object");
    if (argc == 0) {
        cobj->setViewVisibleFalse();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_setViewVisibleFalse : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAViewController_getTitle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_getTitle : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getTitle();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_getTitle : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAViewController_viewDidAppear(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_viewDidAppear : Invalid Native Object");
    if (argc == 0) {
        cobj->viewDidAppear();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_viewDidAppear : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAViewController_viewOnEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_viewOnEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->viewOnEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_viewOnEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAViewController_setView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_setView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAViewController_setView : Error processing arguments");
        cobj->setView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_setView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAViewController_addViewFromSuperview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_addViewFromSuperview : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAViewController_addViewFromSuperview : Error processing arguments");
        cobj->addViewFromSuperview(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_addViewFromSuperview : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAViewController_viewSizeDidChanged(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_viewSizeDidChanged : Invalid Native Object");
    if (argc == 0) {
        cobj->viewSizeDidChanged();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_viewSizeDidChanged : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAViewController_getNavigationController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_getNavigationController : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CANavigationController* ret = cobj->getNavigationController();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CANavigationController>(cx, (CrossApp::CANavigationController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_getNavigationController : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAViewController_getTabBarController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_getTabBarController : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CATabBarController* ret = cobj->getTabBarController();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBarController>(cx, (CrossApp::CATabBarController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_getTabBarController : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAViewController_viewDidUnload(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_viewDidUnload : Invalid Native Object");
    if (argc == 0) {
        cobj->viewDidUnload();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_viewDidUnload : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAViewController_getModalViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAViewController_getModalViewController : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAViewController* ret = cobj->getModalViewController();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAViewController>(cx, (CrossApp::CAViewController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAViewController_getModalViewController : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAViewController_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAViewController* cobj = new (std::nothrow) CrossApp::CAViewController();
    TypeTest<CrossApp::CAViewController> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAViewController");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_CAViewController_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::CAViewController *nobj = new (std::nothrow) CrossApp::CAViewController();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAViewController");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAViewController_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAViewController)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAViewController *nobj = static_cast<CrossApp::CAViewController *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_CAViewController(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAViewController_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAViewController_class->name = "CAViewController";
    jsb_CrossApp_CAViewController_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAViewController_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAViewController_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAViewController_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAViewController_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAViewController_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAViewController_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAViewController_class->finalize = js_CrossApp_CAViewController_finalize;
    jsb_CrossApp_CAViewController_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getView", js_crossapp_CAViewController_getView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("dismissModalViewController", js_crossapp_CAViewController_dismissModalViewController, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTabBarItem", js_crossapp_CAViewController_getTabBarItem, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTabBarItem", js_crossapp_CAViewController_setTabBarItem, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getViewWithID", js_crossapp_CAViewController_getViewWithID, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitle", js_crossapp_CAViewController_setTitle, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("parser", js_crossapp_CAViewController_parser, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isViewRunning", js_crossapp_CAViewController_isViewRunning, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("viewDidLoad", js_crossapp_CAViewController_viewDidLoad, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("presentModalViewController", js_crossapp_CAViewController_presentModalViewController, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setViewVisibleTrue", js_crossapp_CAViewController_setViewVisibleTrue, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CAViewController_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNavigationBarItem", js_crossapp_CAViewController_getNavigationBarItem, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeViewFromSuperview", js_crossapp_CAViewController_removeViewFromSuperview, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("viewOnSizeTransitionDidChanged", js_crossapp_CAViewController_viewOnSizeTransitionDidChanged, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("viewDidDisappear", js_crossapp_CAViewController_viewDidDisappear, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("viewOnExitTransitionDidStart", js_crossapp_CAViewController_viewOnExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNibName", js_crossapp_CAViewController_getNibName, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setNavigationBarItem", js_crossapp_CAViewController_setNavigationBarItem, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setViewVisibleFalse", js_crossapp_CAViewController_setViewVisibleFalse, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitle", js_crossapp_CAViewController_getTitle, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("viewDidAppear", js_crossapp_CAViewController_viewDidAppear, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("viewOnEnterTransitionDidFinish", js_crossapp_CAViewController_viewOnEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setView", js_crossapp_CAViewController_setView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addViewFromSuperview", js_crossapp_CAViewController_addViewFromSuperview, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("viewSizeDidChanged", js_crossapp_CAViewController_viewSizeDidChanged, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNavigationController", js_crossapp_CAViewController_getNavigationController, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTabBarController", js_crossapp_CAViewController_getTabBarController, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("viewDidUnload", js_crossapp_CAViewController_viewDidUnload, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getModalViewController", js_crossapp_CAViewController_getModalViewController, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_CAViewController_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAViewController_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAViewController_class,
        js_crossapp_CAViewController_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAViewController", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAViewController> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAViewController_class;
        p->proto = jsb_CrossApp_CAViewController_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.CAViewController.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_CANavigationController_class;
JSObject *jsb_CrossApp_CANavigationController_prototype;

bool js_crossapp_CANavigationController_setNavigationBarTitleColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_setNavigationBarTitleColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationController_setNavigationBarTitleColor : Error processing arguments");
        cobj->setNavigationBarTitleColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_setNavigationBarTitleColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationController_popFirstViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_popFirstViewController : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAViewController* ret = cobj->popFirstViewController();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAViewController>(cx, (CrossApp::CAViewController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_popFirstViewController : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationController_updateItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_updateItem : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAViewController* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationController_updateItem : Error processing arguments");
        cobj->updateItem(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_updateItem : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationController_getBackViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_getBackViewController : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAViewController* ret = cobj->getBackViewController();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAViewController>(cx, (CrossApp::CAViewController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_getBackViewController : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationController_getViewControllerCount(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_getViewControllerCount : Invalid Native Object");
    if (argc == 0) {
        unsigned long ret = cobj->getViewControllerCount();
        jsval jsret = JSVAL_NULL;
        jsret = ulong_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_getViewControllerCount : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationController_setNavigationBarHidden(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_setNavigationBarHidden : Invalid Native Object");
    if (argc == 2) {
        bool arg0;
        bool arg1;
        arg0 = JS::ToBoolean(args.get(0));
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationController_setNavigationBarHidden : Error processing arguments");
        cobj->setNavigationBarHidden(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_setNavigationBarHidden : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CANavigationController_setNavigationBarEnabledShadow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_setNavigationBarEnabledShadow : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationController_setNavigationBarEnabledShadow : Error processing arguments");
        cobj->setNavigationBarEnabledShadow(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_setNavigationBarEnabledShadow : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationController_replaceViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_replaceViewController : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAViewController* arg0 = nullptr;
        bool arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationController_replaceViewController : Error processing arguments");
        cobj->replaceViewController(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_replaceViewController : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CANavigationController_popToRootViewControllerAnimated(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_popToRootViewControllerAnimated : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationController_popToRootViewControllerAnimated : Error processing arguments");
        cobj->popToRootViewControllerAnimated(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_popToRootViewControllerAnimated : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationController_getNavigationBarGoBackBarButtonItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_getNavigationBarGoBackBarButtonItem : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CABarButtonItem* ret = cobj->getNavigationBarGoBackBarButtonItem();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CABarButtonItem>(cx, (CrossApp::CABarButtonItem*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_getNavigationBarGoBackBarButtonItem : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationController_isNavigationBarEnabledShadow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_isNavigationBarEnabledShadow : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isNavigationBarEnabledShadow();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_isNavigationBarEnabledShadow : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationController_pushViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_pushViewController : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAViewController* arg0 = nullptr;
        bool arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationController_pushViewController : Error processing arguments");
        cobj->pushViewController(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_pushViewController : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CANavigationController_isReachBoundaryDown(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_isReachBoundaryDown : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryDown();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_isReachBoundaryDown : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationController_setTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_setTouchMoved : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationController_setTouchMoved : Error processing arguments");
        cobj->setTouchMoved(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_setTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationController_initWithRootViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_initWithRootViewController : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAViewController* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationController_initWithRootViewController : Error processing arguments");
        bool ret = cobj->initWithRootViewController(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_initWithRootViewController : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationController_isReachBoundaryRight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_isReachBoundaryRight : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryRight();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_isReachBoundaryRight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationController_popViewControllerAnimated(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_popViewControllerAnimated : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationController_popViewControllerAnimated : Error processing arguments");
        CrossApp::CAViewController* ret = cobj->popViewControllerAnimated(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAViewController>(cx, (CrossApp::CAViewController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_popViewControllerAnimated : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationController_isTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_isTouchMoved : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isTouchMoved();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_isTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationController_getNavigationBarTitleColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_getNavigationBarTitleColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getNavigationBarTitleColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_getNavigationBarTitleColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationController_isReachBoundaryUp(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_isReachBoundaryUp : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryUp();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_isReachBoundaryUp : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationController_isReachBoundaryLeft(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_isReachBoundaryLeft : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryLeft();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_isReachBoundaryLeft : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationController_setNavigationBarGoBackBarButtonItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_setNavigationBarGoBackBarButtonItem : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CABarButtonItem* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CABarButtonItem*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationController_setNavigationBarGoBackBarButtonItem : Error processing arguments");
        cobj->setNavigationBarGoBackBarButtonItem(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_setNavigationBarGoBackBarButtonItem : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationController_isNavigationBarHidden(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_isNavigationBarHidden : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isNavigationBarHidden();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_isNavigationBarHidden : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationController_getNavigationBarBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_getNavigationBarBackgroundImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getNavigationBarBackgroundImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_getNavigationBarBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationController_getViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_getViewControllerAtIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationController_getViewControllerAtIndex : Error processing arguments");
        CrossApp::CAViewController* ret = cobj->getViewControllerAtIndex(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAViewController>(cx, (CrossApp::CAViewController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_getViewControllerAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationController_setNavigationBarBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_setNavigationBarBackgroundImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationController_setNavigationBarBackgroundImage : Error processing arguments");
        cobj->setNavigationBarBackgroundImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_setNavigationBarBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationController_getNavigationBarButtonColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_getNavigationBarButtonColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getNavigationBarButtonColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_getNavigationBarButtonColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANavigationController_popViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_popViewControllerAtIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationController_popViewControllerAtIndex : Error processing arguments");
        CrossApp::CAViewController* ret = cobj->popViewControllerAtIndex(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAViewController>(cx, (CrossApp::CAViewController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_popViewControllerAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationController_setNavigationBarButtonColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANavigationController_setNavigationBarButtonColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANavigationController_setNavigationBarButtonColor : Error processing arguments");
        cobj->setNavigationBarButtonColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANavigationController_setNavigationBarButtonColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANavigationController_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CANavigationController* cobj = new (std::nothrow) CrossApp::CANavigationController();
    TypeTest<CrossApp::CANavigationController> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CANavigationController");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAViewController_prototype;

void js_CrossApp_CANavigationController_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CANavigationController)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CANavigationController *nobj = static_cast<CrossApp::CANavigationController *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CANavigationController(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CANavigationController_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CANavigationController_class->name = "CANavigationController";
    jsb_CrossApp_CANavigationController_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CANavigationController_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CANavigationController_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CANavigationController_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CANavigationController_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CANavigationController_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CANavigationController_class->convert = JS_ConvertStub;
    jsb_CrossApp_CANavigationController_class->finalize = js_CrossApp_CANavigationController_finalize;
    jsb_CrossApp_CANavigationController_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setNavigationBarTitleColor", js_crossapp_CANavigationController_setNavigationBarTitleColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("popFirstViewController", js_crossapp_CANavigationController_popFirstViewController, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("updateItem", js_crossapp_CANavigationController_updateItem, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBackViewController", js_crossapp_CANavigationController_getBackViewController, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getViewControllerCount", js_crossapp_CANavigationController_getViewControllerCount, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setNavigationBarHidden", js_crossapp_CANavigationController_setNavigationBarHidden, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setNavigationBarEnabledShadow", js_crossapp_CANavigationController_setNavigationBarEnabledShadow, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("replaceViewController", js_crossapp_CANavigationController_replaceViewController, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("popToRootViewControllerAnimated", js_crossapp_CANavigationController_popToRootViewControllerAnimated, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNavigationBarGoBackBarButtonItem", js_crossapp_CANavigationController_getNavigationBarGoBackBarButtonItem, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isNavigationBarEnabledShadow", js_crossapp_CANavigationController_isNavigationBarEnabledShadow, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("pushViewController", js_crossapp_CANavigationController_pushViewController, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryDown", js_crossapp_CANavigationController_isReachBoundaryDown, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTouchMoved", js_crossapp_CANavigationController_setTouchMoved, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithRootViewController", js_crossapp_CANavigationController_initWithRootViewController, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryRight", js_crossapp_CANavigationController_isReachBoundaryRight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("popViewControllerAnimated", js_crossapp_CANavigationController_popViewControllerAnimated, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isTouchMoved", js_crossapp_CANavigationController_isTouchMoved, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNavigationBarTitleColor", js_crossapp_CANavigationController_getNavigationBarTitleColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryUp", js_crossapp_CANavigationController_isReachBoundaryUp, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryLeft", js_crossapp_CANavigationController_isReachBoundaryLeft, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setNavigationBarGoBackBarButtonItem", js_crossapp_CANavigationController_setNavigationBarGoBackBarButtonItem, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isNavigationBarHidden", js_crossapp_CANavigationController_isNavigationBarHidden, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNavigationBarBackgroundImage", js_crossapp_CANavigationController_getNavigationBarBackgroundImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getViewControllerAtIndex", js_crossapp_CANavigationController_getViewControllerAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setNavigationBarBackgroundImage", js_crossapp_CANavigationController_setNavigationBarBackgroundImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNavigationBarButtonColor", js_crossapp_CANavigationController_getNavigationBarButtonColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("popViewControllerAtIndex", js_crossapp_CANavigationController_popViewControllerAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setNavigationBarButtonColor", js_crossapp_CANavigationController_setNavigationBarButtonColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CANavigationController_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAViewController_prototype),
        jsb_CrossApp_CANavigationController_class,
        js_crossapp_CANavigationController_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CANavigationController", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CANavigationController> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CANavigationController_class;
        p->proto = jsb_CrossApp_CANavigationController_prototype;
        p->parentProto = jsb_CrossApp_CAViewController_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CATabBarController_class;
JSObject *jsb_CrossApp_CATabBarController_prototype;

bool js_crossapp_CATabBarController_getSelectedViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarController_getSelectedViewController : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAViewController* ret = cobj->getSelectedViewController();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAViewController>(cx, (CrossApp::CAViewController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarController_getSelectedViewController : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBarController_setTabBarSelectedBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarController_setTabBarSelectedBackgroundImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBarController_setTabBarSelectedBackgroundImage : Error processing arguments");
        cobj->setTabBarSelectedBackgroundImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarController_setTabBarSelectedBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBarController_setTabBarBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarController_setTabBarBackgroundImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBarController_setTabBarBackgroundImage : Error processing arguments");
        cobj->setTabBarBackgroundImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarController_setTabBarBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBarController_setTabBarTitleColorForSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarController_setTabBarTitleColorForSelected : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBarController_setTabBarTitleColorForSelected : Error processing arguments");
        cobj->setTabBarTitleColorForSelected(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarController_setTabBarTitleColorForSelected : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBarController_showSelectedViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarController_showSelectedViewControllerAtIndex : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBarController_showSelectedViewControllerAtIndex : Error processing arguments");
        bool ret = cobj->showSelectedViewControllerAtIndex(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarController_showSelectedViewControllerAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBarController_setTabBarHidden(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarController_setTabBarHidden : Invalid Native Object");
    if (argc == 2) {
        bool arg0;
        bool arg1;
        arg0 = JS::ToBoolean(args.get(0));
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBarController_setTabBarHidden : Error processing arguments");
        cobj->setTabBarHidden(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarController_setTabBarHidden : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CATabBarController_updateItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarController_updateItem : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAViewController* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBarController_updateItem : Error processing arguments");
        cobj->updateItem(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarController_updateItem : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBarController_setTabBarTitleColorForNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarController_setTabBarTitleColorForNormal : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBarController_setTabBarTitleColorForNormal : Error processing arguments");
        cobj->setTabBarTitleColorForNormal(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarController_setTabBarTitleColorForNormal : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBarController_setTabBarSelectedIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarController_setTabBarSelectedIndicatorImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBarController_setTabBarSelectedIndicatorImage : Error processing arguments");
        cobj->setTabBarSelectedIndicatorImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarController_setTabBarSelectedIndicatorImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBarController_getTabBarTitleColorForSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarController_getTabBarTitleColorForSelected : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getTabBarTitleColorForSelected();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarController_getTabBarTitleColorForSelected : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBarController_getSelectedViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarController_getSelectedViewControllerAtIndex : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getSelectedViewControllerAtIndex();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarController_getSelectedViewControllerAtIndex : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBarController_showSelectedViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarController_showSelectedViewController : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAViewController* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBarController_showSelectedViewController : Error processing arguments");
        bool ret = cobj->showSelectedViewController(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarController_showSelectedViewController : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBarController_getTabBarSelectedBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarController_getTabBarSelectedBackgroundImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getTabBarSelectedBackgroundImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarController_getTabBarSelectedBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBarController_setTabBarTitleBoldForSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarController_setTabBarTitleBoldForSelected : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBarController_setTabBarTitleBoldForSelected : Error processing arguments");
        cobj->setTabBarTitleBoldForSelected(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarController_setTabBarTitleBoldForSelected : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBarController_getTabBar(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarController_getTabBar : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CATabBar* ret = cobj->getTabBar();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBar>(cx, (CrossApp::CATabBar*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarController_getTabBar : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBarController_getTabBarBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarController_getTabBarBackgroundImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getTabBarBackgroundImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarController_getTabBarBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBarController_getTabBarVerticalAlignment(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarController_getTabBarVerticalAlignment : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getTabBarVerticalAlignment();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarController_getTabBarVerticalAlignment : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBarController_getTabBarTitleBoldForSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarController_getTabBarTitleBoldForSelected : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->getTabBarTitleBoldForSelected();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarController_getTabBarTitleBoldForSelected : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBarController_showTabBarSelectedIndicator(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarController_showTabBarSelectedIndicator : Invalid Native Object");
    if (argc == 0) {
        cobj->showTabBarSelectedIndicator();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarController_showTabBarSelectedIndicator : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBarController_getTabBarSelectedIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarController_getTabBarSelectedIndicatorImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getTabBarSelectedIndicatorImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarController_getTabBarSelectedIndicatorImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBarController_initWithViewControllers(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarController_initWithViewControllers : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAVector<CrossApp::CAViewController *> arg0;
        ok &= jsval_to_cavector(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBarController_initWithViewControllers : Error processing arguments");
        bool ret = cobj->initWithViewControllers(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::CAVector<CrossApp::CAViewController *> arg0;
        CrossApp::CATabBar::VerticalAlignment arg1;
        ok &= jsval_to_cavector(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBarController_initWithViewControllers : Error processing arguments");
        bool ret = cobj->initWithViewControllers(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarController_initWithViewControllers : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBarController_getTabBarTitleColorForNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarController_getTabBarTitleColorForNormal : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getTabBarTitleColorForNormal();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarController_getTabBarTitleColorForNormal : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBarController_getViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarController_getViewControllerAtIndex : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATabBarController_getViewControllerAtIndex : Error processing arguments");
        CrossApp::CAViewController* ret = cobj->getViewControllerAtIndex(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAViewController>(cx, (CrossApp::CAViewController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarController_getViewControllerAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATabBarController_isTabBarHidden(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATabBarController_isTabBarHidden : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isTabBarHidden();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATabBarController_isTabBarHidden : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATabBarController_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CATabBarController* cobj = new (std::nothrow) CrossApp::CATabBarController();
    TypeTest<CrossApp::CATabBarController> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CATabBarController");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAViewController_prototype;

void js_CrossApp_CATabBarController_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CATabBarController)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATabBarController *nobj = static_cast<CrossApp::CATabBarController *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CATabBarController(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATabBarController_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATabBarController_class->name = "CATabBarController";
    jsb_CrossApp_CATabBarController_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATabBarController_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATabBarController_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATabBarController_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATabBarController_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATabBarController_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATabBarController_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATabBarController_class->finalize = js_CrossApp_CATabBarController_finalize;
    jsb_CrossApp_CATabBarController_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getSelectedViewController", js_crossapp_CATabBarController_getSelectedViewController, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTabBarSelectedBackgroundImage", js_crossapp_CATabBarController_setTabBarSelectedBackgroundImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTabBarBackgroundImage", js_crossapp_CATabBarController_setTabBarBackgroundImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTabBarTitleColorForSelected", js_crossapp_CATabBarController_setTabBarTitleColorForSelected, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("showSelectedViewControllerAtIndex", js_crossapp_CATabBarController_showSelectedViewControllerAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTabBarHidden", js_crossapp_CATabBarController_setTabBarHidden, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("updateItem", js_crossapp_CATabBarController_updateItem, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTabBarTitleColorForNormal", js_crossapp_CATabBarController_setTabBarTitleColorForNormal, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTabBarSelectedIndicatorImage", js_crossapp_CATabBarController_setTabBarSelectedIndicatorImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTabBarTitleColorForSelected", js_crossapp_CATabBarController_getTabBarTitleColorForSelected, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSelectedViewControllerAtIndex", js_crossapp_CATabBarController_getSelectedViewControllerAtIndex, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("showSelectedViewController", js_crossapp_CATabBarController_showSelectedViewController, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTabBarSelectedBackgroundImage", js_crossapp_CATabBarController_getTabBarSelectedBackgroundImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTabBarTitleBoldForSelected", js_crossapp_CATabBarController_setTabBarTitleBoldForSelected, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTabBar", js_crossapp_CATabBarController_getTabBar, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTabBarBackgroundImage", js_crossapp_CATabBarController_getTabBarBackgroundImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTabBarVerticalAlignment", js_crossapp_CATabBarController_getTabBarVerticalAlignment, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTabBarTitleBoldForSelected", js_crossapp_CATabBarController_getTabBarTitleBoldForSelected, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("showTabBarSelectedIndicator", js_crossapp_CATabBarController_showTabBarSelectedIndicator, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTabBarSelectedIndicatorImage", js_crossapp_CATabBarController_getTabBarSelectedIndicatorImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithViewControllers", js_crossapp_CATabBarController_initWithViewControllers, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTabBarTitleColorForNormal", js_crossapp_CATabBarController_getTabBarTitleColorForNormal, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getViewControllerAtIndex", js_crossapp_CATabBarController_getViewControllerAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isTabBarHidden", js_crossapp_CATabBarController_isTabBarHidden, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CATabBarController_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAViewController_prototype),
        jsb_CrossApp_CATabBarController_class,
        js_crossapp_CATabBarController_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CATabBarController", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATabBarController> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATabBarController_class;
        p->proto = jsb_CrossApp_CATabBarController_prototype;
        p->parentProto = jsb_CrossApp_CAViewController_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAWindow_class;
JSObject *jsb_CrossApp_CAWindow_prototype;

bool js_crossapp_CAWindow_presentModalViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWindow* cobj = (CrossApp::CAWindow *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWindow_presentModalViewController : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAViewController* arg0 = nullptr;
        bool arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWindow_presentModalViewController : Error processing arguments");
        cobj->presentModalViewController(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWindow_presentModalViewController : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAWindow_setCameraOrderDirty(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWindow* cobj = (CrossApp::CAWindow *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWindow_setCameraOrderDirty : Invalid Native Object");
    if (argc == 0) {
        cobj->setCameraOrderDirty();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWindow_setCameraOrderDirty : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWindow_render(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWindow* cobj = (CrossApp::CAWindow *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWindow_render : Invalid Native Object");
    if (argc == 2) {
        CrossApp::Renderer* arg0 = nullptr;
        CrossApp::Mat4 arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::Renderer*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_matrix(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWindow_render : Error processing arguments");
        cobj->render(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }
    if (argc == 3) {
        CrossApp::Renderer* arg0 = nullptr;
        CrossApp::Mat4 arg1;
        const CrossApp::Mat4* arg2 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::Renderer*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_matrix(cx, args.get(1), &arg1);
        do {
            if (args.get(2).isNull()) { arg2 = nullptr; break; }
            if (!args.get(2).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(2).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg2 = (const CrossApp::Mat4*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg2, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWindow_render : Error processing arguments");
        cobj->render(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWindow_render : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAWindow_dismissModalViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWindow* cobj = (CrossApp::CAWindow *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWindow_dismissModalViewController : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWindow_dismissModalViewController : Error processing arguments");
        cobj->dismissModalViewController(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWindow_dismissModalViewController : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWindow_getRootViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWindow* cobj = (CrossApp::CAWindow *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWindow_getRootViewController : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAViewController* ret = cobj->getRootViewController();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAViewController>(cx, (CrossApp::CAViewController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWindow_getRootViewController : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWindow_getModalViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWindow* cobj = (CrossApp::CAWindow *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWindow_getModalViewController : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAViewController* ret = cobj->getModalViewController();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAViewController>(cx, (CrossApp::CAViewController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWindow_getModalViewController : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWindow_setRootViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWindow* cobj = (CrossApp::CAWindow *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWindow_setRootViewController : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAViewController* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWindow_setRootViewController : Error processing arguments");
        cobj->setRootViewController(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWindow_setRootViewController : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWindow_getDefaultCamera(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWindow* cobj = (CrossApp::CAWindow *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWindow_getDefaultCamera : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CACamera* ret = cobj->getDefaultCamera();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACamera>(cx, (CrossApp::CACamera*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWindow_getDefaultCamera : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWindow_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAWindow* ret = CrossApp::CAWindow::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWindow>(cx, (CrossApp::CAWindow*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAWindow_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CAWindow_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAWindow* cobj = new (std::nothrow) CrossApp::CAWindow();
    TypeTest<CrossApp::CAWindow> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAWindow");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_CAWindow_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::CAWindow *nobj = new (std::nothrow) CrossApp::CAWindow();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAWindow");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAWindow_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAWindow)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAWindow *nobj = static_cast<CrossApp::CAWindow *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_CAWindow(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAWindow_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAWindow_class->name = "CAWindow";
    jsb_CrossApp_CAWindow_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAWindow_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAWindow_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAWindow_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAWindow_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAWindow_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAWindow_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAWindow_class->finalize = js_CrossApp_CAWindow_finalize;
    jsb_CrossApp_CAWindow_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("presentModalViewController", js_crossapp_CAWindow_presentModalViewController, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCameraOrderDirty", js_crossapp_CAWindow_setCameraOrderDirty, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("render", js_crossapp_CAWindow_render, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("dismissModalViewController", js_crossapp_CAWindow_dismissModalViewController, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRootViewController", js_crossapp_CAWindow_getRootViewController, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getModalViewController", js_crossapp_CAWindow_getModalViewController, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setRootViewController", js_crossapp_CAWindow_setRootViewController, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDefaultCamera", js_crossapp_CAWindow_getDefaultCamera, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_CAWindow_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CAWindow_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAWindow_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAWindow_class,
        js_crossapp_CAWindow_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAWindow", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAWindow> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAWindow_class;
        p->proto = jsb_CrossApp_CAWindow_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.CAWindow.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_CANotificationCenter_class;
JSObject *jsb_CrossApp_CANotificationCenter_prototype;

bool js_crossapp_CANotificationCenter_postNotificationWithIntValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANotificationCenter* cobj = (CrossApp::CANotificationCenter *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANotificationCenter_postNotificationWithIntValue : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        int arg1 = 0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANotificationCenter_postNotificationWithIntValue : Error processing arguments");
        cobj->postNotificationWithIntValue(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANotificationCenter_postNotificationWithIntValue : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CANotificationCenter_postNotification(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CANotificationCenter* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CANotificationCenter *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANotificationCenter_postNotification : Invalid Native Object");
    do {
        if (argc == 2) {
            std::string arg0;
            ok &= jsval_to_std_string(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::CAObject* arg1 = nullptr;
            do {
                if (args.get(1).isNull()) { arg1 = nullptr; break; }
                if (!args.get(1).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(1).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg1 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            cobj->postNotification(arg0, arg1);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 1) {
            std::string arg0;
            ok &= jsval_to_std_string(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            cobj->postNotification(arg0);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CANotificationCenter_postNotification : wrong number of arguments");
    return false;
}
bool js_crossapp_CANotificationCenter_postNotificationWithStringValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANotificationCenter* cobj = (CrossApp::CANotificationCenter *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANotificationCenter_postNotificationWithStringValue : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        std::string arg1;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANotificationCenter_postNotificationWithStringValue : Error processing arguments");
        cobj->postNotificationWithStringValue(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANotificationCenter_postNotificationWithStringValue : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CANotificationCenter_postNotificationWithJsonStringValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANotificationCenter* cobj = (CrossApp::CANotificationCenter *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANotificationCenter_postNotificationWithJsonStringValue : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        std::string arg1;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANotificationCenter_postNotificationWithJsonStringValue : Error processing arguments");
        cobj->postNotificationWithJsonStringValue(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANotificationCenter_postNotificationWithJsonStringValue : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CANotificationCenter_removeObserver(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANotificationCenter* cobj = (CrossApp::CANotificationCenter *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANotificationCenter_removeObserver : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAObject* arg0 = nullptr;
        std::string arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANotificationCenter_removeObserver : Error processing arguments");
        cobj->removeObserver(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANotificationCenter_removeObserver : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CANotificationCenter_getObserverHandlerByName(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANotificationCenter* cobj = (CrossApp::CANotificationCenter *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANotificationCenter_getObserverHandlerByName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANotificationCenter_getObserverHandlerByName : Error processing arguments");
        int ret = cobj->getObserverHandlerByName(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANotificationCenter_getObserverHandlerByName : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANotificationCenter_removeAllObservers(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANotificationCenter* cobj = (CrossApp::CANotificationCenter *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANotificationCenter_removeAllObservers : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANotificationCenter_removeAllObservers : Error processing arguments");
        int ret = cobj->removeAllObservers(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANotificationCenter_removeAllObservers : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CANotificationCenter_postNotificationWithDoubleValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANotificationCenter* cobj = (CrossApp::CANotificationCenter *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANotificationCenter_postNotificationWithDoubleValue : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        double arg1 = 0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANotificationCenter_postNotificationWithDoubleValue : Error processing arguments");
        cobj->postNotificationWithDoubleValue(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANotificationCenter_postNotificationWithDoubleValue : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CANotificationCenter_unregisterScriptObserver(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANotificationCenter* cobj = (CrossApp::CANotificationCenter *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANotificationCenter_unregisterScriptObserver : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAObject* arg0 = nullptr;
        std::string arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANotificationCenter_unregisterScriptObserver : Error processing arguments");
        cobj->unregisterScriptObserver(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANotificationCenter_unregisterScriptObserver : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CANotificationCenter_postNotificationWithFloatValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANotificationCenter* cobj = (CrossApp::CANotificationCenter *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANotificationCenter_postNotificationWithFloatValue : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        double arg1 = 0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANotificationCenter_postNotificationWithFloatValue : Error processing arguments");
        cobj->postNotificationWithFloatValue(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANotificationCenter_postNotificationWithFloatValue : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CANotificationCenter_getScriptHandler(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANotificationCenter* cobj = (CrossApp::CANotificationCenter *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANotificationCenter_getScriptHandler : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getScriptHandler();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANotificationCenter_getScriptHandler : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CANotificationCenter_registerScriptObserver(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANotificationCenter* cobj = (CrossApp::CANotificationCenter *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CANotificationCenter_registerScriptObserver : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CAObject* arg0 = nullptr;
        std::string arg1;
        int arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CANotificationCenter_registerScriptObserver : Error processing arguments");
        cobj->registerScriptObserver(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CANotificationCenter_registerScriptObserver : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_crossapp_CANotificationCenter_getInstance(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CANotificationCenter* ret = CrossApp::CANotificationCenter::getInstance();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CANotificationCenter>(cx, (CrossApp::CANotificationCenter*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CANotificationCenter_getInstance : wrong number of arguments");
    return false;
}
bool js_crossapp_CANotificationCenter_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CANotificationCenter* cobj = new (std::nothrow) CrossApp::CANotificationCenter();
    TypeTest<CrossApp::CANotificationCenter> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CANotificationCenter");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CANotificationCenter_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CANotificationCenter)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CANotificationCenter *nobj = static_cast<CrossApp::CANotificationCenter *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CANotificationCenter(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CANotificationCenter_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CANotificationCenter_class->name = "CANotificationCenter";
    jsb_CrossApp_CANotificationCenter_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CANotificationCenter_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CANotificationCenter_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CANotificationCenter_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CANotificationCenter_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CANotificationCenter_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CANotificationCenter_class->convert = JS_ConvertStub;
    jsb_CrossApp_CANotificationCenter_class->finalize = js_CrossApp_CANotificationCenter_finalize;
    jsb_CrossApp_CANotificationCenter_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("postNotificationWithIntValue", js_crossapp_CANotificationCenter_postNotificationWithIntValue, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("postNotification", js_crossapp_CANotificationCenter_postNotification, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("postNotificationWithStringValue", js_crossapp_CANotificationCenter_postNotificationWithStringValue, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("postNotificationWithJsonStringValue", js_crossapp_CANotificationCenter_postNotificationWithJsonStringValue, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeObserver", js_crossapp_CANotificationCenter_removeObserver, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getObserverHandlerByName", js_crossapp_CANotificationCenter_getObserverHandlerByName, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeAllObservers", js_crossapp_CANotificationCenter_removeAllObservers, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("postNotificationWithDoubleValue", js_crossapp_CANotificationCenter_postNotificationWithDoubleValue, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("unregisterScriptObserver", js_crossapp_CANotificationCenter_unregisterScriptObserver, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("postNotificationWithFloatValue", js_crossapp_CANotificationCenter_postNotificationWithFloatValue, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getScriptHandler", js_crossapp_CANotificationCenter_getScriptHandler, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("registerScriptObserver", js_crossapp_CANotificationCenter_registerScriptObserver, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("getInstance", js_crossapp_CANotificationCenter_getInstance, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CANotificationCenter_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CANotificationCenter_class,
        js_crossapp_CANotificationCenter_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CANotificationCenter", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CANotificationCenter> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CANotificationCenter_class;
        p->proto = jsb_CrossApp_CANotificationCenter_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CARenderImage_class;
JSObject *jsb_CrossApp_CARenderImage_prototype;

bool js_crossapp_CARenderImage_getImageView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARenderImage_getImageView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImageView* ret = cobj->getImageView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImageView>(cx, (CrossApp::CAImageView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CARenderImage_getImageView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CARenderImage_printscreenWithView(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CARenderImage* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARenderImage_printscreenWithView : Invalid Native Object");
    do {
        if (argc == 2) {
            CrossApp::CAView* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::DPoint arg1;
            ok &= jsval_to_dpoint(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            cobj->printscreenWithView(arg0, arg1);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 1) {
            CrossApp::CAView* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            cobj->printscreenWithView(arg0);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 2) {
            CrossApp::CAView* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::CAColor4B arg1;
            ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            cobj->printscreenWithView(arg0, arg1);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 3) {
            CrossApp::CAView* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::DPoint arg1;
            ok &= jsval_to_dpoint(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAColor4B arg2;
            ok &= jsval_to_cacolor4b(cx, args.get(2), &arg2);
            if (!ok) { ok = true; break; }
            cobj->printscreenWithView(arg0, arg1, arg2);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CARenderImage_printscreenWithView : wrong number of arguments");
    return false;
}
bool js_crossapp_CARenderImage_getClearStencil(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARenderImage_getClearStencil : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getClearStencil();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CARenderImage_getClearStencil : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CARenderImage_saveToFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARenderImage_saveToFile : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CARenderImage_saveToFile : Error processing arguments");
        bool ret = cobj->saveToFile(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CARenderImage_saveToFile : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CARenderImage_clearStencil(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARenderImage_clearStencil : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CARenderImage_clearStencil : Error processing arguments");
        cobj->clearStencil(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CARenderImage_clearStencil : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CARenderImage_setClearStencil(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARenderImage_setClearStencil : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CARenderImage_setClearStencil : Error processing arguments");
        cobj->setClearStencil(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CARenderImage_setClearStencil : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CARenderImage_setClearFlags(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARenderImage_setClearFlags : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CARenderImage_setClearFlags : Error processing arguments");
        cobj->setClearFlags(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CARenderImage_setClearFlags : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CARenderImage_setImageView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARenderImage_setImageView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImageView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImageView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CARenderImage_setImageView : Error processing arguments");
        cobj->setImageView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CARenderImage_setImageView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CARenderImage_initWithWidthAndHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CARenderImage* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARenderImage_initWithWidthAndHeight : Invalid Native Object");
    do {
        if (argc == 4) {
            int arg0 = 0;
            ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAImage::PixelFormat arg2;
            ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            uint32_t arg3 = 0;
            ok &= jsval_to_uint32(cx, args.get(3), &arg3);
            if (!ok) { ok = true; break; }
            bool ret = cobj->initWithWidthAndHeight(arg0, arg1, arg2, arg3);
            jsval jsret = JSVAL_NULL;
            jsret = BOOLEAN_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 3) {
            int arg0 = 0;
            ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAImage::PixelFormat arg2;
            ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            bool ret = cobj->initWithWidthAndHeight(arg0, arg1, arg2);
            jsval jsret = JSVAL_NULL;
            jsret = BOOLEAN_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CARenderImage_initWithWidthAndHeight : wrong number of arguments");
    return false;
}
bool js_crossapp_CARenderImage_setAutoDraw(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARenderImage_setAutoDraw : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CARenderImage_setAutoDraw : Error processing arguments");
        cobj->setAutoDraw(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CARenderImage_setAutoDraw : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CARenderImage_setClearColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARenderImage_setClearColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4F arg0;
        ok &= jsval_to_cacolor4f(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CARenderImage_setClearColor : Error processing arguments");
        cobj->setClearColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CARenderImage_setClearColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CARenderImage_getClearColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARenderImage_getClearColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4F& ret = cobj->getClearColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4f_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CARenderImage_getClearColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CARenderImage_getClearFlags(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARenderImage_getClearFlags : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getClearFlags();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CARenderImage_getClearFlags : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CARenderImage_isAutoDraw(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARenderImage_isAutoDraw : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAutoDraw();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CARenderImage_isAutoDraw : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CARenderImage_setClearDepth(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARenderImage_setClearDepth : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CARenderImage_setClearDepth : Error processing arguments");
        cobj->setClearDepth(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CARenderImage_setClearDepth : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CARenderImage_clearDepth(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARenderImage_clearDepth : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CARenderImage_clearDepth : Error processing arguments");
        cobj->clearDepth(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CARenderImage_clearDepth : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CARenderImage_clear(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARenderImage_clear : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CARenderImage_clear : Error processing arguments");
        cobj->clear(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CARenderImage_clear : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CARenderImage_getClearDepth(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARenderImage_getClearDepth : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getClearDepth();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CARenderImage_getClearDepth : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CARenderImage_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 3) {
            int arg0 = 0;
            ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAImage::PixelFormat arg2;
            ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            CrossApp::CARenderImage* ret = CrossApp::CARenderImage::create(arg0, arg1, arg2);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CARenderImage>(cx, (CrossApp::CARenderImage*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 4) {
            int arg0 = 0;
            ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAImage::PixelFormat arg2;
            ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            uint32_t arg3 = 0;
            ok &= jsval_to_uint32(cx, args.get(3), &arg3);
            if (!ok) { ok = true; break; }
            CrossApp::CARenderImage* ret = CrossApp::CARenderImage::create(arg0, arg1, arg2, arg3);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CARenderImage>(cx, (CrossApp::CARenderImage*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 2) {
            int arg0 = 0;
            ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CARenderImage* ret = CrossApp::CARenderImage::create(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CARenderImage>(cx, (CrossApp::CARenderImage*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_crossapp_CARenderImage_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CARenderImage_printscreen(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CARenderImage* ret = CrossApp::CARenderImage::printscreen();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CARenderImage>(cx, (CrossApp::CARenderImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CARenderImage_printscreen : wrong number of arguments");
    return false;
}
bool js_crossapp_CARenderImage_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CARenderImage* cobj = new (std::nothrow) CrossApp::CARenderImage();
    TypeTest<CrossApp::CARenderImage> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CARenderImage");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CARenderImage_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CARenderImage)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CARenderImage *nobj = static_cast<CrossApp::CARenderImage *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CARenderImage(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CARenderImage_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CARenderImage_class->name = "CARenderImage";
    jsb_CrossApp_CARenderImage_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CARenderImage_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CARenderImage_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CARenderImage_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CARenderImage_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CARenderImage_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CARenderImage_class->convert = JS_ConvertStub;
    jsb_CrossApp_CARenderImage_class->finalize = js_CrossApp_CARenderImage_finalize;
    jsb_CrossApp_CARenderImage_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getImageView", js_crossapp_CARenderImage_getImageView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("printscreenWithView", js_crossapp_CARenderImage_printscreenWithView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getClearStencil", js_crossapp_CARenderImage_getClearStencil, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("saveToFile", js_crossapp_CARenderImage_saveToFile, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("clearStencil", js_crossapp_CARenderImage_clearStencil, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setClearStencil", js_crossapp_CARenderImage_setClearStencil, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setClearFlags", js_crossapp_CARenderImage_setClearFlags, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageView", js_crossapp_CARenderImage_setImageView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithWidthAndHeight", js_crossapp_CARenderImage_initWithWidthAndHeight, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAutoDraw", js_crossapp_CARenderImage_setAutoDraw, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setClearColor", js_crossapp_CARenderImage_setClearColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getClearColor", js_crossapp_CARenderImage_getClearColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getClearFlags", js_crossapp_CARenderImage_getClearFlags, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAutoDraw", js_crossapp_CARenderImage_isAutoDraw, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setClearDepth", js_crossapp_CARenderImage_setClearDepth, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("clearDepth", js_crossapp_CARenderImage_clearDepth, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("clear", js_crossapp_CARenderImage_clear, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getClearDepth", js_crossapp_CARenderImage_getClearDepth, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CARenderImage_create, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("printscreen", js_crossapp_CARenderImage_printscreen, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CARenderImage_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CARenderImage_class,
        js_crossapp_CARenderImage_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CARenderImage", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CARenderImage> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CARenderImage_class;
        p->proto = jsb_CrossApp_CARenderImage_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAProgress_class;
JSObject *jsb_CrossApp_CAProgress_prototype;

bool js_crossapp_CAProgress_setProgressTintImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAProgress_setProgressTintImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAProgress_setProgressTintImage : Error processing arguments");
        cobj->setProgressTintImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAProgress_setProgressTintImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAProgress_getProgressTintImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAProgress_getProgressTintImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getProgressTintImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAProgress_getProgressTintImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAProgress_setProgressTrackColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAProgress_setProgressTrackColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAProgress_setProgressTrackColor : Error processing arguments");
        cobj->setProgressTrackColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAProgress_setProgressTrackColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAProgress_setColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAProgress_setColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAProgress_setColor : Error processing arguments");
        cobj->setColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAProgress_setColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAProgress_setProgressTrackImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAProgress_setProgressTrackImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAProgress_setProgressTrackImage : Error processing arguments");
        cobj->setProgressTrackImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAProgress_setProgressTrackImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAProgress_getProgressTintColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAProgress_getProgressTintColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getProgressTintColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAProgress_getProgressTintColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAProgress_getProgressTrackImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAProgress_getProgressTrackImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getProgressTrackImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAProgress_getProgressTrackImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAProgress_getProgressTrackColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAProgress_getProgressTrackColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getProgressTrackColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAProgress_getProgressTrackColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAProgress_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAProgress_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAProgress_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAProgress_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAProgress_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAProgress_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAProgress_getProgress(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAProgress_getProgress : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getProgress();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAProgress_getProgress : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAProgress_setProgress(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAProgress_setProgress : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAProgress_setProgress : Error processing arguments");
        cobj->setProgress(arg0);
        args.rval().setUndefined();
        return true;
    }
    if (argc == 2) {
        double arg0 = 0;
        bool arg1;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAProgress_setProgress : Error processing arguments");
        cobj->setProgress(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAProgress_setProgress : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAProgress_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAProgress_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAProgress_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAProgress_setProgressTintColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAProgress_setProgressTintColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAProgress_setProgressTintColor : Error processing arguments");
        cobj->setProgressTintColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAProgress_setProgressTintColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAProgress_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAProgress* ret = CrossApp::CAProgress::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAProgress>(cx, (CrossApp::CAProgress*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAProgress_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CAProgress_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAProgress_createWithFrame : Error processing arguments");
        CrossApp::CAProgress* ret = CrossApp::CAProgress::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAProgress>(cx, (CrossApp::CAProgress*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAProgress_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CAProgress_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAProgress_createWithLayout : Error processing arguments");
        CrossApp::CAProgress* ret = CrossApp::CAProgress::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAProgress>(cx, (CrossApp::CAProgress*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAProgress_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CAProgress_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAProgress_createWithCenter : Error processing arguments");
        CrossApp::CAProgress* ret = CrossApp::CAProgress::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAProgress>(cx, (CrossApp::CAProgress*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAProgress_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CAProgress_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAProgress* cobj = new (std::nothrow) CrossApp::CAProgress();
    TypeTest<CrossApp::CAProgress> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAProgress");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAControl_prototype;

void js_CrossApp_CAProgress_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAProgress)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAProgress *nobj = static_cast<CrossApp::CAProgress *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAProgress(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAProgress_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAProgress_class->name = "CAProgress";
    jsb_CrossApp_CAProgress_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAProgress_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAProgress_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAProgress_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAProgress_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAProgress_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAProgress_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAProgress_class->finalize = js_CrossApp_CAProgress_finalize;
    jsb_CrossApp_CAProgress_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setProgressTintImage", js_crossapp_CAProgress_setProgressTintImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getProgressTintImage", js_crossapp_CAProgress_getProgressTintImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setProgressTrackColor", js_crossapp_CAProgress_setProgressTrackColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setColor", js_crossapp_CAProgress_setColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setProgressTrackImage", js_crossapp_CAProgress_setProgressTrackImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getProgressTintColor", js_crossapp_CAProgress_getProgressTintColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getProgressTrackImage", js_crossapp_CAProgress_getProgressTrackImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getProgressTrackColor", js_crossapp_CAProgress_getProgressTrackColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CAProgress_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_crossapp_CAProgress_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getProgress", js_crossapp_CAProgress_getProgress, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setProgress", js_crossapp_CAProgress_setProgress, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_crossapp_CAProgress_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setProgressTintColor", js_crossapp_CAProgress_setProgressTintColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CAProgress_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_crossapp_CAProgress_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CAProgress_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CAProgress_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAProgress_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAControl_prototype),
        jsb_CrossApp_CAProgress_class,
        js_crossapp_CAProgress_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAProgress", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAProgress> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAProgress_class;
        p->proto = jsb_CrossApp_CAProgress_prototype;
        p->parentProto = jsb_CrossApp_CAControl_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CASwitch_class;
JSObject *jsb_CrossApp_CASwitch_prototype;

bool js_crossapp_CASwitch_getOnImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASwitch* cobj = (CrossApp::CASwitch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASwitch_getOnImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getOnImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASwitch_getOnImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASwitch_setOffImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASwitch* cobj = (CrossApp::CASwitch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASwitch_setOffImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASwitch_setOffImage : Error processing arguments");
        cobj->setOffImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASwitch_setOffImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASwitch_setTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASwitch* cobj = (CrossApp::CASwitch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASwitch_setTarget : Invalid Native Object");
    if (argc == 1) {
        std::function<void (bool)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](bool larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = BOOLEAN_TO_JSVAL(larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASwitch_setTarget : Error processing arguments");
        cobj->setTarget(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASwitch_setTarget : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASwitch_getThumbTintImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASwitch* cobj = (CrossApp::CASwitch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASwitch_getThumbTintImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getThumbTintImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASwitch_getThumbTintImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASwitch_setIsOn(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASwitch* cobj = (CrossApp::CASwitch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASwitch_setIsOn : Invalid Native Object");
    if (argc == 2) {
        bool arg0;
        bool arg1;
        arg0 = JS::ToBoolean(args.get(0));
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASwitch_setIsOn : Error processing arguments");
        cobj->setIsOn(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASwitch_setIsOn : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CASwitch_isOn(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASwitch* cobj = (CrossApp::CASwitch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASwitch_isOn : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isOn();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASwitch_isOn : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASwitch_setOnImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASwitch* cobj = (CrossApp::CASwitch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASwitch_setOnImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASwitch_setOnImage : Error processing arguments");
        cobj->setOnImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASwitch_setOnImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASwitch_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASwitch* cobj = (CrossApp::CASwitch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASwitch_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASwitch_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASwitch_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASwitch* cobj = (CrossApp::CASwitch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASwitch_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASwitch_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASwitch_getOffImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASwitch* cobj = (CrossApp::CASwitch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASwitch_getOffImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getOffImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASwitch_getOffImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASwitch_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASwitch* cobj = (CrossApp::CASwitch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASwitch_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASwitch_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASwitch_setThumbTintImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASwitch* cobj = (CrossApp::CASwitch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASwitch_setThumbTintImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASwitch_setThumbTintImage : Error processing arguments");
        cobj->setThumbTintImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASwitch_setThumbTintImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASwitch_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CASwitch::Type arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASwitch_create : Error processing arguments");
        CrossApp::CASwitch* ret = CrossApp::CASwitch::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CASwitch>(cx, (CrossApp::CASwitch*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CASwitch_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CASwitch_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DRect arg0;
        CrossApp::CASwitch::Type arg1;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASwitch_createWithFrame : Error processing arguments");
        CrossApp::CASwitch* ret = CrossApp::CASwitch::createWithFrame(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CASwitch>(cx, (CrossApp::CASwitch*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CASwitch_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CASwitch_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DLayout arg0;
        CrossApp::CASwitch::Type arg1;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASwitch_createWithLayout : Error processing arguments");
        CrossApp::CASwitch* ret = CrossApp::CASwitch::createWithLayout(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CASwitch>(cx, (CrossApp::CASwitch*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CASwitch_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CASwitch_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DRect arg0;
        CrossApp::CASwitch::Type arg1;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASwitch_createWithCenter : Error processing arguments");
        CrossApp::CASwitch* ret = CrossApp::CASwitch::createWithCenter(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CASwitch>(cx, (CrossApp::CASwitch*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CASwitch_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CASwitch_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CASwitch::Type arg0;
    ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
    JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASwitch_constructor : Error processing arguments");
    CrossApp::CASwitch* cobj = new (std::nothrow) CrossApp::CASwitch(arg0);
    TypeTest<CrossApp::CASwitch> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CASwitch");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAControl_prototype;

void js_CrossApp_CASwitch_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CASwitch)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CASwitch *nobj = static_cast<CrossApp::CASwitch *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CASwitch(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CASwitch_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CASwitch_class->name = "CASwitch";
    jsb_CrossApp_CASwitch_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CASwitch_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CASwitch_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CASwitch_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CASwitch_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CASwitch_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CASwitch_class->convert = JS_ConvertStub;
    jsb_CrossApp_CASwitch_class->finalize = js_CrossApp_CASwitch_finalize;
    jsb_CrossApp_CASwitch_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getOnImage", js_crossapp_CASwitch_getOnImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setOffImage", js_crossapp_CASwitch_setOffImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTarget", js_crossapp_CASwitch_setTarget, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getThumbTintImage", js_crossapp_CASwitch_getThumbTintImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setIsOn", js_crossapp_CASwitch_setIsOn, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isOn", js_crossapp_CASwitch_isOn, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setOnImage", js_crossapp_CASwitch_setOnImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CASwitch_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_crossapp_CASwitch_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getOffImage", js_crossapp_CASwitch_getOffImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_crossapp_CASwitch_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setThumbTintImage", js_crossapp_CASwitch_setThumbTintImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CASwitch_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_crossapp_CASwitch_createWithFrame, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CASwitch_createWithLayout, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CASwitch_createWithCenter, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CASwitch_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAControl_prototype),
        jsb_CrossApp_CASwitch_class,
        js_crossapp_CASwitch_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CASwitch", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CASwitch> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CASwitch_class;
        p->proto = jsb_CrossApp_CASwitch_prototype;
        p->parentProto = jsb_CrossApp_CAControl_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CASlider_class;
JSObject *jsb_CrossApp_CASlider_prototype;

bool js_crossapp_CASlider_setTargetForTouchUpSide(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASlider_setTargetForTouchUpSide : Invalid Native Object");
    if (argc == 1) {
        std::function<void (float)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](float larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = DOUBLE_TO_JSVAL(larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASlider_setTargetForTouchUpSide : Error processing arguments");
        cobj->setTargetForTouchUpSide(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASlider_setTargetForTouchUpSide : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASlider_initWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASlider_initWithCenter : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASlider_initWithCenter : Error processing arguments");
        bool ret = cobj->initWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASlider_initWithCenter : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASlider_getTrackHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASlider_getTrackHeight : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getTrackHeight();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASlider_getTrackHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASlider_setMinValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASlider_setMinValue : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASlider_setMinValue : Error processing arguments");
        cobj->setMinValue(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASlider_setMinValue : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASlider_getMinValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASlider_getMinValue : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getMinValue();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASlider_getMinValue : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASlider_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASlider_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASlider_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASlider_getMaxValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASlider_getMaxValue : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getMaxValue();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASlider_getMaxValue : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASlider_setMaxTrackTintImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASlider_setMaxTrackTintImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASlider_setMaxTrackTintImage : Error processing arguments");
        cobj->setMaxTrackTintImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASlider_setMaxTrackTintImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASlider_setValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASlider_setValue : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASlider_setValue : Error processing arguments");
        cobj->setValue(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASlider_setValue : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASlider_isTouchClick(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASlider_isTouchClick : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isTouchClick();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASlider_isTouchClick : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASlider_initWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASlider_initWithFrame : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASlider_initWithFrame : Error processing arguments");
        bool ret = cobj->initWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASlider_initWithFrame : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASlider_setTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASlider_setTarget : Invalid Native Object");
    if (argc == 1) {
        std::function<void (float)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](float larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = DOUBLE_TO_JSVAL(larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASlider_setTarget : Error processing arguments");
        cobj->setTarget(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASlider_setTarget : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASlider_layoutSubViews(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASlider_layoutSubViews : Invalid Native Object");
    if (argc == 0) {
        cobj->layoutSubViews();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASlider_layoutSubViews : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASlider_getMaxTrackTintImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASlider_getMaxTrackTintImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getMaxTrackTintImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASlider_getMaxTrackTintImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASlider_setThumbTintImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASlider_setThumbTintImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASlider_setThumbTintImage : Error processing arguments");
        cobj->setThumbTintImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASlider_setThumbTintImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASlider_getMinTrackTintImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASlider_getMinTrackTintImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getMinTrackTintImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASlider_getMinTrackTintImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASlider_setTrackHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASlider_setTrackHeight : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASlider_setTrackHeight : Error processing arguments");
        cobj->setTrackHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASlider_setTrackHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASlider_getThumbTintImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASlider_getThumbTintImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getThumbTintImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASlider_getThumbTintImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASlider_setMaxValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASlider_setMaxValue : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASlider_setMaxValue : Error processing arguments");
        cobj->setMaxValue(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASlider_setMaxValue : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASlider_getValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASlider_getValue : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getValue();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASlider_getValue : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASlider_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASlider_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASlider_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASlider_setMinTrackTintImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASlider_setMinTrackTintImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASlider_setMinTrackTintImage : Error processing arguments");
        cobj->setMinTrackTintImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASlider_setMinTrackTintImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CASlider_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CASlider_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CASlider_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CASlider_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CASlider* ret = CrossApp::CASlider::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CASlider>(cx, (CrossApp::CASlider*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CASlider_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CASlider_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASlider_createWithFrame : Error processing arguments");
        CrossApp::CASlider* ret = CrossApp::CASlider::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CASlider>(cx, (CrossApp::CASlider*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CASlider_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CASlider_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASlider_createWithLayout : Error processing arguments");
        CrossApp::CASlider* ret = CrossApp::CASlider::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CASlider>(cx, (CrossApp::CASlider*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CASlider_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CASlider_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CASlider_createWithCenter : Error processing arguments");
        CrossApp::CASlider* ret = CrossApp::CASlider::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CASlider>(cx, (CrossApp::CASlider*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CASlider_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CASlider_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CASlider* cobj = new (std::nothrow) CrossApp::CASlider();
    TypeTest<CrossApp::CASlider> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CASlider");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAControl_prototype;

void js_CrossApp_CASlider_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CASlider)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CASlider *nobj = static_cast<CrossApp::CASlider *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CASlider(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CASlider_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CASlider_class->name = "CASlider";
    jsb_CrossApp_CASlider_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CASlider_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CASlider_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CASlider_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CASlider_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CASlider_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CASlider_class->convert = JS_ConvertStub;
    jsb_CrossApp_CASlider_class->finalize = js_CrossApp_CASlider_finalize;
    jsb_CrossApp_CASlider_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setTargetForTouchUpSide", js_crossapp_CASlider_setTargetForTouchUpSide, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithCenter", js_crossapp_CASlider_initWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTrackHeight", js_crossapp_CASlider_getTrackHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMinValue", js_crossapp_CASlider_setMinValue, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMinValue", js_crossapp_CASlider_getMinValue, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CASlider_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMaxValue", js_crossapp_CASlider_getMaxValue, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMaxTrackTintImage", js_crossapp_CASlider_setMaxTrackTintImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setValue", js_crossapp_CASlider_setValue, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isTouchClick", js_crossapp_CASlider_isTouchClick, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithFrame", js_crossapp_CASlider_initWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTarget", js_crossapp_CASlider_setTarget, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("layoutSubViews", js_crossapp_CASlider_layoutSubViews, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMaxTrackTintImage", js_crossapp_CASlider_getMaxTrackTintImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setThumbTintImage", js_crossapp_CASlider_setThumbTintImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMinTrackTintImage", js_crossapp_CASlider_getMinTrackTintImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTrackHeight", js_crossapp_CASlider_setTrackHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getThumbTintImage", js_crossapp_CASlider_getThumbTintImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMaxValue", js_crossapp_CASlider_setMaxValue, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getValue", js_crossapp_CASlider_getValue, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_crossapp_CASlider_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMinTrackTintImage", js_crossapp_CASlider_setMinTrackTintImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_crossapp_CASlider_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CASlider_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_crossapp_CASlider_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CASlider_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CASlider_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CASlider_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAControl_prototype),
        jsb_CrossApp_CASlider_class,
        js_crossapp_CASlider_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CASlider", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CASlider> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CASlider_class;
        p->proto = jsb_CrossApp_CASlider_prototype;
        p->parentProto = jsb_CrossApp_CAControl_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAPageControl_class;
JSObject *jsb_CrossApp_CAPageControl_prototype;

bool js_crossapp_CAPageControl_setDefersCurrentPageDisplay(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageControl_setDefersCurrentPageDisplay : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageControl_setDefersCurrentPageDisplay : Error processing arguments");
        cobj->setDefersCurrentPageDisplay(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageControl_setDefersCurrentPageDisplay : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPageControl_getPageIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageControl_getPageIndicatorImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getPageIndicatorImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageControl_getPageIndicatorImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPageControl_initWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageControl_initWithCenter : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageControl_initWithCenter : Error processing arguments");
        bool ret = cobj->initWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageControl_initWithCenter : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPageControl_isSinglePage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageControl_isSinglePage : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isSinglePage();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageControl_isSinglePage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPageControl_setPageIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageControl_setPageIndicatorImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageControl_setPageIndicatorImage : Error processing arguments");
        cobj->setPageIndicatorImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageControl_setPageIndicatorImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPageControl_setNumberOfPages(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageControl_setNumberOfPages : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageControl_setNumberOfPages : Error processing arguments");
        cobj->setNumberOfPages(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageControl_setNumberOfPages : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPageControl_getNumberOfPages(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageControl_getNumberOfPages : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getNumberOfPages();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageControl_getNumberOfPages : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPageControl_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageControl_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageControl_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPageControl_setTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageControl_setTouchEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageControl_setTouchEnabled : Error processing arguments");
        cobj->setTouchEnabled(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageControl_setTouchEnabled : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPageControl_setPageIndicatorTintColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageControl_setPageIndicatorTintColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageControl_setPageIndicatorTintColor : Error processing arguments");
        cobj->setPageIndicatorTintColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageControl_setPageIndicatorTintColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPageControl_initWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageControl_initWithFrame : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageControl_initWithFrame : Error processing arguments");
        bool ret = cobj->initWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageControl_initWithFrame : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPageControl_setTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageControl_setTarget : Invalid Native Object");
    if (argc == 1) {
        std::function<void (int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](int larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = int32_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageControl_setTarget : Error processing arguments");
        cobj->setTarget(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageControl_setTarget : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPageControl_setSinglePage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageControl_setSinglePage : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageControl_setSinglePage : Error processing arguments");
        cobj->setSinglePage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageControl_setSinglePage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPageControl_getStyle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageControl_getStyle : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getStyle();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageControl_getStyle : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPageControl_getPageIndicatorTintColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageControl_getPageIndicatorTintColor : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAColor4B ret = cobj->getPageIndicatorTintColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageControl_getPageIndicatorTintColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPageControl_setStyle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageControl_setStyle : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAPageControl::Style arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageControl_setStyle : Error processing arguments");
        cobj->setStyle(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageControl_setStyle : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPageControl_isDefersCurrentPageDisplay(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageControl_isDefersCurrentPageDisplay : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isDefersCurrentPageDisplay();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageControl_isDefersCurrentPageDisplay : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPageControl_setCurrentPageIndicatorTintColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageControl_setCurrentPageIndicatorTintColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageControl_setCurrentPageIndicatorTintColor : Error processing arguments");
        cobj->setCurrentPageIndicatorTintColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageControl_setCurrentPageIndicatorTintColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPageControl_setCurrentPage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageControl_setCurrentPage : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageControl_setCurrentPage : Error processing arguments");
        cobj->setCurrentPage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageControl_setCurrentPage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPageControl_updateCurrentPageDisplay(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageControl_updateCurrentPageDisplay : Invalid Native Object");
    if (argc == 0) {
        cobj->updateCurrentPageDisplay();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageControl_updateCurrentPageDisplay : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPageControl_getCurrentPage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageControl_getCurrentPage : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getCurrentPage();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageControl_getCurrentPage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPageControl_getCurrentPageIndicatorTintColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageControl_getCurrentPageIndicatorTintColor : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAColor4B ret = cobj->getCurrentPageIndicatorTintColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageControl_getCurrentPageIndicatorTintColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPageControl_setCurrIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageControl_setCurrIndicatorImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageControl_setCurrIndicatorImage : Error processing arguments");
        cobj->setCurrIndicatorImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageControl_setCurrIndicatorImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPageControl_getCurrIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPageControl_getCurrIndicatorImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getCurrIndicatorImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPageControl_getCurrIndicatorImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPageControl_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAPageControl* ret = CrossApp::CAPageControl::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPageControl>(cx, (CrossApp::CAPageControl*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAPageControl_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CAPageControl_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageControl_createWithFrame : Error processing arguments");
        CrossApp::CAPageControl* ret = CrossApp::CAPageControl::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPageControl>(cx, (CrossApp::CAPageControl*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAPageControl_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CAPageControl_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageControl_createWithLayout : Error processing arguments");
        CrossApp::CAPageControl* ret = CrossApp::CAPageControl::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPageControl>(cx, (CrossApp::CAPageControl*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAPageControl_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CAPageControl_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPageControl_createWithCenter : Error processing arguments");
        CrossApp::CAPageControl* ret = CrossApp::CAPageControl::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPageControl>(cx, (CrossApp::CAPageControl*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAPageControl_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CAPageControl_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAPageControl* cobj = new (std::nothrow) CrossApp::CAPageControl();
    TypeTest<CrossApp::CAPageControl> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAPageControl");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAControl_prototype;

void js_CrossApp_CAPageControl_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAPageControl)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAPageControl *nobj = static_cast<CrossApp::CAPageControl *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAPageControl(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAPageControl_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAPageControl_class->name = "CAPageControl";
    jsb_CrossApp_CAPageControl_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAPageControl_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAPageControl_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAPageControl_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAPageControl_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAPageControl_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAPageControl_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAPageControl_class->finalize = js_CrossApp_CAPageControl_finalize;
    jsb_CrossApp_CAPageControl_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setDefersCurrentPageDisplay", js_crossapp_CAPageControl_setDefersCurrentPageDisplay, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPageIndicatorImage", js_crossapp_CAPageControl_getPageIndicatorImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithCenter", js_crossapp_CAPageControl_initWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isSinglePage", js_crossapp_CAPageControl_isSinglePage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPageIndicatorImage", js_crossapp_CAPageControl_setPageIndicatorImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setNumberOfPages", js_crossapp_CAPageControl_setNumberOfPages, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNumberOfPages", js_crossapp_CAPageControl_getNumberOfPages, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CAPageControl_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTouchEnabled", js_crossapp_CAPageControl_setTouchEnabled, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPageIndicatorTintColor", js_crossapp_CAPageControl_setPageIndicatorTintColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithFrame", js_crossapp_CAPageControl_initWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTarget", js_crossapp_CAPageControl_setTarget, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSinglePage", js_crossapp_CAPageControl_setSinglePage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getStyle", js_crossapp_CAPageControl_getStyle, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPageIndicatorTintColor", js_crossapp_CAPageControl_getPageIndicatorTintColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setStyle", js_crossapp_CAPageControl_setStyle, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isDefersCurrentPageDisplay", js_crossapp_CAPageControl_isDefersCurrentPageDisplay, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCurrentPageIndicatorTintColor", js_crossapp_CAPageControl_setCurrentPageIndicatorTintColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCurrentPage", js_crossapp_CAPageControl_setCurrentPage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("updateCurrentPageDisplay", js_crossapp_CAPageControl_updateCurrentPageDisplay, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCurrentPage", js_crossapp_CAPageControl_getCurrentPage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCurrentPageIndicatorTintColor", js_crossapp_CAPageControl_getCurrentPageIndicatorTintColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCurrIndicatorImage", js_crossapp_CAPageControl_setCurrIndicatorImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCurrIndicatorImage", js_crossapp_CAPageControl_getCurrIndicatorImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CAPageControl_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_crossapp_CAPageControl_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CAPageControl_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CAPageControl_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAPageControl_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAControl_prototype),
        jsb_CrossApp_CAPageControl_class,
        js_crossapp_CAPageControl_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAPageControl", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAPageControl> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAPageControl_class;
        p->proto = jsb_CrossApp_CAPageControl_prototype;
        p->parentProto = jsb_CrossApp_CAControl_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAStepper_class;
JSObject *jsb_CrossApp_CAStepper_prototype;

bool js_crossapp_CAStepper_setWraps(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_setWraps : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAStepper_setWraps : Error processing arguments");
        cobj->setWraps(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_setWraps : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAStepper_setValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_setValue : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAStepper_setValue : Error processing arguments");
        cobj->setValue(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_setValue : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAStepper_setTailorImageAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_setTailorImageAtIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAStepper_setTailorImageAtIndex : Error processing arguments");
        cobj->setTailorImageAtIndex(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_setTailorImageAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAStepper_getTailorImageAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_getTailorImageAtIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAStepper_getTailorImageAtIndex : Error processing arguments");
        CrossApp::CAView* ret = cobj->getTailorImageAtIndex(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_getTailorImageAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAStepper_getAutoRepeat(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_getAutoRepeat : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->getAutoRepeat();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_getAutoRepeat : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAStepper_setMinValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_setMinValue : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAStepper_setMinValue : Error processing arguments");
        cobj->setMinValue(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_setMinValue : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAStepper_getMinValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_getMinValue : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getMinValue();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_getMinValue : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAStepper_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAStepper_setDividerColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_setDividerColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAStepper_setDividerColor : Error processing arguments");
        cobj->setDividerColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_setDividerColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAStepper_getMaxValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_getMaxValue : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getMaxValue();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_getMaxValue : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAStepper_setDecrementImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_setDecrementImage : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAControl::State arg0;
        CrossApp::CAImage* arg1 = nullptr;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAStepper_setDecrementImage : Error processing arguments");
        cobj->setDecrementImage(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_setDecrementImage : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAStepper_getWraps(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_getWraps : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->getWraps();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_getWraps : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAStepper_setStepValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_setStepValue : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAStepper_setStepValue : Error processing arguments");
        cobj->setStepValue(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_setStepValue : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAStepper_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_setBackgroundImage : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAControl::State arg0;
        CrossApp::CAImage* arg1 = nullptr;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAStepper_setBackgroundImage : Error processing arguments");
        cobj->setBackgroundImage(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_setBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAStepper_setTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_setTarget : Invalid Native Object");
    if (argc == 1) {
        std::function<void (float)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](float larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = DOUBLE_TO_JSVAL(larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAStepper_setTarget : Error processing arguments");
        cobj->setTarget(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_setTarget : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAStepper_setAutoRepeat(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_setAutoRepeat : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAStepper_setAutoRepeat : Error processing arguments");
        cobj->setAutoRepeat(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_setAutoRepeat : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAStepper_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAStepper_getDividerColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_getDividerColor : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAColor4B ret = cobj->getDividerColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_getDividerColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAStepper_setTouchEffect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_setTouchEffect : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAStepper_setTouchEffect : Error processing arguments");
        cobj->setTouchEffect(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_setTouchEffect : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAStepper_setIncrementImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_setIncrementImage : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAControl::State arg0;
        CrossApp::CAImage* arg1 = nullptr;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAStepper_setIncrementImage : Error processing arguments");
        cobj->setIncrementImage(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_setIncrementImage : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAStepper_getStepValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_getStepValue : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getStepValue();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_getStepValue : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAStepper_setMaxValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_setMaxValue : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAStepper_setMaxValue : Error processing arguments");
        cobj->setMaxValue(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_setMaxValue : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAStepper_getValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_getValue : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getValue();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_getValue : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAStepper_getTouchEffect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_getTouchEffect : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->getTouchEffect();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_getTouchEffect : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAStepper_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAStepper_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAStepper_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAStepper_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 0) {
        CrossApp::CAStepper* ret = CrossApp::CAStepper::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAStepper>(cx, (CrossApp::CAStepper*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 1) {
        CrossApp::CAStepper::Orientation arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAStepper_create : Error processing arguments");
        CrossApp::CAStepper* ret = CrossApp::CAStepper::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAStepper>(cx, (CrossApp::CAStepper*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAStepper_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CAStepper_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAStepper_createWithFrame : Error processing arguments");
        CrossApp::CAStepper* ret = CrossApp::CAStepper::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAStepper>(cx, (CrossApp::CAStepper*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::DRect arg0;
        CrossApp::CAStepper::Orientation arg1;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAStepper_createWithFrame : Error processing arguments");
        CrossApp::CAStepper* ret = CrossApp::CAStepper::createWithFrame(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAStepper>(cx, (CrossApp::CAStepper*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAStepper_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CAStepper_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAStepper_createWithLayout : Error processing arguments");
        CrossApp::CAStepper* ret = CrossApp::CAStepper::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAStepper>(cx, (CrossApp::CAStepper*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::DLayout arg0;
        CrossApp::CAStepper::Orientation arg1;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAStepper_createWithLayout : Error processing arguments");
        CrossApp::CAStepper* ret = CrossApp::CAStepper::createWithLayout(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAStepper>(cx, (CrossApp::CAStepper*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAStepper_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CAStepper_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAStepper_createWithCenter : Error processing arguments");
        CrossApp::CAStepper* ret = CrossApp::CAStepper::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAStepper>(cx, (CrossApp::CAStepper*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::DRect arg0;
        CrossApp::CAStepper::Orientation arg1;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAStepper_createWithCenter : Error processing arguments");
        CrossApp::CAStepper* ret = CrossApp::CAStepper::createWithCenter(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAStepper>(cx, (CrossApp::CAStepper*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAStepper_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CAStepper_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAStepper* cobj = new (std::nothrow) CrossApp::CAStepper();
    TypeTest<CrossApp::CAStepper> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAStepper");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAControl_prototype;

void js_CrossApp_CAStepper_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAStepper)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAStepper *nobj = static_cast<CrossApp::CAStepper *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAStepper(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAStepper_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAStepper_class->name = "CAStepper";
    jsb_CrossApp_CAStepper_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAStepper_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAStepper_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAStepper_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAStepper_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAStepper_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAStepper_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAStepper_class->finalize = js_CrossApp_CAStepper_finalize;
    jsb_CrossApp_CAStepper_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setWraps", js_crossapp_CAStepper_setWraps, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setValue", js_crossapp_CAStepper_setValue, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTailorImageAtIndex", js_crossapp_CAStepper_setTailorImageAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTailorImageAtIndex", js_crossapp_CAStepper_getTailorImageAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAutoRepeat", js_crossapp_CAStepper_getAutoRepeat, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMinValue", js_crossapp_CAStepper_setMinValue, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMinValue", js_crossapp_CAStepper_getMinValue, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CAStepper_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDividerColor", js_crossapp_CAStepper_setDividerColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMaxValue", js_crossapp_CAStepper_getMaxValue, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDecrementImage", js_crossapp_CAStepper_setDecrementImage, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getWraps", js_crossapp_CAStepper_getWraps, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setStepValue", js_crossapp_CAStepper_setStepValue, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundImage", js_crossapp_CAStepper_setBackgroundImage, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTarget", js_crossapp_CAStepper_setTarget, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAutoRepeat", js_crossapp_CAStepper_setAutoRepeat, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_crossapp_CAStepper_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDividerColor", js_crossapp_CAStepper_getDividerColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTouchEffect", js_crossapp_CAStepper_setTouchEffect, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setIncrementImage", js_crossapp_CAStepper_setIncrementImage, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getStepValue", js_crossapp_CAStepper_getStepValue, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMaxValue", js_crossapp_CAStepper_setMaxValue, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getValue", js_crossapp_CAStepper_getValue, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTouchEffect", js_crossapp_CAStepper_getTouchEffect, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_crossapp_CAStepper_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CAStepper_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_crossapp_CAStepper_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CAStepper_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CAStepper_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAStepper_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAControl_prototype),
        jsb_CrossApp_CAStepper_class,
        js_crossapp_CAStepper_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAStepper", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAStepper> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAStepper_class;
        p->proto = jsb_CrossApp_CAStepper_prototype;
        p->parentProto = jsb_CrossApp_CAControl_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CACheckbox_class;
JSObject *jsb_CrossApp_CACheckbox_prototype;

bool js_crossapp_CACheckbox_setImageSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_setImageSize : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACheckbox_setImageSize : Error processing arguments");
        cobj->setImageSize(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_setImageSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACheckbox_setTitleFontSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_setTitleFontSize : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACheckbox_setTitleFontSize : Error processing arguments");
        cobj->setTitleFontSize(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_setTitleFontSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACheckbox_setTitleColorStateSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_setTitleColorStateSelected : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACheckbox_setTitleColorStateSelected : Error processing arguments");
        cobj->setTitleColorStateSelected(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_setTitleColorStateSelected : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACheckbox_setTitleStateSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_setTitleStateSelected : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACheckbox_setTitleStateSelected : Error processing arguments");
        cobj->setTitleStateSelected(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_setTitleStateSelected : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACheckbox_setTitleTextAlignment(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_setTitleTextAlignment : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATextAlignment arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACheckbox_setTitleTextAlignment : Error processing arguments");
        cobj->setTitleTextAlignment(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_setTitleTextAlignment : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACheckbox_setImageColorStateSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_setImageColorStateSelected : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACheckbox_setImageColorStateSelected : Error processing arguments");
        cobj->setImageColorStateSelected(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_setImageColorStateSelected : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACheckbox_isOn(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_isOn : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isOn();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_isOn : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACheckbox_getImageStateNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_getImageStateNormal : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getImageStateNormal();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_getImageStateNormal : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACheckbox_setImageColorStateNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_setImageColorStateNormal : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACheckbox_setImageColorStateNormal : Error processing arguments");
        cobj->setImageColorStateNormal(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_setImageColorStateNormal : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACheckbox_setTitleLabelSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_setTitleLabelSize : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACheckbox_setTitleLabelSize : Error processing arguments");
        cobj->setTitleLabelSize(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_setTitleLabelSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACheckbox_setImageStateSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_setImageStateSelected : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACheckbox_setImageStateSelected : Error processing arguments");
        cobj->setImageStateSelected(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_setImageStateSelected : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACheckbox_setIsOn(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_setIsOn : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACheckbox_setIsOn : Error processing arguments");
        cobj->setIsOn(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_setIsOn : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACheckbox_setTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_setTarget : Invalid Native Object");
    if (argc == 1) {
        std::function<void (bool)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](bool larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = BOOLEAN_TO_JSVAL(larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACheckbox_setTarget : Error processing arguments");
        cobj->setTarget(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_setTarget : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACheckbox_getTitleStateNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_getTitleStateNormal : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getTitleStateNormal();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_getTitleStateNormal : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACheckbox_setTitleFontName(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_setTitleFontName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACheckbox_setTitleFontName : Error processing arguments");
        cobj->setTitleFontName(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_setTitleFontName : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACheckbox_setTitleStateNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_setTitleStateNormal : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACheckbox_setTitleStateNormal : Error processing arguments");
        cobj->setTitleStateNormal(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_setTitleStateNormal : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACheckbox_setTitleFont(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_setTitleFont : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAFont arg0;
        ok &= jsval_to_cafont(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACheckbox_setTitleFont : Error processing arguments");
        cobj->setTitleFont(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_setTitleFont : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACheckbox_setTitleOffset(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_setTitleOffset : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACheckbox_setTitleOffset : Error processing arguments");
        cobj->setTitleOffset(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_setTitleOffset : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACheckbox_setTitleColorStateNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_setTitleColorStateNormal : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACheckbox_setTitleColorStateNormal : Error processing arguments");
        cobj->setTitleColorStateNormal(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_setTitleColorStateNormal : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACheckbox_getTitleFont(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_getTitleFont : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAFont& ret = cobj->getTitleFont();
        jsval jsret = JSVAL_NULL;
        jsret = cafont_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_getTitleFont : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACheckbox_getImageStateSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_getImageStateSelected : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getImageStateSelected();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_getImageStateSelected : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACheckbox_setTitleBold(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_setTitleBold : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACheckbox_setTitleBold : Error processing arguments");
        cobj->setTitleBold(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_setTitleBold : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACheckbox_setImageOffset(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_setImageOffset : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACheckbox_setImageOffset : Error processing arguments");
        cobj->setImageOffset(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_setImageOffset : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACheckbox_setImageStateNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_setImageStateNormal : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACheckbox_setImageStateNormal : Error processing arguments");
        cobj->setImageStateNormal(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_setImageStateNormal : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACheckbox_getTitleStateSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACheckbox* cobj = (CrossApp::CACheckbox *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACheckbox_getTitleStateSelected : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getTitleStateSelected();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACheckbox_getTitleStateSelected : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACheckbox_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CACheckbox::Type arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACheckbox_create : Error processing arguments");
        CrossApp::CACheckbox* ret = CrossApp::CACheckbox::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACheckbox>(cx, (CrossApp::CACheckbox*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CACheckbox_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CACheckbox_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DRect arg0;
        CrossApp::CACheckbox::Type arg1;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACheckbox_createWithFrame : Error processing arguments");
        CrossApp::CACheckbox* ret = CrossApp::CACheckbox::createWithFrame(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACheckbox>(cx, (CrossApp::CACheckbox*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CACheckbox_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CACheckbox_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DLayout arg0;
        CrossApp::CACheckbox::Type arg1;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACheckbox_createWithLayout : Error processing arguments");
        CrossApp::CACheckbox* ret = CrossApp::CACheckbox::createWithLayout(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACheckbox>(cx, (CrossApp::CACheckbox*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CACheckbox_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CACheckbox_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DRect arg0;
        CrossApp::CACheckbox::Type arg1;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACheckbox_createWithCenter : Error processing arguments");
        CrossApp::CACheckbox* ret = CrossApp::CACheckbox::createWithCenter(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACheckbox>(cx, (CrossApp::CACheckbox*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CACheckbox_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CACheckbox_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CACheckbox::Type arg0;
    ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
    JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACheckbox_constructor : Error processing arguments");
    CrossApp::CACheckbox* cobj = new (std::nothrow) CrossApp::CACheckbox(arg0);
    TypeTest<CrossApp::CACheckbox> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CACheckbox");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAControl_prototype;

void js_CrossApp_CACheckbox_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CACheckbox)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CACheckbox *nobj = static_cast<CrossApp::CACheckbox *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CACheckbox(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CACheckbox_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CACheckbox_class->name = "CACheckbox";
    jsb_CrossApp_CACheckbox_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CACheckbox_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CACheckbox_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CACheckbox_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CACheckbox_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CACheckbox_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CACheckbox_class->convert = JS_ConvertStub;
    jsb_CrossApp_CACheckbox_class->finalize = js_CrossApp_CACheckbox_finalize;
    jsb_CrossApp_CACheckbox_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setImageSize", js_crossapp_CACheckbox_setImageSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleFontSize", js_crossapp_CACheckbox_setTitleFontSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleColorStateSelected", js_crossapp_CACheckbox_setTitleColorStateSelected, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleStateSelected", js_crossapp_CACheckbox_setTitleStateSelected, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleTextAlignment", js_crossapp_CACheckbox_setTitleTextAlignment, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageColorStateSelected", js_crossapp_CACheckbox_setImageColorStateSelected, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isOn", js_crossapp_CACheckbox_isOn, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImageStateNormal", js_crossapp_CACheckbox_getImageStateNormal, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageColorStateNormal", js_crossapp_CACheckbox_setImageColorStateNormal, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleLabelSize", js_crossapp_CACheckbox_setTitleLabelSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageStateSelected", js_crossapp_CACheckbox_setImageStateSelected, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setIsOn", js_crossapp_CACheckbox_setIsOn, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTarget", js_crossapp_CACheckbox_setTarget, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitleStateNormal", js_crossapp_CACheckbox_getTitleStateNormal, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleFontName", js_crossapp_CACheckbox_setTitleFontName, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleStateNormal", js_crossapp_CACheckbox_setTitleStateNormal, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleFont", js_crossapp_CACheckbox_setTitleFont, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleOffset", js_crossapp_CACheckbox_setTitleOffset, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleColorStateNormal", js_crossapp_CACheckbox_setTitleColorStateNormal, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitleFont", js_crossapp_CACheckbox_getTitleFont, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImageStateSelected", js_crossapp_CACheckbox_getImageStateSelected, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleBold", js_crossapp_CACheckbox_setTitleBold, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageOffset", js_crossapp_CACheckbox_setImageOffset, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageStateNormal", js_crossapp_CACheckbox_setImageStateNormal, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitleStateSelected", js_crossapp_CACheckbox_getTitleStateSelected, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CACheckbox_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_crossapp_CACheckbox_createWithFrame, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CACheckbox_createWithLayout, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CACheckbox_createWithCenter, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CACheckbox_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAControl_prototype),
        jsb_CrossApp_CACheckbox_class,
        js_crossapp_CACheckbox_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CACheckbox", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CACheckbox> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CACheckbox_class;
        p->proto = jsb_CrossApp_CACheckbox_prototype;
        p->parentProto = jsb_CrossApp_CAControl_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CADrawerController_class;
JSObject *jsb_CrossApp_CADrawerController_prototype;

bool js_crossapp_CADrawerController_hideLeftViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawerController_hideLeftViewController : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawerController_hideLeftViewController : Error processing arguments");
        cobj->hideLeftViewController(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawerController_hideLeftViewController : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CADrawerController_isReachBoundaryLeft(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawerController_isReachBoundaryLeft : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryLeft();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawerController_isReachBoundaryLeft : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CADrawerController_showLeftViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawerController_showLeftViewController : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawerController_showLeftViewController : Error processing arguments");
        cobj->showLeftViewController(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawerController_showLeftViewController : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CADrawerController_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawerController_setBackgroundImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawerController_setBackgroundImage : Error processing arguments");
        cobj->setBackgroundImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawerController_setBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CADrawerController_setTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawerController_setTouchMoved : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawerController_setTouchMoved : Error processing arguments");
        cobj->setTouchMoved(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawerController_setTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CADrawerController_getEffect3D(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawerController_getEffect3D : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->getEffect3D();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawerController_getEffect3D : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CADrawerController_getRightViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawerController_getRightViewController : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAViewController* ret = cobj->getRightViewController();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAViewController>(cx, (CrossApp::CAViewController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawerController_getRightViewController : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CADrawerController_isShowLeftViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawerController_isShowLeftViewController : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isShowLeftViewController();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawerController_isShowLeftViewController : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CADrawerController_initWithController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawerController_initWithController : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAViewController* arg0 = nullptr;
        CrossApp::CAViewController* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawerController_initWithController : Error processing arguments");
        bool ret = cobj->initWithController(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawerController_initWithController : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CADrawerController_setEffect3D(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawerController_setEffect3D : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawerController_setEffect3D : Error processing arguments");
        cobj->setEffect3D(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawerController_setEffect3D : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CADrawerController_isReachBoundaryRight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawerController_isReachBoundaryRight : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryRight();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawerController_isReachBoundaryRight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CADrawerController_replaceRightViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawerController_replaceRightViewController : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAViewController* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawerController_replaceRightViewController : Error processing arguments");
        cobj->replaceRightViewController(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawerController_replaceRightViewController : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CADrawerController_getLeftViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawerController_getLeftViewController : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAViewController* ret = cobj->getLeftViewController();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAViewController>(cx, (CrossApp::CAViewController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawerController_getLeftViewController : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CADrawerController_isTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawerController_isTouchMoved : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isTouchMoved();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawerController_isTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CADrawerController_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CADrawerController* cobj = new (std::nothrow) CrossApp::CADrawerController();
    TypeTest<CrossApp::CADrawerController> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CADrawerController");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAViewController_prototype;

void js_CrossApp_CADrawerController_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CADrawerController)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CADrawerController *nobj = static_cast<CrossApp::CADrawerController *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CADrawerController(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CADrawerController_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CADrawerController_class->name = "CADrawerController";
    jsb_CrossApp_CADrawerController_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CADrawerController_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CADrawerController_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CADrawerController_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CADrawerController_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CADrawerController_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CADrawerController_class->convert = JS_ConvertStub;
    jsb_CrossApp_CADrawerController_class->finalize = js_CrossApp_CADrawerController_finalize;
    jsb_CrossApp_CADrawerController_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("hideLeftViewController", js_crossapp_CADrawerController_hideLeftViewController, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryLeft", js_crossapp_CADrawerController_isReachBoundaryLeft, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("showLeftViewController", js_crossapp_CADrawerController_showLeftViewController, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundImage", js_crossapp_CADrawerController_setBackgroundImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTouchMoved", js_crossapp_CADrawerController_setTouchMoved, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getEffect3D", js_crossapp_CADrawerController_getEffect3D, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRightViewController", js_crossapp_CADrawerController_getRightViewController, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isShowLeftViewController", js_crossapp_CADrawerController_isShowLeftViewController, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithController", js_crossapp_CADrawerController_initWithController, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setEffect3D", js_crossapp_CADrawerController_setEffect3D, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryRight", js_crossapp_CADrawerController_isReachBoundaryRight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("replaceRightViewController", js_crossapp_CADrawerController_replaceRightViewController, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getLeftViewController", js_crossapp_CADrawerController_getLeftViewController, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isTouchMoved", js_crossapp_CADrawerController_isTouchMoved, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CADrawerController_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAViewController_prototype),
        jsb_CrossApp_CADrawerController_class,
        js_crossapp_CADrawerController_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CADrawerController", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CADrawerController> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CADrawerController_class;
        p->proto = jsb_CrossApp_CADrawerController_prototype;
        p->parentProto = jsb_CrossApp_CAViewController_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CATouchController_class;
JSObject *jsb_CrossApp_CATouchController_prototype;

bool js_crossapp_CATouchController_touchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchController* cobj = (CrossApp::CATouchController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATouchController_touchMoved : Invalid Native Object");
    if (argc == 0) {
        cobj->touchMoved();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATouchController_touchMoved : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATouchController_setEvent(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchController* cobj = (CrossApp::CATouchController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATouchController_setEvent : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAEvent* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATouchController_setEvent : Error processing arguments");
        cobj->setEvent(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATouchController_setEvent : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATouchController_getEvent(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchController* cobj = (CrossApp::CATouchController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATouchController_getEvent : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAEvent* ret = cobj->getEvent();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAEvent>(cx, (CrossApp::CAEvent*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATouchController_getEvent : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATouchController_getTouch(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchController* cobj = (CrossApp::CATouchController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATouchController_getTouch : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CATouch* ret = cobj->getTouch();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATouch>(cx, (CrossApp::CATouch*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATouchController_getTouch : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATouchController_touchBegan(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchController* cobj = (CrossApp::CATouchController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATouchController_touchBegan : Invalid Native Object");
    if (argc == 0) {
        cobj->touchBegan();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATouchController_touchBegan : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATouchController_touchEnded(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchController* cobj = (CrossApp::CATouchController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATouchController_touchEnded : Invalid Native Object");
    if (argc == 0) {
        cobj->touchEnded();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATouchController_touchEnded : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATouchController_getTouchID(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchController* cobj = (CrossApp::CATouchController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATouchController_getTouchID : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getTouchID();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATouchController_getTouchID : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATouchController_setTouch(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchController* cobj = (CrossApp::CATouchController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATouchController_setTouch : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATouch* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATouchController_setTouch : Error processing arguments");
        cobj->setTouch(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATouchController_setTouch : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATouchController_touchCancelled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchController* cobj = (CrossApp::CATouchController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATouchController_touchCancelled : Invalid Native Object");
    if (argc == 0) {
        cobj->touchCancelled();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATouchController_touchCancelled : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATouchController_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CATouchController* cobj = new (std::nothrow) CrossApp::CATouchController();
    TypeTest<CrossApp::CATouchController> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CATouchController");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CATouchController_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CATouchController)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATouchController *nobj = static_cast<CrossApp::CATouchController *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CATouchController(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATouchController_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATouchController_class->name = "CATouchController";
    jsb_CrossApp_CATouchController_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATouchController_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATouchController_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATouchController_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATouchController_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATouchController_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATouchController_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATouchController_class->finalize = js_CrossApp_CATouchController_finalize;
    jsb_CrossApp_CATouchController_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("touchMoved", js_crossapp_CATouchController_touchMoved, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setEvent", js_crossapp_CATouchController_setEvent, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getEvent", js_crossapp_CATouchController_getEvent, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTouch", js_crossapp_CATouchController_getTouch, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("touchBegan", js_crossapp_CATouchController_touchBegan, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("touchEnded", js_crossapp_CATouchController_touchEnded, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTouchID", js_crossapp_CATouchController_getTouchID, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTouch", js_crossapp_CATouchController_setTouch, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("touchCancelled", js_crossapp_CATouchController_touchCancelled, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CATouchController_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CATouchController_class,
        js_crossapp_CATouchController_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CATouchController", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATouchController> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATouchController_class;
        p->proto = jsb_CrossApp_CATouchController_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAKeypadDispatcher_class;
JSObject *jsb_CrossApp_CAKeypadDispatcher_prototype;

bool js_crossapp_CAKeypadDispatcher_onBackClicked(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAKeypadDispatcher* cobj = (CrossApp::CAKeypadDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAKeypadDispatcher_onBackClicked : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAKeypadDispatcher_onBackClicked : Error processing arguments");
        cobj->onBackClicked(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAKeypadDispatcher_onBackClicked : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAKeypadDispatcher_onMenuClicked(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAKeypadDispatcher* cobj = (CrossApp::CAKeypadDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAKeypadDispatcher_onMenuClicked : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAKeypadDispatcher_onMenuClicked : Error processing arguments");
        cobj->onMenuClicked(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAKeypadDispatcher_onMenuClicked : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAKeypadDispatcher_dispatchKeypadMSG(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAKeypadDispatcher* cobj = (CrossApp::CAKeypadDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAKeypadDispatcher_dispatchKeypadMSG : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAKeypadDispatcher::KeypadMSGType arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAKeypadDispatcher_dispatchKeypadMSG : Error processing arguments");
        bool ret = cobj->dispatchKeypadMSG(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAKeypadDispatcher_dispatchKeypadMSG : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAKeypadDispatcher_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAKeypadDispatcher* cobj = new (std::nothrow) CrossApp::CAKeypadDispatcher();
    TypeTest<CrossApp::CAKeypadDispatcher> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAKeypadDispatcher");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAKeypadDispatcher_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAKeypadDispatcher)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAKeypadDispatcher *nobj = static_cast<CrossApp::CAKeypadDispatcher *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAKeypadDispatcher(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAKeypadDispatcher_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAKeypadDispatcher_class->name = "CAKeypadDispatcher";
    jsb_CrossApp_CAKeypadDispatcher_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAKeypadDispatcher_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAKeypadDispatcher_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAKeypadDispatcher_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAKeypadDispatcher_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAKeypadDispatcher_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAKeypadDispatcher_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAKeypadDispatcher_class->finalize = js_CrossApp_CAKeypadDispatcher_finalize;
    jsb_CrossApp_CAKeypadDispatcher_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("onBackClicked", js_crossapp_CAKeypadDispatcher_onBackClicked, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onMenuClicked", js_crossapp_CAKeypadDispatcher_onMenuClicked, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("dispatchKeypadMSG", js_crossapp_CAKeypadDispatcher_dispatchKeypadMSG, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAKeypadDispatcher_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAKeypadDispatcher_class,
        js_crossapp_CAKeypadDispatcher_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAKeypadDispatcher", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAKeypadDispatcher> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAKeypadDispatcher_class;
        p->proto = jsb_CrossApp_CAKeypadDispatcher_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAGif_class;
JSObject *jsb_CrossApp_CAGif_prototype;

bool js_crossapp_CAGif_getDelay(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGif* cobj = (CrossApp::CAGif *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAGif_getDelay : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getDelay();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAGif_getDelay : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAGif_getImages(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGif* cobj = (CrossApp::CAGif *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAGif_getImages : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAVector<CrossApp::CAImage *> ret = cobj->getImages();
        jsval jsret = JSVAL_NULL;
        jsret = cavector_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAGif_getImages : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAGif_initWithFilePath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGif* cobj = (CrossApp::CAGif *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAGif_initWithFilePath : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAGif_initWithFilePath : Error processing arguments");
        bool ret = cobj->initWithFilePath(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAGif_initWithFilePath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAGif_initWithData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGif* cobj = (CrossApp::CAGif *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAGif_initWithData : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAData* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAData*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAGif_initWithData : Error processing arguments");
        bool ret = cobj->initWithData(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAGif_initWithData : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAGif_getImageWithIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGif* cobj = (CrossApp::CAGif *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAGif_getImageWithIndex : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAGif_getImageWithIndex : Error processing arguments");
        CrossApp::CAImage* ret = cobj->getImageWithIndex(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAGif_getImageWithIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAGif_getPixelsHigh(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGif* cobj = (CrossApp::CAGif *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAGif_getPixelsHigh : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getPixelsHigh();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAGif_getPixelsHigh : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAGif_getPixelsWide(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGif* cobj = (CrossApp::CAGif *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAGif_getPixelsWide : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getPixelsWide();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAGif_getPixelsWide : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAGif_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAGif_create : Error processing arguments");
        CrossApp::CAGif* ret = CrossApp::CAGif::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAGif>(cx, (CrossApp::CAGif*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAGif_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CAGif_createWithData(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAData* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAData*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAGif_createWithData : Error processing arguments");
        CrossApp::CAGif* ret = CrossApp::CAGif::createWithData(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAGif>(cx, (CrossApp::CAGif*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAGif_createWithData : wrong number of arguments");
    return false;
}
bool js_crossapp_CAGif_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAGif* cobj = new (std::nothrow) CrossApp::CAGif();
    TypeTest<CrossApp::CAGif> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAGif");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAGif_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAGif)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAGif *nobj = static_cast<CrossApp::CAGif *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAGif(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAGif_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAGif_class->name = "CAGif";
    jsb_CrossApp_CAGif_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAGif_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAGif_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAGif_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAGif_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAGif_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAGif_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAGif_class->finalize = js_CrossApp_CAGif_finalize;
    jsb_CrossApp_CAGif_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getDelay", js_crossapp_CAGif_getDelay, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImages", js_crossapp_CAGif_getImages, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithFilePath", js_crossapp_CAGif_initWithFilePath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithData", js_crossapp_CAGif_initWithData, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImageWithIndex", js_crossapp_CAGif_getImageWithIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPixelsHigh", js_crossapp_CAGif_getPixelsHigh, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPixelsWide", js_crossapp_CAGif_getPixelsWide, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CAGif_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithData", js_crossapp_CAGif_createWithData, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAGif_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAGif_class,
        js_crossapp_CAGif_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAGif", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAGif> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAGif_class;
        p->proto = jsb_CrossApp_CAGif_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAQrencode_class;
JSObject *jsb_CrossApp_CAQrencode_prototype;

bool js_crossapp_CAQrencode_createWithQRString(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 3) {
            std::string arg0;
            ok &= jsval_to_std_string(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            uint32_t arg1 = 0;
            ok &= jsval_to_uint32(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAColor4B arg2;
            ok &= jsval_to_cacolor4b(cx, args.get(2), &arg2);
            if (!ok) { ok = true; break; }
            CrossApp::CAImage* ret = CrossApp::CAQrencode::createWithQRString(arg0, arg1, arg2);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 2) {
            std::string arg0;
            ok &= jsval_to_std_string(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            uint32_t arg1 = 0;
            ok &= jsval_to_uint32(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAImage* ret = CrossApp::CAQrencode::createWithQRString(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 4) {
            std::string arg0;
            ok &= jsval_to_std_string(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            uint32_t arg1 = 0;
            ok &= jsval_to_uint32(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAColor4B arg2;
            ok &= jsval_to_cacolor4b(cx, args.get(2), &arg2);
            if (!ok) { ok = true; break; }
            CrossApp::CAColor4B arg3;
            ok &= jsval_to_cacolor4b(cx, args.get(3), &arg3);
            if (!ok) { ok = true; break; }
            CrossApp::CAImage* ret = CrossApp::CAQrencode::createWithQRString(arg0, arg1, arg2, arg3);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_crossapp_CAQrencode_createWithQRString : wrong number of arguments");
    return false;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAQrencode_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAQrencode)", obj);
}
void js_register_crossapp_CAQrencode(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAQrencode_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAQrencode_class->name = "CAQrencode";
    jsb_CrossApp_CAQrencode_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAQrencode_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAQrencode_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAQrencode_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAQrencode_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAQrencode_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAQrencode_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAQrencode_class->finalize = js_CrossApp_CAQrencode_finalize;
    jsb_CrossApp_CAQrencode_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithQRString", js_crossapp_CAQrencode_createWithQRString, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAQrencode_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAQrencode_class,
        dummy_constructor<CrossApp::CAQrencode>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAQrencode", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAQrencode> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAQrencode_class;
        p->proto = jsb_CrossApp_CAQrencode_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAGifView_class;
JSObject *jsb_CrossApp_CAGifView_prototype;

bool js_crossapp_CAGifView_setTimes(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGifView* cobj = (CrossApp::CAGifView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAGifView_setTimes : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAGifView_setTimes : Error processing arguments");
        cobj->setTimes(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAGifView_setTimes : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAGifView_onEnter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGifView* cobj = (CrossApp::CAGifView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAGifView_onEnter : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnter();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAGifView_onEnter : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAGifView_onExit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGifView* cobj = (CrossApp::CAGifView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAGifView_onExit : Invalid Native Object");
    if (argc == 0) {
        cobj->onExit();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAGifView_onExit : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAGifView_initWithGif(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGifView* cobj = (CrossApp::CAGifView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAGifView_initWithGif : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAGif* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAGif*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAGifView_initWithGif : Error processing arguments");
        bool ret = cobj->initWithGif(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAGifView_initWithGif : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAGifView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGifView* cobj = (CrossApp::CAGifView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAGifView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAGifView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAGifView_setGif(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGifView* cobj = (CrossApp::CAGifView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAGifView_setGif : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAGif* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAGif*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAGifView_setGif : Error processing arguments");
        cobj->setGif(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAGifView_setGif : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAGifView_getGif(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGifView* cobj = (CrossApp::CAGifView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAGifView_getGif : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAGif* ret = cobj->getGif();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAGif>(cx, (CrossApp::CAGif*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAGifView_getGif : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAGifView_isRepeatForever(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGifView* cobj = (CrossApp::CAGifView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAGifView_isRepeatForever : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isRepeatForever();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAGifView_isRepeatForever : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAGifView_setRepeatForever(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGifView* cobj = (CrossApp::CAGifView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAGifView_setRepeatForever : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAGifView_setRepeatForever : Error processing arguments");
        cobj->setRepeatForever(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAGifView_setRepeatForever : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAGifView_createWithGif(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAGif* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAGif*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAGifView_createWithGif : Error processing arguments");
        CrossApp::CAGifView* ret = CrossApp::CAGifView::createWithGif(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAGifView>(cx, (CrossApp::CAGifView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAGifView_createWithGif : wrong number of arguments");
    return false;
}
bool js_crossapp_CAGifView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAGifView_createWithFrame : Error processing arguments");
        CrossApp::CAGifView* ret = CrossApp::CAGifView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAGifView>(cx, (CrossApp::CAGifView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAGifView_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CAGifView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAGifView_createWithLayout : Error processing arguments");
        CrossApp::CAGifView* ret = CrossApp::CAGifView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAGifView>(cx, (CrossApp::CAGifView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAGifView_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CAGifView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAGifView_createWithCenter : Error processing arguments");
        CrossApp::CAGifView* ret = CrossApp::CAGifView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAGifView>(cx, (CrossApp::CAGifView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAGifView_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CAGifView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAGifView* cobj = new (std::nothrow) CrossApp::CAGifView();
    TypeTest<CrossApp::CAGifView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAGifView");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAGifView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAGifView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAGifView *nobj = static_cast<CrossApp::CAGifView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAGifView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAGifView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAGifView_class->name = "CAGifView";
    jsb_CrossApp_CAGifView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAGifView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAGifView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAGifView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAGifView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAGifView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAGifView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAGifView_class->finalize = js_CrossApp_CAGifView_finalize;
    jsb_CrossApp_CAGifView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setTimes", js_crossapp_CAGifView_setTimes, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnter", js_crossapp_CAGifView_onEnter, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExit", js_crossapp_CAGifView_onExit, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithGif", js_crossapp_CAGifView_initWithGif, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CAGifView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setGif", js_crossapp_CAGifView_setGif, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getGif", js_crossapp_CAGifView_getGif, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isRepeatForever", js_crossapp_CAGifView_isRepeatForever, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setRepeatForever", js_crossapp_CAGifView_setRepeatForever, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithGif", js_crossapp_CAGifView_createWithGif, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_crossapp_CAGifView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CAGifView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CAGifView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAGifView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAGifView_class,
        js_crossapp_CAGifView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAGifView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAGifView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAGifView_class;
        p->proto = jsb_CrossApp_CAGifView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CARichLabel_class;
JSObject *jsb_CrossApp_CARichLabel_prototype;

bool js_crossapp_CARichLabel_setTextAlignment(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARichLabel* cobj = (CrossApp::CARichLabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARichLabel_setTextAlignment : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATextAlignment arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CARichLabel_setTextAlignment : Error processing arguments");
        cobj->setTextAlignment(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CARichLabel_setTextAlignment : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CARichLabel_setVerticalTextAlignmet(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARichLabel* cobj = (CrossApp::CARichLabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARichLabel_setVerticalTextAlignmet : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAVerticalTextAlignment arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CARichLabel_setVerticalTextAlignmet : Error processing arguments");
        cobj->setVerticalTextAlignmet(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CARichLabel_setVerticalTextAlignmet : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CARichLabel_visitEve(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARichLabel* cobj = (CrossApp::CARichLabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARichLabel_visitEve : Invalid Native Object");
    if (argc == 0) {
        cobj->visitEve();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CARichLabel_visitEve : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CARichLabel_clear(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARichLabel* cobj = (CrossApp::CARichLabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARichLabel_clear : Invalid Native Object");
    if (argc == 0) {
        cobj->clear();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CARichLabel_clear : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CARichLabel_getLabelSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARichLabel* cobj = (CrossApp::CARichLabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARichLabel_getLabelSize : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DSize& ret = cobj->getLabelSize();
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CARichLabel_getLabelSize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CARichLabel_setNumberOfLine(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARichLabel* cobj = (CrossApp::CARichLabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARichLabel_setNumberOfLine : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CARichLabel_setNumberOfLine : Error processing arguments");
        cobj->setNumberOfLine(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CARichLabel_setNumberOfLine : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CARichLabel_appendText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARichLabel* cobj = (CrossApp::CARichLabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CARichLabel_appendText : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        CrossApp::CAFont arg1;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_cafont(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CARichLabel_appendText : Error processing arguments");
        cobj->appendText(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CARichLabel_appendText : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CARichLabel_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CARichLabel* ret = CrossApp::CARichLabel::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CARichLabel>(cx, (CrossApp::CARichLabel*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CARichLabel_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CARichLabel_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CARichLabel_createWithFrame : Error processing arguments");
        CrossApp::CARichLabel* ret = CrossApp::CARichLabel::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CARichLabel>(cx, (CrossApp::CARichLabel*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CARichLabel_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CARichLabel_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CARichLabel_createWithLayout : Error processing arguments");
        CrossApp::CARichLabel* ret = CrossApp::CARichLabel::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CARichLabel>(cx, (CrossApp::CARichLabel*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CARichLabel_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CARichLabel_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CARichLabel_createWithCenter : Error processing arguments");
        CrossApp::CARichLabel* ret = CrossApp::CARichLabel::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CARichLabel>(cx, (CrossApp::CARichLabel*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CARichLabel_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CARichLabel_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CARichLabel* cobj = new (std::nothrow) CrossApp::CARichLabel();
    TypeTest<CrossApp::CARichLabel> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CARichLabel");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CARichLabel_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CARichLabel)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CARichLabel *nobj = static_cast<CrossApp::CARichLabel *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CARichLabel(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CARichLabel_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CARichLabel_class->name = "CARichLabel";
    jsb_CrossApp_CARichLabel_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CARichLabel_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CARichLabel_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CARichLabel_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CARichLabel_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CARichLabel_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CARichLabel_class->convert = JS_ConvertStub;
    jsb_CrossApp_CARichLabel_class->finalize = js_CrossApp_CARichLabel_finalize;
    jsb_CrossApp_CARichLabel_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setTextAlignment", js_crossapp_CARichLabel_setTextAlignment, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setVerticalTextAlignmet", js_crossapp_CARichLabel_setVerticalTextAlignmet, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("visitEve", js_crossapp_CARichLabel_visitEve, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("clear", js_crossapp_CARichLabel_clear, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getLabelSize", js_crossapp_CARichLabel_getLabelSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setNumberOfLine", js_crossapp_CARichLabel_setNumberOfLine, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("appendText", js_crossapp_CARichLabel_appendText, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CARichLabel_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_crossapp_CARichLabel_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CARichLabel_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CARichLabel_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CARichLabel_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CARichLabel_class,
        js_crossapp_CARichLabel_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CARichLabel", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CARichLabel> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CARichLabel_class;
        p->proto = jsb_CrossApp_CARichLabel_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CACell_class;
JSObject *jsb_CrossApp_CACell_prototype;

bool js_crossapp_CACell_getContentView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACell* cobj = (CrossApp::CACell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACell_getContentView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getContentView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACell_getContentView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACell_getViewWithID(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACell* cobj = (CrossApp::CACell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACell_getViewWithID : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACell_getViewWithID : Error processing arguments");
        CrossApp::CAView* ret = cobj->getViewWithID(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACell_getViewWithID : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACell_onSelectedState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACell* cobj = (CrossApp::CACell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACell_onSelectedState : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACell_onSelectedState : Error processing arguments");
        cobj->onSelectedState(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACell_onSelectedState : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACell_onNormalState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACell* cobj = (CrossApp::CACell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACell_onNormalState : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACell_onNormalState : Error processing arguments");
        cobj->onNormalState(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACell_onNormalState : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACell_initWithReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACell* cobj = (CrossApp::CACell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACell_initWithReuseIdentifier : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACell_initWithReuseIdentifier : Error processing arguments");
        bool ret = cobj->initWithReuseIdentifier(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACell_initWithReuseIdentifier : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACell_setControlStateSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACell* cobj = (CrossApp::CACell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACell_setControlStateSelected : Invalid Native Object");
    if (argc == 0) {
        cobj->setControlStateSelected();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACell_setControlStateSelected : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACell_setReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACell* cobj = (CrossApp::CACell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACell_setReuseIdentifier : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACell_setReuseIdentifier : Error processing arguments");
        cobj->setReuseIdentifier(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACell_setReuseIdentifier : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACell_isAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACell* cobj = (CrossApp::CACell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACell_isAllowsSelected : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsSelected();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACell_isAllowsSelected : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACell_isControlStateEffect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACell* cobj = (CrossApp::CACell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACell_isControlStateEffect : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isControlStateEffect();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACell_isControlStateEffect : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACell_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACell* cobj = (CrossApp::CACell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACell_setBackgroundImage : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAImage* arg0 = nullptr;
        bool arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACell_setBackgroundImage : Error processing arguments");
        cobj->setBackgroundImage(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACell_setBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CACell_setControlStateNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACell* cobj = (CrossApp::CACell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACell_setControlStateNormal : Invalid Native Object");
    if (argc == 0) {
        cobj->setControlStateNormal();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACell_setControlStateNormal : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACell_onHighlightedState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACell* cobj = (CrossApp::CACell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACell_onHighlightedState : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACell_onHighlightedState : Error processing arguments");
        cobj->onHighlightedState(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACell_onHighlightedState : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACell_setControlStateHighlighted(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACell* cobj = (CrossApp::CACell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACell_setControlStateHighlighted : Invalid Native Object");
    if (argc == 0) {
        cobj->setControlStateHighlighted();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACell_setControlStateHighlighted : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACell_onRecovery(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACell* cobj = (CrossApp::CACell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACell_onRecovery : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACell_onRecovery : Error processing arguments");
        cobj->onRecovery(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACell_onRecovery : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACell_onDsabledState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACell* cobj = (CrossApp::CACell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACell_onDsabledState : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACell_onDsabledState : Error processing arguments");
        cobj->onDsabledState(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACell_onDsabledState : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACell_getBackgroundView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACell* cobj = (CrossApp::CACell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACell_getBackgroundView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getBackgroundView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACell_getBackgroundView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACell_getReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACell* cobj = (CrossApp::CACell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACell_getReuseIdentifier : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getReuseIdentifier();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACell_getReuseIdentifier : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACell_getControlState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACell* cobj = (CrossApp::CACell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACell_getControlState : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getControlState();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACell_getControlState : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACell_setControlStateEffect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACell* cobj = (CrossApp::CACell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACell_setControlStateEffect : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACell_setControlStateEffect : Error processing arguments");
        cobj->setControlStateEffect(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACell_setControlStateEffect : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACell_setControlState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACell* cobj = (CrossApp::CACell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACell_setControlState : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAControl::State arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACell_setControlState : Error processing arguments");
        cobj->setControlState(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACell_setControlState : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACell_setAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACell* cobj = (CrossApp::CACell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACell_setAllowsSelected : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACell_setAllowsSelected : Error processing arguments");
        cobj->setAllowsSelected(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACell_setAllowsSelected : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACell_setControlStateDisabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACell* cobj = (CrossApp::CACell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACell_setControlStateDisabled : Invalid Native Object");
    if (argc == 0) {
        cobj->setControlStateDisabled();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACell_setControlStateDisabled : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACell_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACell_create : Error processing arguments");
        CrossApp::CACell* ret = CrossApp::CACell::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACell>(cx, (CrossApp::CACell*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CACell_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CACell_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CACell* cobj = new (std::nothrow) CrossApp::CACell();
    TypeTest<CrossApp::CACell> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CACell");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_CACell_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::CACell *nobj = new (std::nothrow) CrossApp::CACell();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CACell");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_CAControl_prototype;

void js_CrossApp_CACell_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CACell)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CACell *nobj = static_cast<CrossApp::CACell *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_CACell(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CACell_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CACell_class->name = "CACell";
    jsb_CrossApp_CACell_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CACell_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CACell_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CACell_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CACell_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CACell_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CACell_class->convert = JS_ConvertStub;
    jsb_CrossApp_CACell_class->finalize = js_CrossApp_CACell_finalize;
    jsb_CrossApp_CACell_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getContentView", js_crossapp_CACell_getContentView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getViewWithID", js_crossapp_CACell_getViewWithID, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onSelectedState", js_crossapp_CACell_onSelectedState, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onNormalState", js_crossapp_CACell_onNormalState, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithReuseIdentifier", js_crossapp_CACell_initWithReuseIdentifier, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setControlStateSelected", js_crossapp_CACell_setControlStateSelected, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setReuseIdentifier", js_crossapp_CACell_setReuseIdentifier, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowsSelected", js_crossapp_CACell_isAllowsSelected, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isControlStateEffect", js_crossapp_CACell_isControlStateEffect, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundImage", js_crossapp_CACell_setBackgroundImage, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setControlStateNormal", js_crossapp_CACell_setControlStateNormal, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onHighlightedState", js_crossapp_CACell_onHighlightedState, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setControlStateHighlighted", js_crossapp_CACell_setControlStateHighlighted, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onRecovery", js_crossapp_CACell_onRecovery, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDsabledState", js_crossapp_CACell_onDsabledState, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBackgroundView", js_crossapp_CACell_getBackgroundView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getReuseIdentifier", js_crossapp_CACell_getReuseIdentifier, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getControlState", js_crossapp_CACell_getControlState, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setControlStateEffect", js_crossapp_CACell_setControlStateEffect, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setControlState", js_crossapp_CACell_setControlState, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsSelected", js_crossapp_CACell_setAllowsSelected, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setControlStateDisabled", js_crossapp_CACell_setControlStateDisabled, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_CACell_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CACell_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CACell_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAControl_prototype),
        jsb_CrossApp_CACell_class,
        js_crossapp_CACell_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CACell", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CACell> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CACell_class;
        p->proto = jsb_CrossApp_CACell_prototype;
        p->parentProto = jsb_CrossApp_CAControl_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.CACell.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_CAListView_class;
JSObject *jsb_CrossApp_CAListView_prototype;

bool js_crossapp_CAListView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_isAllowsSelection : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsSelection();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_isAllowsSelection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAListView_getOrientation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_getOrientation : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getOrientation();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_getOrientation : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAListView_setListFooterHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_setListFooterHeight : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListView_setListFooterHeight : Error processing arguments");
        cobj->setListFooterHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_setListFooterHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAListView_setSeparatorColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_setSeparatorColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListView_setSeparatorColor : Error processing arguments");
        cobj->setSeparatorColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_setSeparatorColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAListView_setSelectAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_setSelectAtIndex : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListView_setSelectAtIndex : Error processing arguments");
        cobj->setSelectAtIndex(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_setSelectAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAListView_getSeparatorViewHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_getSeparatorViewHeight : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getSeparatorViewHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_getSeparatorViewHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAListView_onDidSelectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_onDidSelectCellAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<void (unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListView_onDidSelectCellAtIndexPath : Error processing arguments");
        cobj->onDidSelectCellAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_onDidSelectCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAListView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAListView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_isAllowsMultipleSelection : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsMultipleSelection();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_isAllowsMultipleSelection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAListView_getSeparatorColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_getSeparatorColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getSeparatorColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_getSeparatorColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAListView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_setAllowsSelection : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListView_setAllowsSelection : Error processing arguments");
        cobj->setAllowsSelection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_setAllowsSelection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAListView_reloadData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_reloadData : Invalid Native Object");
    if (argc == 0) {
        cobj->reloadData();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_reloadData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAListView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_setAllowsMultipleSelection : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListView_setAllowsMultipleSelection : Error processing arguments");
        cobj->setAllowsMultipleSelection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_setAllowsMultipleSelection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAListView_displayingListCell(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_displayingListCell : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAVector<CrossApp::CAListViewCell *>& ret = cobj->displayingListCell();
        jsval jsret = JSVAL_NULL;
        jsret = cavector_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_displayingListCell : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAListView_setListHeaderView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_setListHeaderView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListView_setListHeaderView : Error processing arguments");
        cobj->setListHeaderView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_setListHeaderView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAListView_getListFooterHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_getListFooterHeight : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getListFooterHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_getListFooterHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAListView_onCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_onCellAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<CrossApp::CAListViewCell *(CrossApp::DSize, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::DSize larg0, unsigned int larg1) -> CAListViewCell* {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            largv[0] = dsize_to_jsval(cx, larg0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            CrossApp::CAListViewCell* ret;
		            do {
		            if (rval.isNull()) { ret = nullptr; break; }
		            if (!rval.isObject()) { ok = false; break; }
		            js_proxy_t *jsProxy;
		            JSObject *tmpObj = rval.toObjectOrNull();
		            jsProxy = jsb_get_js_proxy(tmpObj);
		            ret = (CrossApp::CAListViewCell*)(jsProxy ? jsProxy->ptr : NULL);
		            JSB_PRECONDITION2( ret, cx, 0, "Invalid Native Object");
		        } while (0);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListView_onCellAtIndexPath : Error processing arguments");
        cobj->onCellAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_onCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAListView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_setShowsScrollIndicators : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListView_setShowsScrollIndicators : Error processing arguments");
        cobj->setShowsScrollIndicators(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_setShowsScrollIndicators : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAListView_visitEve(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_visitEve : Invalid Native Object");
    if (argc == 0) {
        cobj->visitEve();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_visitEve : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAListView_setListHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_setListHeaderHeight : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListView_setListHeaderHeight : Error processing arguments");
        cobj->setListHeaderHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_setListHeaderHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAListView_onWillDisplayCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_onWillDisplayCellAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<void (CrossApp::CAListViewCell *, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::CAListViewCell* larg0, unsigned int larg1) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            do {
		            if (larg0) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAListViewCell>(cx, (CrossApp::CAListViewCell*)larg0);
		                largv[0] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[0] = JSVAL_NULL;
		            }
		        } while (0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListView_onWillDisplayCellAtIndexPath : Error processing arguments");
        cobj->onWillDisplayCellAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_onWillDisplayCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAListView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAListView_onNumberOfRowsAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_onNumberOfRowsAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<unsigned int ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> unsigned int {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            uint32_t ret;
		            ok &= jsval_to_uint32(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListView_onNumberOfRowsAtIndexPath : Error processing arguments");
        cobj->onNumberOfRowsAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_onNumberOfRowsAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAListView_getListHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_getListHeaderHeight : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getListHeaderHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_getListHeaderHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAListView_setSeparatorViewHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_setSeparatorViewHeight : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListView_setSeparatorViewHeight : Error processing arguments");
        cobj->setSeparatorViewHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_setSeparatorViewHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAListView_setOrientation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_setOrientation : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAListView::Orientation arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListView_setOrientation : Error processing arguments");
        cobj->setOrientation(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_setOrientation : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAListView_onCellHeightAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_onCellHeightAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<unsigned int (unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0) -> unsigned int {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            uint32_t ret;
		            ok &= jsval_to_uint32(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListView_onCellHeightAtIndexPath : Error processing arguments");
        cobj->onCellHeightAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_onCellHeightAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAListView_setListFooterView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_setListFooterView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListView_setListFooterView : Error processing arguments");
        cobj->setListFooterView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_setListFooterView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAListView_onDidDeselectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_onDidDeselectCellAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<void (unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListView_onDidDeselectCellAtIndexPath : Error processing arguments");
        cobj->onDidDeselectCellAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_onDidDeselectCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAListView_getListFooterView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_getListFooterView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getListFooterView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_getListFooterView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAListView_cellForRowAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_cellForRowAtIndex : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListView_cellForRowAtIndex : Error processing arguments");
        CrossApp::CAListViewCell* ret = cobj->cellForRowAtIndex(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAListViewCell>(cx, (CrossApp::CAListViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_cellForRowAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAListView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_switchPCMode : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListView_switchPCMode : Error processing arguments");
        cobj->switchPCMode(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_switchPCMode : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAListView_setUnSelectAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_setUnSelectAtIndex : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListView_setUnSelectAtIndex : Error processing arguments");
        cobj->setUnSelectAtIndex(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_setUnSelectAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAListView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_dequeueReusableCellWithIdentifier : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListView_dequeueReusableCellWithIdentifier : Error processing arguments");
        CrossApp::CAListViewCell* ret = cobj->dequeueReusableCellWithIdentifier(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAListViewCell>(cx, (CrossApp::CAListViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_dequeueReusableCellWithIdentifier : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAListView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAListView_getListHeaderView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListView_getListHeaderView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getListHeaderView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListView_getListHeaderView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAListView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListView_createWithFrame : Error processing arguments");
        CrossApp::CAListView* ret = CrossApp::CAListView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAListView>(cx, (CrossApp::CAListView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAListView_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CAListView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListView_createWithLayout : Error processing arguments");
        CrossApp::CAListView* ret = CrossApp::CAListView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAListView>(cx, (CrossApp::CAListView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAListView_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CAListView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListView_createWithCenter : Error processing arguments");
        CrossApp::CAListView* ret = CrossApp::CAListView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAListView>(cx, (CrossApp::CAListView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAListView_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CAListView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAListView* cobj = new (std::nothrow) CrossApp::CAListView();
    TypeTest<CrossApp::CAListView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAListView");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAScrollView_prototype;

void js_CrossApp_CAListView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAListView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAListView *nobj = static_cast<CrossApp::CAListView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAListView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAListView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAListView_class->name = "CAListView";
    jsb_CrossApp_CAListView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAListView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAListView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAListView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAListView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAListView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAListView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAListView_class->finalize = js_CrossApp_CAListView_finalize;
    jsb_CrossApp_CAListView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("isAllowsSelection", js_crossapp_CAListView_isAllowsSelection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getOrientation", js_crossapp_CAListView_getOrientation, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setListFooterHeight", js_crossapp_CAListView_setListFooterHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSeparatorColor", js_crossapp_CAListView_setSeparatorColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSelectAtIndex", js_crossapp_CAListView_setSelectAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSeparatorViewHeight", js_crossapp_CAListView_getSeparatorViewHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDidSelectCellAtIndexPath", js_crossapp_CAListView_onDidSelectCellAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CAListView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowsMultipleSelection", js_crossapp_CAListView_isAllowsMultipleSelection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSeparatorColor", js_crossapp_CAListView_getSeparatorColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsSelection", js_crossapp_CAListView_setAllowsSelection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reloadData", js_crossapp_CAListView_reloadData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsMultipleSelection", js_crossapp_CAListView_setAllowsMultipleSelection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("displayingListCell", js_crossapp_CAListView_displayingListCell, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setListHeaderView", js_crossapp_CAListView_setListHeaderView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getListFooterHeight", js_crossapp_CAListView_getListFooterHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onCellAtIndexPath", js_crossapp_CAListView_onCellAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setShowsScrollIndicators", js_crossapp_CAListView_setShowsScrollIndicators, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("visitEve", js_crossapp_CAListView_visitEve, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setListHeaderHeight", js_crossapp_CAListView_setListHeaderHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onWillDisplayCellAtIndexPath", js_crossapp_CAListView_onWillDisplayCellAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_crossapp_CAListView_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onNumberOfRowsAtIndexPath", js_crossapp_CAListView_onNumberOfRowsAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getListHeaderHeight", js_crossapp_CAListView_getListHeaderHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSeparatorViewHeight", js_crossapp_CAListView_setSeparatorViewHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setOrientation", js_crossapp_CAListView_setOrientation, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onCellHeightAtIndexPath", js_crossapp_CAListView_onCellHeightAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setListFooterView", js_crossapp_CAListView_setListFooterView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDidDeselectCellAtIndexPath", js_crossapp_CAListView_onDidDeselectCellAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getListFooterView", js_crossapp_CAListView_getListFooterView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("cellForRowAtIndex", js_crossapp_CAListView_cellForRowAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("switchPCMode", js_crossapp_CAListView_switchPCMode, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setUnSelectAtIndex", js_crossapp_CAListView_setUnSelectAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("dequeueReusableCellWithIdentifier", js_crossapp_CAListView_dequeueReusableCellWithIdentifier, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_crossapp_CAListView_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getListHeaderView", js_crossapp_CAListView_getListHeaderView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_crossapp_CAListView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CAListView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CAListView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAListView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAScrollView_prototype),
        jsb_CrossApp_CAListView_class,
        js_crossapp_CAListView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAListView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAListView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAListView_class;
        p->proto = jsb_CrossApp_CAListView_prototype;
        p->parentProto = jsb_CrossApp_CAScrollView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAListViewCell_class;
JSObject *jsb_CrossApp_CAListViewCell_prototype;

bool js_crossapp_CAListViewCell_getIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListViewCell* cobj = (CrossApp::CAListViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAListViewCell_getIndex : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getIndex();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAListViewCell_getIndex : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAListViewCell_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAListViewCell_create : Error processing arguments");
        CrossApp::CAListViewCell* ret = CrossApp::CAListViewCell::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAListViewCell>(cx, (CrossApp::CAListViewCell*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAListViewCell_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CAListViewCell_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAListViewCell* cobj = new (std::nothrow) CrossApp::CAListViewCell();
    TypeTest<CrossApp::CAListViewCell> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAListViewCell");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_CAListViewCell_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::CAListViewCell *nobj = new (std::nothrow) CrossApp::CAListViewCell();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAListViewCell");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_CACell_prototype;

void js_CrossApp_CAListViewCell_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAListViewCell)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAListViewCell *nobj = static_cast<CrossApp::CAListViewCell *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_CAListViewCell(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAListViewCell_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAListViewCell_class->name = "CAListViewCell";
    jsb_CrossApp_CAListViewCell_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAListViewCell_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAListViewCell_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAListViewCell_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAListViewCell_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAListViewCell_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAListViewCell_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAListViewCell_class->finalize = js_CrossApp_CAListViewCell_finalize;
    jsb_CrossApp_CAListViewCell_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getIndex", js_crossapp_CAListViewCell_getIndex, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_CAListViewCell_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CAListViewCell_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAListViewCell_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CACell_prototype),
        jsb_CrossApp_CAListViewCell_class,
        js_crossapp_CAListViewCell_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAListViewCell", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAListViewCell> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAListViewCell_class;
        p->proto = jsb_CrossApp_CAListViewCell_prototype;
        p->parentProto = jsb_CrossApp_CACell_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.CAListViewCell.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_CATableView_class;
JSObject *jsb_CrossApp_CATableView_prototype;

bool js_crossapp_CATableView_getTableFooterView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_getTableFooterView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getTableFooterView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_getTableFooterView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATableView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_isAllowsSelection : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsSelection();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_isAllowsSelection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATableView_onHeightForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_onHeightForHeaderInSection : Invalid Native Object");
    if (argc == 1) {
        std::function<unsigned int (unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0) -> unsigned int {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            uint32_t ret;
		            ok &= jsval_to_uint32(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_onHeightForHeaderInSection : Error processing arguments");
        cobj->onHeightForHeaderInSection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_onHeightForHeaderInSection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_setTableHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_setTableHeaderHeight : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_setTableHeaderHeight : Error processing arguments");
        cobj->setTableHeaderHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_setTableHeaderHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_isAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_isAlwaysBottomSectionFooter : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAlwaysBottomSectionFooter();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_isAlwaysBottomSectionFooter : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATableView_getSectionFooterHeightInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_getSectionFooterHeightInSection : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_getSectionFooterHeightInSection : Error processing arguments");
        double ret = cobj->getSectionFooterHeightInSection(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_getSectionFooterHeightInSection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_setSeparatorColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_setSeparatorColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_setSeparatorColor : Error processing arguments");
        cobj->setSeparatorColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_setSeparatorColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_setTableFooterHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_setTableFooterHeight : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_setTableFooterHeight : Error processing arguments");
        cobj->setTableFooterHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_setTableFooterHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_onSectionViewForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_onSectionViewForFooterInSection : Invalid Native Object");
    if (argc == 1) {
        std::function<CrossApp::CAView *(CrossApp::DSize, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::DSize larg0, unsigned int larg1) -> CAView* {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            largv[0] = dsize_to_jsval(cx, larg0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            CrossApp::CAView* ret;
		            do {
		            if (rval.isNull()) { ret = nullptr; break; }
		            if (!rval.isObject()) { ok = false; break; }
		            js_proxy_t *jsProxy;
		            JSObject *tmpObj = rval.toObjectOrNull();
		            jsProxy = jsb_get_js_proxy(tmpObj);
		            ret = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
		            JSB_PRECONDITION2( ret, cx, 0, "Invalid Native Object");
		        } while (0);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_onSectionViewForFooterInSection : Error processing arguments");
        cobj->onSectionViewForFooterInSection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_onSectionViewForFooterInSection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_setAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_setAlwaysTopSectionHeader : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_setAlwaysTopSectionHeader : Error processing arguments");
        cobj->setAlwaysTopSectionHeader(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_setAlwaysTopSectionHeader : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_onNumberOfSections(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_onNumberOfSections : Invalid Native Object");
    if (argc == 1) {
        std::function<unsigned int ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> unsigned int {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            uint32_t ret;
		            ok &= jsval_to_uint32(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_onNumberOfSections : Error processing arguments");
        cobj->onNumberOfSections(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_onNumberOfSections : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_getRowHeightInSectionInRow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_getRowHeightInSectionInRow : Invalid Native Object");
    if (argc == 2) {
        uint32_t arg0 = 0;
        uint32_t arg1 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_getRowHeightInSectionInRow : Error processing arguments");
        double ret = cobj->getRowHeightInSectionInRow(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_getRowHeightInSectionInRow : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CATableView_setTableHeaderView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_setTableHeaderView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_setTableHeaderView : Error processing arguments");
        cobj->setTableHeaderView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_setTableHeaderView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_getNumberOfSections(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_getNumberOfSections : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getNumberOfSections();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_getNumberOfSections : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATableView_getSeparatorViewHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_getSeparatorViewHeight : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getSeparatorViewHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_getSeparatorViewHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATableView_getTableHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_getTableHeaderHeight : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getTableHeaderHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_getTableHeaderHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATableView_setSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_setSelectRowAtIndexPath : Invalid Native Object");
    if (argc == 2) {
        uint32_t arg0 = 0;
        uint32_t arg1 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_setSelectRowAtIndexPath : Error processing arguments");
        cobj->setSelectRowAtIndexPath(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_setSelectRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CATableView_onDidSelectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_onDidSelectCellAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<void (unsigned int, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0, unsigned int larg1) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_onDidSelectCellAtIndexPath : Error processing arguments");
        cobj->onDidSelectCellAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_onDidSelectCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_cellForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_cellForRowAtIndexPath : Invalid Native Object");
    if (argc == 2) {
        uint32_t arg0 = 0;
        uint32_t arg1 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_cellForRowAtIndexPath : Error processing arguments");
        CrossApp::CATableViewCell* ret = cobj->cellForRowAtIndexPath(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATableViewCell>(cx, (CrossApp::CATableViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_cellForRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CATableView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATableView_getSectionHeightInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_getSectionHeightInSection : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_getSectionHeightInSection : Error processing arguments");
        double ret = cobj->getSectionHeightInSection(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_getSectionHeightInSection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_isAllowsMultipleSelection : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsMultipleSelection();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_isAllowsMultipleSelection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATableView_onHeightForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_onHeightForFooterInSection : Invalid Native Object");
    if (argc == 1) {
        std::function<unsigned int (unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0) -> unsigned int {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            uint32_t ret;
		            ok &= jsval_to_uint32(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_onHeightForFooterInSection : Error processing arguments");
        cobj->onHeightForFooterInSection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_onHeightForFooterInSection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_getSeparatorColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_getSeparatorColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getSeparatorColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_getSeparatorColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATableView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_setAllowsSelection : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_setAllowsSelection : Error processing arguments");
        cobj->setAllowsSelection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_setAllowsSelection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_reloadData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_reloadData : Invalid Native Object");
    if (argc == 0) {
        cobj->reloadData();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_reloadData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATableView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_setAllowsMultipleSelection : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_setAllowsMultipleSelection : Error processing arguments");
        cobj->setAllowsMultipleSelection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_setAllowsMultipleSelection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_getTableFooterHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_getTableFooterHeight : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getTableFooterHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_getTableFooterHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATableView_onCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_onCellAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<CrossApp::CATableViewCell *(CrossApp::DSize, unsigned int, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::DSize larg0, unsigned int larg1, unsigned int larg2) -> CATableViewCell* {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[3];
		            largv[0] = dsize_to_jsval(cx, larg0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            largv[2] = uint32_to_jsval(cx, larg2);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(3, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            CrossApp::CATableViewCell* ret;
		            do {
		            if (rval.isNull()) { ret = nullptr; break; }
		            if (!rval.isObject()) { ok = false; break; }
		            js_proxy_t *jsProxy;
		            JSObject *tmpObj = rval.toObjectOrNull();
		            jsProxy = jsb_get_js_proxy(tmpObj);
		            ret = (CrossApp::CATableViewCell*)(jsProxy ? jsProxy->ptr : NULL);
		            JSB_PRECONDITION2( ret, cx, 0, "Invalid Native Object");
		        } while (0);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_onCellAtIndexPath : Error processing arguments");
        cobj->onCellAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_onCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_setShowsScrollIndicators : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_setShowsScrollIndicators : Error processing arguments");
        cobj->setShowsScrollIndicators(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_setShowsScrollIndicators : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_onSectionViewForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_onSectionViewForHeaderInSection : Invalid Native Object");
    if (argc == 1) {
        std::function<CrossApp::CAView *(CrossApp::DSize, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::DSize larg0, unsigned int larg1) -> CAView* {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            largv[0] = dsize_to_jsval(cx, larg0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            CrossApp::CAView* ret;
		            do {
		            if (rval.isNull()) { ret = nullptr; break; }
		            if (!rval.isObject()) { ok = false; break; }
		            js_proxy_t *jsProxy;
		            JSObject *tmpObj = rval.toObjectOrNull();
		            jsProxy = jsb_get_js_proxy(tmpObj);
		            ret = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
		            JSB_PRECONDITION2( ret, cx, 0, "Invalid Native Object");
		        } while (0);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_onSectionViewForHeaderInSection : Error processing arguments");
        cobj->onSectionViewForHeaderInSection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_onSectionViewForHeaderInSection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_displayingTableCell(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_displayingTableCell : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAVector<CrossApp::CATableViewCell *>& ret = cobj->displayingTableCell();
        jsval jsret = JSVAL_NULL;
        jsret = cavector_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_displayingTableCell : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATableView_getTableHeaderView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_getTableHeaderView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getTableHeaderView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_getTableHeaderView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATableView_onWillDisplayCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_onWillDisplayCellAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<void (CrossApp::CATableViewCell *, unsigned int, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::CATableViewCell* larg0, unsigned int larg1, unsigned int larg2) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[3];
		            do {
		            if (larg0) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATableViewCell>(cx, (CrossApp::CATableViewCell*)larg0);
		                largv[0] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[0] = JSVAL_NULL;
		            }
		        } while (0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            largv[2] = uint32_to_jsval(cx, larg2);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(3, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_onWillDisplayCellAtIndexPath : Error processing arguments");
        cobj->onWillDisplayCellAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_onWillDisplayCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_setAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_setAlwaysBottomSectionFooter : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_setAlwaysBottomSectionFooter : Error processing arguments");
        cobj->setAlwaysBottomSectionFooter(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_setAlwaysBottomSectionFooter : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATableView_onNumberOfRowsAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_onNumberOfRowsAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<unsigned int (unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0) -> unsigned int {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            uint32_t ret;
		            ok &= jsval_to_uint32(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_onNumberOfRowsAtIndexPath : Error processing arguments");
        cobj->onNumberOfRowsAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_onNumberOfRowsAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_isAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_isAlwaysTopSectionHeader : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAlwaysTopSectionHeader();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_isAlwaysTopSectionHeader : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATableView_visitEve(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_visitEve : Invalid Native Object");
    if (argc == 0) {
        cobj->visitEve();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_visitEve : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATableView_setTableFooterView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_setTableFooterView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_setTableFooterView : Error processing arguments");
        cobj->setTableFooterView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_setTableFooterView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_setSeparatorViewHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_setSeparatorViewHeight : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_setSeparatorViewHeight : Error processing arguments");
        cobj->setSeparatorViewHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_setSeparatorViewHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_onCellHeightAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_onCellHeightAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<unsigned int (unsigned int, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0, unsigned int larg1) -> unsigned int {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            uint32_t ret;
		            ok &= jsval_to_uint32(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_onCellHeightAtIndexPath : Error processing arguments");
        cobj->onCellHeightAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_onCellHeightAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_onDidDeselectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_onDidDeselectCellAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<void (unsigned int, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0, unsigned int larg1) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_onDidDeselectCellAtIndexPath : Error processing arguments");
        cobj->onDidDeselectCellAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_onDidDeselectCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_getNumberOfRowsInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_getNumberOfRowsInSection : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_getNumberOfRowsInSection : Error processing arguments");
        uint32_t ret = cobj->getNumberOfRowsInSection(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_getNumberOfRowsInSection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_setUnSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_setUnSelectRowAtIndexPath : Invalid Native Object");
    if (argc == 2) {
        uint32_t arg0 = 0;
        uint32_t arg1 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_setUnSelectRowAtIndexPath : Error processing arguments");
        cobj->setUnSelectRowAtIndexPath(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_setUnSelectRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CATableView_getSectionHeaderHeightInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_getSectionHeaderHeightInSection : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_getSectionHeaderHeightInSection : Error processing arguments");
        double ret = cobj->getSectionHeaderHeightInSection(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_getSectionHeaderHeightInSection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_switchPCMode : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_switchPCMode : Error processing arguments");
        cobj->switchPCMode(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_switchPCMode : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_dequeueReusableCellWithIdentifier : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_dequeueReusableCellWithIdentifier : Error processing arguments");
        CrossApp::CATableViewCell* ret = cobj->dequeueReusableCellWithIdentifier(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATableViewCell>(cx, (CrossApp::CATableViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_dequeueReusableCellWithIdentifier : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableView_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableView_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATableView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_createWithFrame : Error processing arguments");
        CrossApp::CATableView* ret = CrossApp::CATableView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATableView>(cx, (CrossApp::CATableView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CATableView_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CATableView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_createWithLayout : Error processing arguments");
        CrossApp::CATableView* ret = CrossApp::CATableView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATableView>(cx, (CrossApp::CATableView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CATableView_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CATableView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableView_createWithCenter : Error processing arguments");
        CrossApp::CATableView* ret = CrossApp::CATableView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATableView>(cx, (CrossApp::CATableView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CATableView_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CATableView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CATableView* cobj = new (std::nothrow) CrossApp::CATableView();
    TypeTest<CrossApp::CATableView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CATableView");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAScrollView_prototype;

void js_CrossApp_CATableView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CATableView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATableView *nobj = static_cast<CrossApp::CATableView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CATableView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATableView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATableView_class->name = "CATableView";
    jsb_CrossApp_CATableView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATableView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATableView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATableView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATableView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATableView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATableView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATableView_class->finalize = js_CrossApp_CATableView_finalize;
    jsb_CrossApp_CATableView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getTableFooterView", js_crossapp_CATableView_getTableFooterView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowsSelection", js_crossapp_CATableView_isAllowsSelection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onHeightForHeaderInSection", js_crossapp_CATableView_onHeightForHeaderInSection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTableHeaderHeight", js_crossapp_CATableView_setTableHeaderHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAlwaysBottomSectionFooter", js_crossapp_CATableView_isAlwaysBottomSectionFooter, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSectionFooterHeightInSection", js_crossapp_CATableView_getSectionFooterHeightInSection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSeparatorColor", js_crossapp_CATableView_setSeparatorColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTableFooterHeight", js_crossapp_CATableView_setTableFooterHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onSectionViewForFooterInSection", js_crossapp_CATableView_onSectionViewForFooterInSection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlwaysTopSectionHeader", js_crossapp_CATableView_setAlwaysTopSectionHeader, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onNumberOfSections", js_crossapp_CATableView_onNumberOfSections, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRowHeightInSectionInRow", js_crossapp_CATableView_getRowHeightInSectionInRow, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTableHeaderView", js_crossapp_CATableView_setTableHeaderView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNumberOfSections", js_crossapp_CATableView_getNumberOfSections, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSeparatorViewHeight", js_crossapp_CATableView_getSeparatorViewHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTableHeaderHeight", js_crossapp_CATableView_getTableHeaderHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSelectRowAtIndexPath", js_crossapp_CATableView_setSelectRowAtIndexPath, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDidSelectCellAtIndexPath", js_crossapp_CATableView_onDidSelectCellAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("cellForRowAtIndexPath", js_crossapp_CATableView_cellForRowAtIndexPath, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CATableView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSectionHeightInSection", js_crossapp_CATableView_getSectionHeightInSection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowsMultipleSelection", js_crossapp_CATableView_isAllowsMultipleSelection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onHeightForFooterInSection", js_crossapp_CATableView_onHeightForFooterInSection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSeparatorColor", js_crossapp_CATableView_getSeparatorColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsSelection", js_crossapp_CATableView_setAllowsSelection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reloadData", js_crossapp_CATableView_reloadData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsMultipleSelection", js_crossapp_CATableView_setAllowsMultipleSelection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTableFooterHeight", js_crossapp_CATableView_getTableFooterHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onCellAtIndexPath", js_crossapp_CATableView_onCellAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setShowsScrollIndicators", js_crossapp_CATableView_setShowsScrollIndicators, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onSectionViewForHeaderInSection", js_crossapp_CATableView_onSectionViewForHeaderInSection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("displayingTableCell", js_crossapp_CATableView_displayingTableCell, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTableHeaderView", js_crossapp_CATableView_getTableHeaderView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onWillDisplayCellAtIndexPath", js_crossapp_CATableView_onWillDisplayCellAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlwaysBottomSectionFooter", js_crossapp_CATableView_setAlwaysBottomSectionFooter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_crossapp_CATableView_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onNumberOfRowsAtIndexPath", js_crossapp_CATableView_onNumberOfRowsAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAlwaysTopSectionHeader", js_crossapp_CATableView_isAlwaysTopSectionHeader, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("visitEve", js_crossapp_CATableView_visitEve, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTableFooterView", js_crossapp_CATableView_setTableFooterView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSeparatorViewHeight", js_crossapp_CATableView_setSeparatorViewHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onCellHeightAtIndexPath", js_crossapp_CATableView_onCellHeightAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDidDeselectCellAtIndexPath", js_crossapp_CATableView_onDidDeselectCellAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNumberOfRowsInSection", js_crossapp_CATableView_getNumberOfRowsInSection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setUnSelectRowAtIndexPath", js_crossapp_CATableView_setUnSelectRowAtIndexPath, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSectionHeaderHeightInSection", js_crossapp_CATableView_getSectionHeaderHeightInSection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("switchPCMode", js_crossapp_CATableView_switchPCMode, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("dequeueReusableCellWithIdentifier", js_crossapp_CATableView_dequeueReusableCellWithIdentifier, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_crossapp_CATableView_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_crossapp_CATableView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CATableView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CATableView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CATableView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAScrollView_prototype),
        jsb_CrossApp_CATableView_class,
        js_crossapp_CATableView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CATableView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATableView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATableView_class;
        p->proto = jsb_CrossApp_CATableView_prototype;
        p->parentProto = jsb_CrossApp_CAScrollView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CATableViewCell_class;
JSObject *jsb_CrossApp_CATableViewCell_prototype;

bool js_crossapp_CATableViewCell_setDraggingLength(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewCell* cobj = (CrossApp::CATableViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableViewCell_setDraggingLength : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableViewCell_setDraggingLength : Error processing arguments");
        cobj->setDraggingLength(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableViewCell_setDraggingLength : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATableViewCell_getSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewCell* cobj = (CrossApp::CATableViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableViewCell_getSection : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getSection();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableViewCell_getSection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATableViewCell_getDraggingLength(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewCell* cobj = (CrossApp::CATableViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableViewCell_getDraggingLength : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getDraggingLength();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableViewCell_getDraggingLength : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATableViewCell_getRow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewCell* cobj = (CrossApp::CATableViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATableViewCell_getRow : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getRow();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATableViewCell_getRow : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATableViewCell_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATableViewCell_create : Error processing arguments");
        CrossApp::CATableViewCell* ret = CrossApp::CATableViewCell::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATableViewCell>(cx, (CrossApp::CATableViewCell*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CATableViewCell_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CATableViewCell_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CATableViewCell* cobj = new (std::nothrow) CrossApp::CATableViewCell();
    TypeTest<CrossApp::CATableViewCell> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CATableViewCell");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_CATableViewCell_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::CATableViewCell *nobj = new (std::nothrow) CrossApp::CATableViewCell();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CATableViewCell");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_CACell_prototype;

void js_CrossApp_CATableViewCell_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CATableViewCell)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATableViewCell *nobj = static_cast<CrossApp::CATableViewCell *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_CATableViewCell(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATableViewCell_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATableViewCell_class->name = "CATableViewCell";
    jsb_CrossApp_CATableViewCell_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATableViewCell_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATableViewCell_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATableViewCell_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATableViewCell_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATableViewCell_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATableViewCell_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATableViewCell_class->finalize = js_CrossApp_CATableViewCell_finalize;
    jsb_CrossApp_CATableViewCell_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setDraggingLength", js_crossapp_CATableViewCell_setDraggingLength, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSection", js_crossapp_CATableViewCell_getSection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDraggingLength", js_crossapp_CATableViewCell_getDraggingLength, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRow", js_crossapp_CATableViewCell_getRow, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_CATableViewCell_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CATableViewCell_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CATableViewCell_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CACell_prototype),
        jsb_CrossApp_CATableViewCell_class,
        js_crossapp_CATableViewCell_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CATableViewCell", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATableViewCell> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATableViewCell_class;
        p->proto = jsb_CrossApp_CATableViewCell_prototype;
        p->parentProto = jsb_CrossApp_CACell_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.CATableViewCell.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_CACollectionView_class;
JSObject *jsb_CrossApp_CACollectionView_prototype;

bool js_crossapp_CACollectionView_setCollectionFooterHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_setCollectionFooterHeight : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_setCollectionFooterHeight : Error processing arguments");
        cobj->setCollectionFooterHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_setCollectionFooterHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_onHeightForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_onHeightForHeaderInSection : Invalid Native Object");
    if (argc == 1) {
        std::function<unsigned int (unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0) -> unsigned int {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            uint32_t ret;
		            ok &= jsval_to_uint32(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_onHeightForHeaderInSection : Error processing arguments");
        cobj->onHeightForHeaderInSection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_onHeightForHeaderInSection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_isAllowsSelection : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsSelection();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_isAllowsSelection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACollectionView_setCollectionHeaderView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_setCollectionHeaderView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_setCollectionHeaderView : Error processing arguments");
        cobj->setCollectionHeaderView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_setCollectionHeaderView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_getVertInterval(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_getVertInterval : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getVertInterval();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_getVertInterval : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACollectionView_isAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_isAlwaysBottomSectionFooter : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAlwaysBottomSectionFooter();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_isAlwaysBottomSectionFooter : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACollectionView_setCollectionFooterView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_setCollectionFooterView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_setCollectionFooterView : Error processing arguments");
        cobj->setCollectionFooterView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_setCollectionFooterView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_getCollectionFooterView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_getCollectionFooterView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getCollectionFooterView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_getCollectionFooterView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACollectionView_onSectionViewForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_onSectionViewForFooterInSection : Invalid Native Object");
    if (argc == 1) {
        std::function<CrossApp::CAView *(CrossApp::DSize, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::DSize larg0, unsigned int larg1) -> CAView* {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            largv[0] = dsize_to_jsval(cx, larg0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            CrossApp::CAView* ret;
		            do {
		            if (rval.isNull()) { ret = nullptr; break; }
		            if (!rval.isObject()) { ok = false; break; }
		            js_proxy_t *jsProxy;
		            JSObject *tmpObj = rval.toObjectOrNull();
		            jsProxy = jsb_get_js_proxy(tmpObj);
		            ret = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
		            JSB_PRECONDITION2( ret, cx, 0, "Invalid Native Object");
		        } while (0);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_onSectionViewForFooterInSection : Error processing arguments");
        cobj->onSectionViewForFooterInSection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_onSectionViewForFooterInSection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_setAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_setAlwaysTopSectionHeader : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_setAlwaysTopSectionHeader : Error processing arguments");
        cobj->setAlwaysTopSectionHeader(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_setAlwaysTopSectionHeader : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_onNumberOfSections(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_onNumberOfSections : Invalid Native Object");
    if (argc == 1) {
        std::function<unsigned int ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> unsigned int {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            uint32_t ret;
		            ok &= jsval_to_uint32(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_onNumberOfSections : Error processing arguments");
        cobj->onNumberOfSections(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_onNumberOfSections : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_getHoriInterval(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_getHoriInterval : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getHoriInterval();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_getHoriInterval : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACollectionView_clearData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_clearData : Invalid Native Object");
    if (argc == 0) {
        cobj->clearData();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_clearData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACollectionView_setHoriInterval(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_setHoriInterval : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_setHoriInterval : Error processing arguments");
        cobj->setHoriInterval(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_setHoriInterval : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_setSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_setSelectRowAtIndexPath : Invalid Native Object");
    if (argc == 3) {
        uint32_t arg0 = 0;
        uint32_t arg1 = 0;
        uint32_t arg2 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_setSelectRowAtIndexPath : Error processing arguments");
        cobj->setSelectRowAtIndexPath(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_setSelectRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_crossapp_CACollectionView_onDidSelectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_onDidSelectCellAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<void (unsigned int, unsigned int, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0, unsigned int larg1, unsigned int larg2) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[3];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            largv[2] = uint32_to_jsval(cx, larg2);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(3, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_onDidSelectCellAtIndexPath : Error processing arguments");
        cobj->onDidSelectCellAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_onDidSelectCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_cellForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_cellForRowAtIndexPath : Invalid Native Object");
    if (argc == 3) {
        uint32_t arg0 = 0;
        uint32_t arg1 = 0;
        uint32_t arg2 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_cellForRowAtIndexPath : Error processing arguments");
        CrossApp::CACollectionViewCell* ret = cobj->cellForRowAtIndexPath(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionViewCell>(cx, (CrossApp::CACollectionViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_cellForRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_crossapp_CACollectionView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACollectionView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_isAllowsMultipleSelection : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsMultipleSelection();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_isAllowsMultipleSelection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACollectionView_onHeightForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_onHeightForFooterInSection : Invalid Native Object");
    if (argc == 1) {
        std::function<unsigned int (unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0) -> unsigned int {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            uint32_t ret;
		            ok &= jsval_to_uint32(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_onHeightForFooterInSection : Error processing arguments");
        cobj->onHeightForFooterInSection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_onHeightForFooterInSection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_setAllowsSelection : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_setAllowsSelection : Error processing arguments");
        cobj->setAllowsSelection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_setAllowsSelection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_reloadData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_reloadData : Invalid Native Object");
    if (argc == 0) {
        cobj->reloadData();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_reloadData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACollectionView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_setAllowsMultipleSelection : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_setAllowsMultipleSelection : Error processing arguments");
        cobj->setAllowsMultipleSelection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_setAllowsMultipleSelection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_getCollectionHeaderView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_getCollectionHeaderView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getCollectionHeaderView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_getCollectionHeaderView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACollectionView_onCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_onCellAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<CrossApp::CACollectionViewCell *(CrossApp::DSize, unsigned int, unsigned int, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::DSize larg0, unsigned int larg1, unsigned int larg2, unsigned int larg3) -> CACollectionViewCell* {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[4];
		            largv[0] = dsize_to_jsval(cx, larg0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            largv[2] = uint32_to_jsval(cx, larg2);
		            largv[3] = uint32_to_jsval(cx, larg3);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(4, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            CrossApp::CACollectionViewCell* ret;
		            do {
		            if (rval.isNull()) { ret = nullptr; break; }
		            if (!rval.isObject()) { ok = false; break; }
		            js_proxy_t *jsProxy;
		            JSObject *tmpObj = rval.toObjectOrNull();
		            jsProxy = jsb_get_js_proxy(tmpObj);
		            ret = (CrossApp::CACollectionViewCell*)(jsProxy ? jsProxy->ptr : NULL);
		            JSB_PRECONDITION2( ret, cx, 0, "Invalid Native Object");
		        } while (0);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_onCellAtIndexPath : Error processing arguments");
        cobj->onCellAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_onCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_setShowsScrollIndicators : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_setShowsScrollIndicators : Error processing arguments");
        cobj->setShowsScrollIndicators(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_setShowsScrollIndicators : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_onSectionViewForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_onSectionViewForHeaderInSection : Invalid Native Object");
    if (argc == 1) {
        std::function<CrossApp::CAView *(CrossApp::DSize, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::DSize larg0, unsigned int larg1) -> CAView* {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            largv[0] = dsize_to_jsval(cx, larg0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            CrossApp::CAView* ret;
		            do {
		            if (rval.isNull()) { ret = nullptr; break; }
		            if (!rval.isObject()) { ok = false; break; }
		            js_proxy_t *jsProxy;
		            JSObject *tmpObj = rval.toObjectOrNull();
		            jsProxy = jsb_get_js_proxy(tmpObj);
		            ret = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
		            JSB_PRECONDITION2( ret, cx, 0, "Invalid Native Object");
		        } while (0);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_onSectionViewForHeaderInSection : Error processing arguments");
        cobj->onSectionViewForHeaderInSection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_onSectionViewForHeaderInSection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_visitEve(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_visitEve : Invalid Native Object");
    if (argc == 0) {
        cobj->visitEve();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_visitEve : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACollectionView_displayingCollectionCell(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_displayingCollectionCell : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAVector<CrossApp::CACollectionViewCell *>& ret = cobj->displayingCollectionCell();
        jsval jsret = JSVAL_NULL;
        jsret = cavector_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_displayingCollectionCell : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACollectionView_getCollectionHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_getCollectionHeaderHeight : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getCollectionHeaderHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_getCollectionHeaderHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACollectionView_onWillDisplayCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_onWillDisplayCellAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<void (CrossApp::CACollectionViewCell *, unsigned int, unsigned int, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::CACollectionViewCell* larg0, unsigned int larg1, unsigned int larg2, unsigned int larg3) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[4];
		            do {
		            if (larg0) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionViewCell>(cx, (CrossApp::CACollectionViewCell*)larg0);
		                largv[0] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[0] = JSVAL_NULL;
		            }
		        } while (0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            largv[2] = uint32_to_jsval(cx, larg2);
		            largv[3] = uint32_to_jsval(cx, larg3);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(4, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_onWillDisplayCellAtIndexPath : Error processing arguments");
        cobj->onWillDisplayCellAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_onWillDisplayCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_setAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_setAlwaysBottomSectionFooter : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_setAlwaysBottomSectionFooter : Error processing arguments");
        cobj->setAlwaysBottomSectionFooter(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_setAlwaysBottomSectionFooter : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACollectionView_onNumberOfRowsAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_onNumberOfRowsAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<unsigned int (unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0) -> unsigned int {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            uint32_t ret;
		            ok &= jsval_to_uint32(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_onNumberOfRowsAtIndexPath : Error processing arguments");
        cobj->onNumberOfRowsAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_onNumberOfRowsAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_isAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_isAlwaysTopSectionHeader : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAlwaysTopSectionHeader();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_isAlwaysTopSectionHeader : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACollectionView_onCellHeightAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_onCellHeightAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<unsigned int (unsigned int, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0, unsigned int larg1) -> unsigned int {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            uint32_t ret;
		            ok &= jsval_to_uint32(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_onCellHeightAtIndexPath : Error processing arguments");
        cobj->onCellHeightAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_onCellHeightAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_getCollectionFooterHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_getCollectionFooterHeight : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getCollectionFooterHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_getCollectionFooterHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACollectionView_setVertInterval(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_setVertInterval : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_setVertInterval : Error processing arguments");
        cobj->setVertInterval(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_setVertInterval : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_onDidDeselectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_onDidDeselectCellAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<void (unsigned int, unsigned int, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0, unsigned int larg1, unsigned int larg2) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[3];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            largv[2] = uint32_to_jsval(cx, larg2);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(3, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_onDidDeselectCellAtIndexPath : Error processing arguments");
        cobj->onDidDeselectCellAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_onDidDeselectCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_onNumberOfItemsAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_onNumberOfItemsAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<unsigned int (unsigned int, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0, unsigned int larg1) -> unsigned int {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            uint32_t ret;
		            ok &= jsval_to_uint32(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_onNumberOfItemsAtIndexPath : Error processing arguments");
        cobj->onNumberOfItemsAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_onNumberOfItemsAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_setCollectionHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_setCollectionHeaderHeight : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_setCollectionHeaderHeight : Error processing arguments");
        cobj->setCollectionHeaderHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_setCollectionHeaderHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_setUnSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_setUnSelectRowAtIndexPath : Invalid Native Object");
    if (argc == 3) {
        uint32_t arg0 = 0;
        uint32_t arg1 = 0;
        uint32_t arg2 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_setUnSelectRowAtIndexPath : Error processing arguments");
        cobj->setUnSelectRowAtIndexPath(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_setUnSelectRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_crossapp_CACollectionView_getHighlightCollectionCell(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_getHighlightCollectionCell : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CACollectionViewCell* ret = cobj->getHighlightCollectionCell();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionViewCell>(cx, (CrossApp::CACollectionViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_getHighlightCollectionCell : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACollectionView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_switchPCMode : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_switchPCMode : Error processing arguments");
        cobj->switchPCMode(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_switchPCMode : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_dequeueReusableCellWithIdentifier : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_dequeueReusableCellWithIdentifier : Error processing arguments");
        CrossApp::CACollectionViewCell* ret = cobj->dequeueReusableCellWithIdentifier(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionViewCell>(cx, (CrossApp::CACollectionViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_dequeueReusableCellWithIdentifier : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CACollectionView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionView_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionView_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACollectionView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_createWithFrame : Error processing arguments");
        CrossApp::CACollectionView* ret = CrossApp::CACollectionView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionView>(cx, (CrossApp::CACollectionView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CACollectionView_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CACollectionView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_createWithLayout : Error processing arguments");
        CrossApp::CACollectionView* ret = CrossApp::CACollectionView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionView>(cx, (CrossApp::CACollectionView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CACollectionView_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CACollectionView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionView_createWithCenter : Error processing arguments");
        CrossApp::CACollectionView* ret = CrossApp::CACollectionView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionView>(cx, (CrossApp::CACollectionView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CACollectionView_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CACollectionView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CACollectionView* cobj = new (std::nothrow) CrossApp::CACollectionView();
    TypeTest<CrossApp::CACollectionView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CACollectionView");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAScrollView_prototype;

void js_CrossApp_CACollectionView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CACollectionView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CACollectionView *nobj = static_cast<CrossApp::CACollectionView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CACollectionView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CACollectionView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CACollectionView_class->name = "CACollectionView";
    jsb_CrossApp_CACollectionView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CACollectionView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CACollectionView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CACollectionView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CACollectionView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CACollectionView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CACollectionView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CACollectionView_class->finalize = js_CrossApp_CACollectionView_finalize;
    jsb_CrossApp_CACollectionView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setCollectionFooterHeight", js_crossapp_CACollectionView_setCollectionFooterHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onHeightForHeaderInSection", js_crossapp_CACollectionView_onHeightForHeaderInSection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowsSelection", js_crossapp_CACollectionView_isAllowsSelection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCollectionHeaderView", js_crossapp_CACollectionView_setCollectionHeaderView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getVertInterval", js_crossapp_CACollectionView_getVertInterval, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAlwaysBottomSectionFooter", js_crossapp_CACollectionView_isAlwaysBottomSectionFooter, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCollectionFooterView", js_crossapp_CACollectionView_setCollectionFooterView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCollectionFooterView", js_crossapp_CACollectionView_getCollectionFooterView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onSectionViewForFooterInSection", js_crossapp_CACollectionView_onSectionViewForFooterInSection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlwaysTopSectionHeader", js_crossapp_CACollectionView_setAlwaysTopSectionHeader, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onNumberOfSections", js_crossapp_CACollectionView_onNumberOfSections, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getHoriInterval", js_crossapp_CACollectionView_getHoriInterval, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("clearData", js_crossapp_CACollectionView_clearData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setHoriInterval", js_crossapp_CACollectionView_setHoriInterval, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSelectRowAtIndexPath", js_crossapp_CACollectionView_setSelectRowAtIndexPath, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDidSelectCellAtIndexPath", js_crossapp_CACollectionView_onDidSelectCellAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("cellForRowAtIndexPath", js_crossapp_CACollectionView_cellForRowAtIndexPath, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CACollectionView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowsMultipleSelection", js_crossapp_CACollectionView_isAllowsMultipleSelection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onHeightForFooterInSection", js_crossapp_CACollectionView_onHeightForFooterInSection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsSelection", js_crossapp_CACollectionView_setAllowsSelection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reloadData", js_crossapp_CACollectionView_reloadData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsMultipleSelection", js_crossapp_CACollectionView_setAllowsMultipleSelection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCollectionHeaderView", js_crossapp_CACollectionView_getCollectionHeaderView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onCellAtIndexPath", js_crossapp_CACollectionView_onCellAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setShowsScrollIndicators", js_crossapp_CACollectionView_setShowsScrollIndicators, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onSectionViewForHeaderInSection", js_crossapp_CACollectionView_onSectionViewForHeaderInSection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("visitEve", js_crossapp_CACollectionView_visitEve, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("displayingCollectionCell", js_crossapp_CACollectionView_displayingCollectionCell, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCollectionHeaderHeight", js_crossapp_CACollectionView_getCollectionHeaderHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onWillDisplayCellAtIndexPath", js_crossapp_CACollectionView_onWillDisplayCellAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlwaysBottomSectionFooter", js_crossapp_CACollectionView_setAlwaysBottomSectionFooter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_crossapp_CACollectionView_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onNumberOfRowsAtIndexPath", js_crossapp_CACollectionView_onNumberOfRowsAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAlwaysTopSectionHeader", js_crossapp_CACollectionView_isAlwaysTopSectionHeader, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onCellHeightAtIndexPath", js_crossapp_CACollectionView_onCellHeightAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCollectionFooterHeight", js_crossapp_CACollectionView_getCollectionFooterHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setVertInterval", js_crossapp_CACollectionView_setVertInterval, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDidDeselectCellAtIndexPath", js_crossapp_CACollectionView_onDidDeselectCellAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onNumberOfItemsAtIndexPath", js_crossapp_CACollectionView_onNumberOfItemsAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCollectionHeaderHeight", js_crossapp_CACollectionView_setCollectionHeaderHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setUnSelectRowAtIndexPath", js_crossapp_CACollectionView_setUnSelectRowAtIndexPath, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getHighlightCollectionCell", js_crossapp_CACollectionView_getHighlightCollectionCell, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("switchPCMode", js_crossapp_CACollectionView_switchPCMode, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("dequeueReusableCellWithIdentifier", js_crossapp_CACollectionView_dequeueReusableCellWithIdentifier, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_crossapp_CACollectionView_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_crossapp_CACollectionView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CACollectionView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CACollectionView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CACollectionView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAScrollView_prototype),
        jsb_CrossApp_CACollectionView_class,
        js_crossapp_CACollectionView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CACollectionView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CACollectionView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CACollectionView_class;
        p->proto = jsb_CrossApp_CACollectionView_prototype;
        p->parentProto = jsb_CrossApp_CAScrollView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CACollectionViewCell_class;
JSObject *jsb_CrossApp_CACollectionViewCell_prototype;

bool js_crossapp_CACollectionViewCell_getSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewCell* cobj = (CrossApp::CACollectionViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionViewCell_getSection : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getSection();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionViewCell_getSection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACollectionViewCell_getItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewCell* cobj = (CrossApp::CACollectionViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionViewCell_getItem : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getItem();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionViewCell_getItem : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACollectionViewCell_getRow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewCell* cobj = (CrossApp::CACollectionViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CACollectionViewCell_getRow : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getRow();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CACollectionViewCell_getRow : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CACollectionViewCell_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CACollectionViewCell_create : Error processing arguments");
        CrossApp::CACollectionViewCell* ret = CrossApp::CACollectionViewCell::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionViewCell>(cx, (CrossApp::CACollectionViewCell*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CACollectionViewCell_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CACollectionViewCell_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CACollectionViewCell* cobj = new (std::nothrow) CrossApp::CACollectionViewCell();
    TypeTest<CrossApp::CACollectionViewCell> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CACollectionViewCell");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_CACollectionViewCell_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::CACollectionViewCell *nobj = new (std::nothrow) CrossApp::CACollectionViewCell();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CACollectionViewCell");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_CACell_prototype;

void js_CrossApp_CACollectionViewCell_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CACollectionViewCell)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CACollectionViewCell *nobj = static_cast<CrossApp::CACollectionViewCell *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_CACollectionViewCell(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CACollectionViewCell_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CACollectionViewCell_class->name = "CACollectionViewCell";
    jsb_CrossApp_CACollectionViewCell_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CACollectionViewCell_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CACollectionViewCell_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CACollectionViewCell_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CACollectionViewCell_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CACollectionViewCell_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CACollectionViewCell_class->convert = JS_ConvertStub;
    jsb_CrossApp_CACollectionViewCell_class->finalize = js_CrossApp_CACollectionViewCell_finalize;
    jsb_CrossApp_CACollectionViewCell_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getSection", js_crossapp_CACollectionViewCell_getSection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getItem", js_crossapp_CACollectionViewCell_getItem, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRow", js_crossapp_CACollectionViewCell_getRow, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_CACollectionViewCell_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CACollectionViewCell_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CACollectionViewCell_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CACell_prototype),
        jsb_CrossApp_CACollectionViewCell_class,
        js_crossapp_CACollectionViewCell_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CACollectionViewCell", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CACollectionViewCell> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CACollectionViewCell_class;
        p->proto = jsb_CrossApp_CACollectionViewCell_prototype;
        p->parentProto = jsb_CrossApp_CACell_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.CACollectionViewCell.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_CAAutoCollectionView_class;
JSObject *jsb_CrossApp_CAAutoCollectionView_prototype;

bool js_crossapp_CAAutoCollectionView_setCollectionFooterHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_setCollectionFooterHeight : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_setCollectionFooterHeight : Error processing arguments");
        cobj->setCollectionFooterHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_setCollectionFooterHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_onHeightForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_onHeightForHeaderInSection : Invalid Native Object");
    if (argc == 1) {
        std::function<unsigned int (unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0) -> unsigned int {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            uint32_t ret;
		            ok &= jsval_to_uint32(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_onHeightForHeaderInSection : Error processing arguments");
        cobj->onHeightForHeaderInSection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_onHeightForHeaderInSection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_isAllowsSelection : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsSelection();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_isAllowsSelection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAutoCollectionView_getCellVertAlign(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_getCellVertAlign : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getCellVertAlign();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_getCellVertAlign : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAutoCollectionView_setCollectionHeaderView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_setCollectionHeaderView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_setCollectionHeaderView : Error processing arguments");
        cobj->setCollectionHeaderView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_setCollectionHeaderView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_getOrientation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_getOrientation : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getOrientation();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_getOrientation : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAutoCollectionView_isAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_isAlwaysBottomSectionFooter : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAlwaysBottomSectionFooter();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_isAlwaysBottomSectionFooter : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAutoCollectionView_setCollectionFooterView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_setCollectionFooterView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_setCollectionFooterView : Error processing arguments");
        cobj->setCollectionFooterView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_setCollectionFooterView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_getCollectionFooterView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_getCollectionFooterView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getCollectionFooterView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_getCollectionFooterView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAutoCollectionView_onSectionViewForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_onSectionViewForFooterInSection : Invalid Native Object");
    if (argc == 1) {
        std::function<CrossApp::CAView *(CrossApp::DSize, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::DSize larg0, unsigned int larg1) -> CAView* {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            largv[0] = dsize_to_jsval(cx, larg0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            CrossApp::CAView* ret;
		            do {
		            if (rval.isNull()) { ret = nullptr; break; }
		            if (!rval.isObject()) { ok = false; break; }
		            js_proxy_t *jsProxy;
		            JSObject *tmpObj = rval.toObjectOrNull();
		            jsProxy = jsb_get_js_proxy(tmpObj);
		            ret = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
		            JSB_PRECONDITION2( ret, cx, 0, "Invalid Native Object");
		        } while (0);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_onSectionViewForFooterInSection : Error processing arguments");
        cobj->onSectionViewForFooterInSection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_onSectionViewForFooterInSection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_setHoriCellInterval(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_setHoriCellInterval : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_setHoriCellInterval : Error processing arguments");
        cobj->setHoriCellInterval(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_setHoriCellInterval : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_getCellHoriAlign(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_getCellHoriAlign : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getCellHoriAlign();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_getCellHoriAlign : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAutoCollectionView_getVertMargins(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_getVertMargins : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getVertMargins();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_getVertMargins : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAutoCollectionView_onNumberOfSections(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_onNumberOfSections : Invalid Native Object");
    if (argc == 1) {
        std::function<unsigned int ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> unsigned int {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            uint32_t ret;
		            ok &= jsval_to_uint32(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_onNumberOfSections : Error processing arguments");
        cobj->onNumberOfSections(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_onNumberOfSections : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_setCellHoriAlign(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_setCellHoriAlign : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAAutoCollectionView::CellHoriAlign arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_setCellHoriAlign : Error processing arguments");
        cobj->setCellHoriAlign(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_setCellHoriAlign : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_setSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_setSelectRowAtIndexPath : Invalid Native Object");
    if (argc == 2) {
        uint32_t arg0 = 0;
        uint32_t arg1 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_setSelectRowAtIndexPath : Error processing arguments");
        cobj->setSelectRowAtIndexPath(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_setSelectRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAAutoCollectionView_onDidSelectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_onDidSelectCellAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<void (unsigned int, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0, unsigned int larg1) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_onDidSelectCellAtIndexPath : Error processing arguments");
        cobj->onDidSelectCellAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_onDidSelectCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_cellForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_cellForRowAtIndexPath : Invalid Native Object");
    if (argc == 2) {
        uint32_t arg0 = 0;
        uint32_t arg1 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_cellForRowAtIndexPath : Error processing arguments");
        CrossApp::CACollectionViewCell* ret = cobj->cellForRowAtIndexPath(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionViewCell>(cx, (CrossApp::CACollectionViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_cellForRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAAutoCollectionView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAutoCollectionView_getHoriCellInterval(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_getHoriCellInterval : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getHoriCellInterval();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_getHoriCellInterval : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAutoCollectionView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_isAllowsMultipleSelection : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsMultipleSelection();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_isAllowsMultipleSelection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAutoCollectionView_onHeightForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_onHeightForFooterInSection : Invalid Native Object");
    if (argc == 1) {
        std::function<unsigned int (unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0) -> unsigned int {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            uint32_t ret;
		            ok &= jsval_to_uint32(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_onHeightForFooterInSection : Error processing arguments");
        cobj->onHeightForFooterInSection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_onHeightForFooterInSection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_setVertMargins(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_setVertMargins : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_setVertMargins : Error processing arguments");
        cobj->setVertMargins(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_setVertMargins : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_setAllowsSelection : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_setAllowsSelection : Error processing arguments");
        cobj->setAllowsSelection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_setAllowsSelection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_reloadData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_reloadData : Invalid Native Object");
    if (argc == 0) {
        cobj->reloadData();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_reloadData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAutoCollectionView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_setAllowsMultipleSelection : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_setAllowsMultipleSelection : Error processing arguments");
        cobj->setAllowsMultipleSelection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_setAllowsMultipleSelection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_getCollectionHeaderView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_getCollectionHeaderView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getCollectionHeaderView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_getCollectionHeaderView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAutoCollectionView_onCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_onCellAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<CrossApp::CACollectionViewCell *(CrossApp::DSize, unsigned int, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::DSize larg0, unsigned int larg1, unsigned int larg2) -> CACollectionViewCell* {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[3];
		            largv[0] = dsize_to_jsval(cx, larg0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            largv[2] = uint32_to_jsval(cx, larg2);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(3, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            CrossApp::CACollectionViewCell* ret;
		            do {
		            if (rval.isNull()) { ret = nullptr; break; }
		            if (!rval.isObject()) { ok = false; break; }
		            js_proxy_t *jsProxy;
		            JSObject *tmpObj = rval.toObjectOrNull();
		            jsProxy = jsb_get_js_proxy(tmpObj);
		            ret = (CrossApp::CACollectionViewCell*)(jsProxy ? jsProxy->ptr : NULL);
		            JSB_PRECONDITION2( ret, cx, 0, "Invalid Native Object");
		        } while (0);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_onCellAtIndexPath : Error processing arguments");
        cobj->onCellAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_onCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_setAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_setAlwaysTopSectionHeader : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_setAlwaysTopSectionHeader : Error processing arguments");
        cobj->setAlwaysTopSectionHeader(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_setAlwaysTopSectionHeader : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_setShowsScrollIndicators : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_setShowsScrollIndicators : Error processing arguments");
        cobj->setShowsScrollIndicators(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_setShowsScrollIndicators : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_onSectionViewForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_onSectionViewForHeaderInSection : Invalid Native Object");
    if (argc == 1) {
        std::function<CrossApp::CAView *(CrossApp::DSize, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::DSize larg0, unsigned int larg1) -> CAView* {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            largv[0] = dsize_to_jsval(cx, larg0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            CrossApp::CAView* ret;
		            do {
		            if (rval.isNull()) { ret = nullptr; break; }
		            if (!rval.isObject()) { ok = false; break; }
		            js_proxy_t *jsProxy;
		            JSObject *tmpObj = rval.toObjectOrNull();
		            jsProxy = jsb_get_js_proxy(tmpObj);
		            ret = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
		            JSB_PRECONDITION2( ret, cx, 0, "Invalid Native Object");
		        } while (0);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_onSectionViewForHeaderInSection : Error processing arguments");
        cobj->onSectionViewForHeaderInSection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_onSectionViewForHeaderInSection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_visitEve(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_visitEve : Invalid Native Object");
    if (argc == 0) {
        cobj->visitEve();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_visitEve : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAutoCollectionView_displayingCollectionCell(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_displayingCollectionCell : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAVector<CrossApp::CACollectionViewCell *>& ret = cobj->displayingCollectionCell();
        jsval jsret = JSVAL_NULL;
        jsret = cavector_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_displayingCollectionCell : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAutoCollectionView_getCollectionHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_getCollectionHeaderHeight : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getCollectionHeaderHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_getCollectionHeaderHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAutoCollectionView_onWillDisplayCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_onWillDisplayCellAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<void (CrossApp::CACollectionViewCell *, unsigned int, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::CACollectionViewCell* larg0, unsigned int larg1, unsigned int larg2) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[3];
		            do {
		            if (larg0) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionViewCell>(cx, (CrossApp::CACollectionViewCell*)larg0);
		                largv[0] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[0] = JSVAL_NULL;
		            }
		        } while (0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            largv[2] = uint32_to_jsval(cx, larg2);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(3, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_onWillDisplayCellAtIndexPath : Error processing arguments");
        cobj->onWillDisplayCellAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_onWillDisplayCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_setAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_setAlwaysBottomSectionFooter : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_setAlwaysBottomSectionFooter : Error processing arguments");
        cobj->setAlwaysBottomSectionFooter(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_setAlwaysBottomSectionFooter : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAutoCollectionView_setCellVertAlign(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_setCellVertAlign : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAAutoCollectionView::CellVertAlign arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_setCellVertAlign : Error processing arguments");
        cobj->setCellVertAlign(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_setCellVertAlign : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_isAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_isAlwaysTopSectionHeader : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAlwaysTopSectionHeader();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_isAlwaysTopSectionHeader : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAutoCollectionView_setOrientation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_setOrientation : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAAutoCollectionView::Orientation arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_setOrientation : Error processing arguments");
        cobj->setOrientation(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_setOrientation : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_getVertCellInterval(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_getVertCellInterval : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getVertCellInterval();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_getVertCellInterval : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAutoCollectionView_getCollectionFooterHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_getCollectionFooterHeight : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getCollectionFooterHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_getCollectionFooterHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAutoCollectionView_onDidDeselectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_onDidDeselectCellAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<void (unsigned int, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0, unsigned int larg1) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_onDidDeselectCellAtIndexPath : Error processing arguments");
        cobj->onDidDeselectCellAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_onDidDeselectCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_onNumberOfItemsAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_onNumberOfItemsAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<unsigned int (unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0) -> unsigned int {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            uint32_t ret;
		            ok &= jsval_to_uint32(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_onNumberOfItemsAtIndexPath : Error processing arguments");
        cobj->onNumberOfItemsAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_onNumberOfItemsAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_onCellSizeAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_onCellSizeAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<CrossApp::DSize (unsigned int, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0, unsigned int larg1) -> DSize {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            CrossApp::DSize ret;
		            ok &= jsval_to_dsize(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_onCellSizeAtIndexPath : Error processing arguments");
        cobj->onCellSizeAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_onCellSizeAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_setHoriMargins(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_setHoriMargins : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_setHoriMargins : Error processing arguments");
        cobj->setHoriMargins(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_setHoriMargins : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_setCollectionHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_setCollectionHeaderHeight : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_setCollectionHeaderHeight : Error processing arguments");
        cobj->setCollectionHeaderHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_setCollectionHeaderHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_setUnSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_setUnSelectRowAtIndexPath : Invalid Native Object");
    if (argc == 2) {
        uint32_t arg0 = 0;
        uint32_t arg1 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_setUnSelectRowAtIndexPath : Error processing arguments");
        cobj->setUnSelectRowAtIndexPath(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_setUnSelectRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAAutoCollectionView_getHighlightCollectionCell(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_getHighlightCollectionCell : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CACollectionViewCell* ret = cobj->getHighlightCollectionCell();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionViewCell>(cx, (CrossApp::CACollectionViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_getHighlightCollectionCell : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAutoCollectionView_setVertCellInterval(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_setVertCellInterval : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_setVertCellInterval : Error processing arguments");
        cobj->setVertCellInterval(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_setVertCellInterval : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_switchPCMode : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_switchPCMode : Error processing arguments");
        cobj->switchPCMode(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_switchPCMode : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_getHoriMargins(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_getHoriMargins : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getHoriMargins();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_getHoriMargins : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAutoCollectionView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_dequeueReusableCellWithIdentifier : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_dequeueReusableCellWithIdentifier : Error processing arguments");
        CrossApp::CACollectionViewCell* ret = cobj->dequeueReusableCellWithIdentifier(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionViewCell>(cx, (CrossApp::CACollectionViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_dequeueReusableCellWithIdentifier : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAutoCollectionView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAutoCollectionView_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAutoCollectionView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_createWithFrame : Error processing arguments");
        CrossApp::CAAutoCollectionView* ret = CrossApp::CAAutoCollectionView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAAutoCollectionView>(cx, (CrossApp::CAAutoCollectionView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CAAutoCollectionView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_createWithLayout : Error processing arguments");
        CrossApp::CAAutoCollectionView* ret = CrossApp::CAAutoCollectionView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAAutoCollectionView>(cx, (CrossApp::CAAutoCollectionView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CAAutoCollectionView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAutoCollectionView_createWithCenter : Error processing arguments");
        CrossApp::CAAutoCollectionView* ret = CrossApp::CAAutoCollectionView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAAutoCollectionView>(cx, (CrossApp::CAAutoCollectionView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAAutoCollectionView_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CAAutoCollectionView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAAutoCollectionView* cobj = new (std::nothrow) CrossApp::CAAutoCollectionView();
    TypeTest<CrossApp::CAAutoCollectionView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAAutoCollectionView");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAScrollView_prototype;

void js_CrossApp_CAAutoCollectionView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAAutoCollectionView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAAutoCollectionView *nobj = static_cast<CrossApp::CAAutoCollectionView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAAutoCollectionView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAAutoCollectionView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAAutoCollectionView_class->name = "CAAutoCollectionView";
    jsb_CrossApp_CAAutoCollectionView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAAutoCollectionView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAAutoCollectionView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAAutoCollectionView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAAutoCollectionView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAAutoCollectionView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAAutoCollectionView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAAutoCollectionView_class->finalize = js_CrossApp_CAAutoCollectionView_finalize;
    jsb_CrossApp_CAAutoCollectionView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setCollectionFooterHeight", js_crossapp_CAAutoCollectionView_setCollectionFooterHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onHeightForHeaderInSection", js_crossapp_CAAutoCollectionView_onHeightForHeaderInSection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowsSelection", js_crossapp_CAAutoCollectionView_isAllowsSelection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCellVertAlign", js_crossapp_CAAutoCollectionView_getCellVertAlign, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCollectionHeaderView", js_crossapp_CAAutoCollectionView_setCollectionHeaderView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getOrientation", js_crossapp_CAAutoCollectionView_getOrientation, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAlwaysBottomSectionFooter", js_crossapp_CAAutoCollectionView_isAlwaysBottomSectionFooter, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCollectionFooterView", js_crossapp_CAAutoCollectionView_setCollectionFooterView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCollectionFooterView", js_crossapp_CAAutoCollectionView_getCollectionFooterView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onSectionViewForFooterInSection", js_crossapp_CAAutoCollectionView_onSectionViewForFooterInSection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setHoriCellInterval", js_crossapp_CAAutoCollectionView_setHoriCellInterval, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCellHoriAlign", js_crossapp_CAAutoCollectionView_getCellHoriAlign, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getVertMargins", js_crossapp_CAAutoCollectionView_getVertMargins, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onNumberOfSections", js_crossapp_CAAutoCollectionView_onNumberOfSections, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCellHoriAlign", js_crossapp_CAAutoCollectionView_setCellHoriAlign, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSelectRowAtIndexPath", js_crossapp_CAAutoCollectionView_setSelectRowAtIndexPath, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDidSelectCellAtIndexPath", js_crossapp_CAAutoCollectionView_onDidSelectCellAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("cellForRowAtIndexPath", js_crossapp_CAAutoCollectionView_cellForRowAtIndexPath, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CAAutoCollectionView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getHoriCellInterval", js_crossapp_CAAutoCollectionView_getHoriCellInterval, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowsMultipleSelection", js_crossapp_CAAutoCollectionView_isAllowsMultipleSelection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onHeightForFooterInSection", js_crossapp_CAAutoCollectionView_onHeightForFooterInSection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setVertMargins", js_crossapp_CAAutoCollectionView_setVertMargins, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsSelection", js_crossapp_CAAutoCollectionView_setAllowsSelection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reloadData", js_crossapp_CAAutoCollectionView_reloadData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsMultipleSelection", js_crossapp_CAAutoCollectionView_setAllowsMultipleSelection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCollectionHeaderView", js_crossapp_CAAutoCollectionView_getCollectionHeaderView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onCellAtIndexPath", js_crossapp_CAAutoCollectionView_onCellAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlwaysTopSectionHeader", js_crossapp_CAAutoCollectionView_setAlwaysTopSectionHeader, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setShowsScrollIndicators", js_crossapp_CAAutoCollectionView_setShowsScrollIndicators, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onSectionViewForHeaderInSection", js_crossapp_CAAutoCollectionView_onSectionViewForHeaderInSection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("visitEve", js_crossapp_CAAutoCollectionView_visitEve, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("displayingCollectionCell", js_crossapp_CAAutoCollectionView_displayingCollectionCell, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCollectionHeaderHeight", js_crossapp_CAAutoCollectionView_getCollectionHeaderHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onWillDisplayCellAtIndexPath", js_crossapp_CAAutoCollectionView_onWillDisplayCellAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlwaysBottomSectionFooter", js_crossapp_CAAutoCollectionView_setAlwaysBottomSectionFooter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_crossapp_CAAutoCollectionView_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCellVertAlign", js_crossapp_CAAutoCollectionView_setCellVertAlign, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAlwaysTopSectionHeader", js_crossapp_CAAutoCollectionView_isAlwaysTopSectionHeader, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setOrientation", js_crossapp_CAAutoCollectionView_setOrientation, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getVertCellInterval", js_crossapp_CAAutoCollectionView_getVertCellInterval, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCollectionFooterHeight", js_crossapp_CAAutoCollectionView_getCollectionFooterHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDidDeselectCellAtIndexPath", js_crossapp_CAAutoCollectionView_onDidDeselectCellAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onNumberOfItemsAtIndexPath", js_crossapp_CAAutoCollectionView_onNumberOfItemsAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onCellSizeAtIndexPath", js_crossapp_CAAutoCollectionView_onCellSizeAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setHoriMargins", js_crossapp_CAAutoCollectionView_setHoriMargins, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCollectionHeaderHeight", js_crossapp_CAAutoCollectionView_setCollectionHeaderHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setUnSelectRowAtIndexPath", js_crossapp_CAAutoCollectionView_setUnSelectRowAtIndexPath, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getHighlightCollectionCell", js_crossapp_CAAutoCollectionView_getHighlightCollectionCell, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setVertCellInterval", js_crossapp_CAAutoCollectionView_setVertCellInterval, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("switchPCMode", js_crossapp_CAAutoCollectionView_switchPCMode, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getHoriMargins", js_crossapp_CAAutoCollectionView_getHoriMargins, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("dequeueReusableCellWithIdentifier", js_crossapp_CAAutoCollectionView_dequeueReusableCellWithIdentifier, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_crossapp_CAAutoCollectionView_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_crossapp_CAAutoCollectionView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CAAutoCollectionView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CAAutoCollectionView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAAutoCollectionView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAScrollView_prototype),
        jsb_CrossApp_CAAutoCollectionView_class,
        js_crossapp_CAAutoCollectionView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAAutoCollectionView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAAutoCollectionView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAAutoCollectionView_class;
        p->proto = jsb_CrossApp_CAAutoCollectionView_prototype;
        p->parentProto = jsb_CrossApp_CAScrollView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAWaterfallView_class;
JSObject *jsb_CrossApp_CAWaterfallView_prototype;

bool js_crossapp_CAWaterfallView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_isAllowsSelection : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsSelection();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_isAllowsSelection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWaterfallView_setWaterfallHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_setWaterfallHeaderHeight : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_setWaterfallHeaderHeight : Error processing arguments");
        cobj->setWaterfallHeaderHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_setWaterfallHeaderHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWaterfallView_setColumnMargin(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_setColumnMargin : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_setColumnMargin : Error processing arguments");
        cobj->setColumnMargin(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_setColumnMargin : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWaterfallView_getWaterfallHeaderView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_getWaterfallHeaderView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getWaterfallHeaderView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_getWaterfallHeaderView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWaterfallView_getColumnCount(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_getColumnCount : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getColumnCount();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_getColumnCount : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWaterfallView_setAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_setAlwaysTopSectionHeader : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_setAlwaysTopSectionHeader : Error processing arguments");
        cobj->setAlwaysTopSectionHeader(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_setAlwaysTopSectionHeader : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWaterfallView_isAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_isAlwaysBottomSectionFooter : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAlwaysBottomSectionFooter();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_isAlwaysBottomSectionFooter : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWaterfallView_getWaterfallHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_getWaterfallHeaderHeight : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getWaterfallHeaderHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_getWaterfallHeaderHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWaterfallView_setColumnCount(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_setColumnCount : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_setColumnCount : Error processing arguments");
        cobj->setColumnCount(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_setColumnCount : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWaterfallView_setWaterfallHeaderView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_setWaterfallHeaderView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_setWaterfallHeaderView : Error processing arguments");
        cobj->setWaterfallHeaderView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_setWaterfallHeaderView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWaterfallView_setWaterfallFooterHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_setWaterfallFooterHeight : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_setWaterfallFooterHeight : Error processing arguments");
        cobj->setWaterfallFooterHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_setWaterfallFooterHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWaterfallView_setSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_setSelectRowAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_setSelectRowAtIndexPath : Error processing arguments");
        cobj->setSelectRowAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_setSelectRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWaterfallView_onDidSelectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_onDidSelectCellAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<void (unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_onDidSelectCellAtIndexPath : Error processing arguments");
        cobj->onDidSelectCellAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_onDidSelectCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWaterfallView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWaterfallView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_isAllowsMultipleSelection : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsMultipleSelection();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_isAllowsMultipleSelection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWaterfallView_getHighlightWaterfallCell(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_getHighlightWaterfallCell : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAWaterfallViewCell* ret = cobj->getHighlightWaterfallCell();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWaterfallViewCell>(cx, (CrossApp::CAWaterfallViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_getHighlightWaterfallCell : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWaterfallView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_setAllowsSelection : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_setAllowsSelection : Error processing arguments");
        cobj->setAllowsSelection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_setAllowsSelection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWaterfallView_reloadData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_reloadData : Invalid Native Object");
    if (argc == 0) {
        cobj->reloadData();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_reloadData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWaterfallView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_setAllowsMultipleSelection : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_setAllowsMultipleSelection : Error processing arguments");
        cobj->setAllowsMultipleSelection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_setAllowsMultipleSelection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWaterfallView_onCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_onCellAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<CrossApp::CAWaterfallViewCell *(CrossApp::DSize, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::DSize larg0, unsigned int larg1) -> CAWaterfallViewCell* {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            largv[0] = dsize_to_jsval(cx, larg0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            CrossApp::CAWaterfallViewCell* ret;
		            do {
		            if (rval.isNull()) { ret = nullptr; break; }
		            if (!rval.isObject()) { ok = false; break; }
		            js_proxy_t *jsProxy;
		            JSObject *tmpObj = rval.toObjectOrNull();
		            jsProxy = jsb_get_js_proxy(tmpObj);
		            ret = (CrossApp::CAWaterfallViewCell*)(jsProxy ? jsProxy->ptr : NULL);
		            JSB_PRECONDITION2( ret, cx, 0, "Invalid Native Object");
		        } while (0);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_onCellAtIndexPath : Error processing arguments");
        cobj->onCellAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_onCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWaterfallView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_setShowsScrollIndicators : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_setShowsScrollIndicators : Error processing arguments");
        cobj->setShowsScrollIndicators(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_setShowsScrollIndicators : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWaterfallView_cellForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_cellForRowAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_cellForRowAtIndexPath : Error processing arguments");
        CrossApp::CAWaterfallViewCell* ret = cobj->cellForRowAtIndexPath(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWaterfallViewCell>(cx, (CrossApp::CAWaterfallViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_cellForRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWaterfallView_visitEve(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_visitEve : Invalid Native Object");
    if (argc == 0) {
        cobj->visitEve();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_visitEve : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWaterfallView_setWaterfallFooterView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_setWaterfallFooterView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_setWaterfallFooterView : Error processing arguments");
        cobj->setWaterfallFooterView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_setWaterfallFooterView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWaterfallView_getColumnMargin(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_getColumnMargin : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getColumnMargin();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_getColumnMargin : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWaterfallView_getWaterfallFooterView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_getWaterfallFooterView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getWaterfallFooterView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_getWaterfallFooterView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWaterfallView_onWillDisplayCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_onWillDisplayCellAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<void (CrossApp::CAWaterfallViewCell *, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::CAWaterfallViewCell* larg0, unsigned int larg1) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            do {
		            if (larg0) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWaterfallViewCell>(cx, (CrossApp::CAWaterfallViewCell*)larg0);
		                largv[0] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[0] = JSVAL_NULL;
		            }
		        } while (0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_onWillDisplayCellAtIndexPath : Error processing arguments");
        cobj->onWillDisplayCellAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_onWillDisplayCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWaterfallView_setAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_setAlwaysBottomSectionFooter : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_setAlwaysBottomSectionFooter : Error processing arguments");
        cobj->setAlwaysBottomSectionFooter(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_setAlwaysBottomSectionFooter : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWaterfallView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWaterfallView_setItemMargin(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_setItemMargin : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_setItemMargin : Error processing arguments");
        cobj->setItemMargin(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_setItemMargin : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWaterfallView_isAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_isAlwaysTopSectionHeader : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAlwaysTopSectionHeader();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_isAlwaysTopSectionHeader : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWaterfallView_displayingWaterfallCell(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_displayingWaterfallCell : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAVector<CrossApp::CAWaterfallViewCell *>& ret = cobj->displayingWaterfallCell();
        jsval jsret = JSVAL_NULL;
        jsret = cavector_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_displayingWaterfallCell : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWaterfallView_onCellHeightAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_onCellHeightAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<unsigned int (unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0) -> unsigned int {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            uint32_t ret;
		            ok &= jsval_to_uint32(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_onCellHeightAtIndexPath : Error processing arguments");
        cobj->onCellHeightAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_onCellHeightAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWaterfallView_getItemMargin(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_getItemMargin : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getItemMargin();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_getItemMargin : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWaterfallView_onDidDeselectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_onDidDeselectCellAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<void (unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_onDidDeselectCellAtIndexPath : Error processing arguments");
        cobj->onDidDeselectCellAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_onDidDeselectCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWaterfallView_onNumberOfItemsAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_onNumberOfItemsAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        std::function<unsigned int ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> unsigned int {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            uint32_t ret;
		            ok &= jsval_to_uint32(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_onNumberOfItemsAtIndexPath : Error processing arguments");
        cobj->onNumberOfItemsAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_onNumberOfItemsAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWaterfallView_setUnSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_setUnSelectRowAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_setUnSelectRowAtIndexPath : Error processing arguments");
        cobj->setUnSelectRowAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_setUnSelectRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWaterfallView_getWaterfallFooterHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_getWaterfallFooterHeight : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getWaterfallFooterHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_getWaterfallFooterHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWaterfallView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_switchPCMode : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_switchPCMode : Error processing arguments");
        cobj->switchPCMode(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_switchPCMode : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWaterfallView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_dequeueReusableCellWithIdentifier : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_dequeueReusableCellWithIdentifier : Error processing arguments");
        CrossApp::CAWaterfallViewCell* ret = cobj->dequeueReusableCellWithIdentifier(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWaterfallViewCell>(cx, (CrossApp::CAWaterfallViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_dequeueReusableCellWithIdentifier : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWaterfallView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallView_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallView_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWaterfallView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_createWithFrame : Error processing arguments");
        CrossApp::CAWaterfallView* ret = CrossApp::CAWaterfallView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWaterfallView>(cx, (CrossApp::CAWaterfallView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAWaterfallView_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CAWaterfallView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_createWithLayout : Error processing arguments");
        CrossApp::CAWaterfallView* ret = CrossApp::CAWaterfallView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWaterfallView>(cx, (CrossApp::CAWaterfallView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAWaterfallView_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CAWaterfallView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallView_createWithCenter : Error processing arguments");
        CrossApp::CAWaterfallView* ret = CrossApp::CAWaterfallView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWaterfallView>(cx, (CrossApp::CAWaterfallView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAWaterfallView_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CAWaterfallView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAWaterfallView* cobj = new (std::nothrow) CrossApp::CAWaterfallView();
    TypeTest<CrossApp::CAWaterfallView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAWaterfallView");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAScrollView_prototype;

void js_CrossApp_CAWaterfallView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAWaterfallView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAWaterfallView *nobj = static_cast<CrossApp::CAWaterfallView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAWaterfallView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAWaterfallView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAWaterfallView_class->name = "CAWaterfallView";
    jsb_CrossApp_CAWaterfallView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAWaterfallView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAWaterfallView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAWaterfallView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAWaterfallView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAWaterfallView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAWaterfallView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAWaterfallView_class->finalize = js_CrossApp_CAWaterfallView_finalize;
    jsb_CrossApp_CAWaterfallView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("isAllowsSelection", js_crossapp_CAWaterfallView_isAllowsSelection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setWaterfallHeaderHeight", js_crossapp_CAWaterfallView_setWaterfallHeaderHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setColumnMargin", js_crossapp_CAWaterfallView_setColumnMargin, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getWaterfallHeaderView", js_crossapp_CAWaterfallView_getWaterfallHeaderView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getColumnCount", js_crossapp_CAWaterfallView_getColumnCount, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlwaysTopSectionHeader", js_crossapp_CAWaterfallView_setAlwaysTopSectionHeader, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAlwaysBottomSectionFooter", js_crossapp_CAWaterfallView_isAlwaysBottomSectionFooter, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getWaterfallHeaderHeight", js_crossapp_CAWaterfallView_getWaterfallHeaderHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setColumnCount", js_crossapp_CAWaterfallView_setColumnCount, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setWaterfallHeaderView", js_crossapp_CAWaterfallView_setWaterfallHeaderView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setWaterfallFooterHeight", js_crossapp_CAWaterfallView_setWaterfallFooterHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSelectRowAtIndexPath", js_crossapp_CAWaterfallView_setSelectRowAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDidSelectCellAtIndexPath", js_crossapp_CAWaterfallView_onDidSelectCellAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CAWaterfallView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowsMultipleSelection", js_crossapp_CAWaterfallView_isAllowsMultipleSelection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getHighlightWaterfallCell", js_crossapp_CAWaterfallView_getHighlightWaterfallCell, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsSelection", js_crossapp_CAWaterfallView_setAllowsSelection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reloadData", js_crossapp_CAWaterfallView_reloadData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsMultipleSelection", js_crossapp_CAWaterfallView_setAllowsMultipleSelection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onCellAtIndexPath", js_crossapp_CAWaterfallView_onCellAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setShowsScrollIndicators", js_crossapp_CAWaterfallView_setShowsScrollIndicators, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("cellForRowAtIndexPath", js_crossapp_CAWaterfallView_cellForRowAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("visitEve", js_crossapp_CAWaterfallView_visitEve, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setWaterfallFooterView", js_crossapp_CAWaterfallView_setWaterfallFooterView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getColumnMargin", js_crossapp_CAWaterfallView_getColumnMargin, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getWaterfallFooterView", js_crossapp_CAWaterfallView_getWaterfallFooterView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onWillDisplayCellAtIndexPath", js_crossapp_CAWaterfallView_onWillDisplayCellAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlwaysBottomSectionFooter", js_crossapp_CAWaterfallView_setAlwaysBottomSectionFooter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_crossapp_CAWaterfallView_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setItemMargin", js_crossapp_CAWaterfallView_setItemMargin, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAlwaysTopSectionHeader", js_crossapp_CAWaterfallView_isAlwaysTopSectionHeader, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("displayingWaterfallCell", js_crossapp_CAWaterfallView_displayingWaterfallCell, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onCellHeightAtIndexPath", js_crossapp_CAWaterfallView_onCellHeightAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getItemMargin", js_crossapp_CAWaterfallView_getItemMargin, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDidDeselectCellAtIndexPath", js_crossapp_CAWaterfallView_onDidDeselectCellAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onNumberOfItemsAtIndexPath", js_crossapp_CAWaterfallView_onNumberOfItemsAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setUnSelectRowAtIndexPath", js_crossapp_CAWaterfallView_setUnSelectRowAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getWaterfallFooterHeight", js_crossapp_CAWaterfallView_getWaterfallFooterHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("switchPCMode", js_crossapp_CAWaterfallView_switchPCMode, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("dequeueReusableCellWithIdentifier", js_crossapp_CAWaterfallView_dequeueReusableCellWithIdentifier, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_crossapp_CAWaterfallView_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_crossapp_CAWaterfallView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CAWaterfallView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CAWaterfallView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAWaterfallView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAScrollView_prototype),
        jsb_CrossApp_CAWaterfallView_class,
        js_crossapp_CAWaterfallView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAWaterfallView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAWaterfallView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAWaterfallView_class;
        p->proto = jsb_CrossApp_CAWaterfallView_prototype;
        p->parentProto = jsb_CrossApp_CAScrollView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAWaterfallViewCell_class;
JSObject *jsb_CrossApp_CAWaterfallViewCell_prototype;

bool js_crossapp_CAWaterfallViewCell_getItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallViewCell* cobj = (CrossApp::CAWaterfallViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWaterfallViewCell_getItem : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getItem();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWaterfallViewCell_getItem : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWaterfallViewCell_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWaterfallViewCell_create : Error processing arguments");
        CrossApp::CAWaterfallViewCell* ret = CrossApp::CAWaterfallViewCell::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWaterfallViewCell>(cx, (CrossApp::CAWaterfallViewCell*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAWaterfallViewCell_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CAWaterfallViewCell_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAWaterfallViewCell* cobj = new (std::nothrow) CrossApp::CAWaterfallViewCell();
    TypeTest<CrossApp::CAWaterfallViewCell> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAWaterfallViewCell");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_CAWaterfallViewCell_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::CAWaterfallViewCell *nobj = new (std::nothrow) CrossApp::CAWaterfallViewCell();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAWaterfallViewCell");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_CACell_prototype;

void js_CrossApp_CAWaterfallViewCell_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAWaterfallViewCell)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAWaterfallViewCell *nobj = static_cast<CrossApp::CAWaterfallViewCell *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_CAWaterfallViewCell(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAWaterfallViewCell_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAWaterfallViewCell_class->name = "CAWaterfallViewCell";
    jsb_CrossApp_CAWaterfallViewCell_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAWaterfallViewCell_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAWaterfallViewCell_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAWaterfallViewCell_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAWaterfallViewCell_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAWaterfallViewCell_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAWaterfallViewCell_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAWaterfallViewCell_class->finalize = js_CrossApp_CAWaterfallViewCell_finalize;
    jsb_CrossApp_CAWaterfallViewCell_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getItem", js_crossapp_CAWaterfallViewCell_getItem, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_CAWaterfallViewCell_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CAWaterfallViewCell_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAWaterfallViewCell_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CACell_prototype),
        jsb_CrossApp_CAWaterfallViewCell_class,
        js_crossapp_CAWaterfallViewCell_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAWaterfallViewCell", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAWaterfallViewCell> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAWaterfallViewCell_class;
        p->proto = jsb_CrossApp_CAWaterfallViewCell_prototype;
        p->parentProto = jsb_CrossApp_CACell_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.CAWaterfallViewCell.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_FileUtils_class;
JSObject *jsb_CrossApp_FileUtils_prototype;

bool js_crossapp_FileUtils_writeDataToFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FileUtils* cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_writeDataToFile : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAData* arg0 = nullptr;
        std::string arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAData*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FileUtils_writeDataToFile : Error processing arguments");
        bool ret = cobj->writeDataToFile(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FileUtils_writeDataToFile : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_FileUtils_removeFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FileUtils* cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_removeFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FileUtils_removeFile : Error processing arguments");
        bool ret = cobj->removeFile(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FileUtils_removeFile : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_FileUtils_getDataFromFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FileUtils* cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_getDataFromFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FileUtils_getDataFromFile : Error processing arguments");
        CrossApp::CAData* ret = cobj->getDataFromFile(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAData>(cx, (CrossApp::CAData*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FileUtils_getDataFromFile : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_FileUtils_purgeCachedEntries(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FileUtils* cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_purgeCachedEntries : Invalid Native Object");
    if (argc == 0) {
        cobj->purgeCachedEntries();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FileUtils_purgeCachedEntries : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_FileUtils_isAbsolutePath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FileUtils* cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_isAbsolutePath : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FileUtils_isAbsolutePath : Error processing arguments");
        bool ret = cobj->isAbsolutePath(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FileUtils_isAbsolutePath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_FileUtils_renameFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::FileUtils* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_renameFile : Invalid Native Object");
    do {
        if (argc == 2) {
            std::string arg0;
            ok &= jsval_to_std_string(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= jsval_to_std_string(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            bool ret = cobj->renameFile(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            jsret = BOOLEAN_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 3) {
            std::string arg0;
            ok &= jsval_to_std_string(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= jsval_to_std_string(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            std::string arg2;
            ok &= jsval_to_std_string(cx, args.get(2), &arg2);
            if (!ok) { ok = true; break; }
            bool ret = cobj->renameFile(arg0, arg1, arg2);
            jsval jsret = JSVAL_NULL;
            jsret = BOOLEAN_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_FileUtils_renameFile : wrong number of arguments");
    return false;
}
bool js_crossapp_FileUtils_getDefaultResourceRootPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FileUtils* cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_getDefaultResourceRootPath : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getDefaultResourceRootPath();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FileUtils_getDefaultResourceRootPath : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_FileUtils_isPopupNotify(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FileUtils* cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_isPopupNotify : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isPopupNotify();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FileUtils_isPopupNotify : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_FileUtils_removeDirectory(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FileUtils* cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_removeDirectory : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FileUtils_removeDirectory : Error processing arguments");
        bool ret = cobj->removeDirectory(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FileUtils_removeDirectory : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_FileUtils_writeToFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FileUtils* cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_writeToFile : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAValueMap arg0;
        std::string arg1;
        ok &= jsval_to_cavaluemap(cx, args.get(0), &arg0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FileUtils_writeToFile : Error processing arguments");
        bool ret = cobj->writeToFile(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FileUtils_writeToFile : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_FileUtils_getValueMapFromFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FileUtils* cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_getValueMapFromFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FileUtils_getValueMapFromFile : Error processing arguments");
        CrossApp::CAValueMap ret = cobj->getValueMapFromFile(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = cavaluemap_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FileUtils_getValueMapFromFile : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_FileUtils_getFileString(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FileUtils* cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_getFileString : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FileUtils_getFileString : Error processing arguments");
        std::string ret = cobj->getFileString(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FileUtils_getFileString : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_FileUtils_getFileSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FileUtils* cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_getFileSize : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FileUtils_getFileSize : Error processing arguments");
        long ret = cobj->getFileSize(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = long_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FileUtils_getFileSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_FileUtils_writeStringToFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FileUtils* cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_writeStringToFile : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        std::string arg1;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FileUtils_writeStringToFile : Error processing arguments");
        bool ret = cobj->writeStringToFile(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FileUtils_writeStringToFile : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_FileUtils_addSearchPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FileUtils* cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_addSearchPath : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FileUtils_addSearchPath : Error processing arguments");
        cobj->addSearchPath(arg0);
        args.rval().setUndefined();
        return true;
    }
    if (argc == 2) {
        std::string arg0;
        bool arg1;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FileUtils_addSearchPath : Error processing arguments");
        cobj->addSearchPath(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FileUtils_addSearchPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_FileUtils_isFileExist(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FileUtils* cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_isFileExist : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FileUtils_isFileExist : Error processing arguments");
        bool ret = cobj->isFileExist(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FileUtils_isFileExist : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_FileUtils_fullPathForFilename(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FileUtils* cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_fullPathForFilename : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FileUtils_fullPathForFilename : Error processing arguments");
        std::string ret = cobj->fullPathForFilename(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FileUtils_fullPathForFilename : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_FileUtils_fullPathFromRelativeFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FileUtils* cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_fullPathFromRelativeFile : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        std::string arg1;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FileUtils_fullPathFromRelativeFile : Error processing arguments");
        std::string ret = cobj->fullPathFromRelativeFile(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FileUtils_fullPathFromRelativeFile : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_FileUtils_getFileExtension(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FileUtils* cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_getFileExtension : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FileUtils_getFileExtension : Error processing arguments");
        std::string ret = cobj->getFileExtension(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FileUtils_getFileExtension : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_FileUtils_setPopupNotify(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FileUtils* cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_setPopupNotify : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FileUtils_setPopupNotify : Error processing arguments");
        cobj->setPopupNotify(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FileUtils_setPopupNotify : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_FileUtils_isDirectoryExist(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FileUtils* cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_isDirectoryExist : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FileUtils_isDirectoryExist : Error processing arguments");
        bool ret = cobj->isDirectoryExist(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FileUtils_isDirectoryExist : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_FileUtils_setDefaultResourceRootPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FileUtils* cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_setDefaultResourceRootPath : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FileUtils_setDefaultResourceRootPath : Error processing arguments");
        cobj->setDefaultResourceRootPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FileUtils_setDefaultResourceRootPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_FileUtils_createDirectory(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FileUtils* cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_createDirectory : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FileUtils_createDirectory : Error processing arguments");
        bool ret = cobj->createDirectory(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FileUtils_createDirectory : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_FileUtils_loadFilenameLookupDictionaryFromFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FileUtils* cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_loadFilenameLookupDictionaryFromFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FileUtils_loadFilenameLookupDictionaryFromFile : Error processing arguments");
        cobj->loadFilenameLookupDictionaryFromFile(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FileUtils_loadFilenameLookupDictionaryFromFile : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_FileUtils_getWritablePath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FileUtils* cobj = (CrossApp::FileUtils *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FileUtils_getWritablePath : Invalid Native Object");
    if (argc == 0) {
        std::string ret = cobj->getWritablePath();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FileUtils_getWritablePath : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_FileUtils_destroyInstance(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::FileUtils::destroyInstance();
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_FileUtils_destroyInstance : wrong number of arguments");
    return false;
}
bool js_crossapp_FileUtils_setDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::FileUtils* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::FileUtils*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FileUtils_setDelegate : Error processing arguments");
        CrossApp::FileUtils::setDelegate(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_FileUtils_setDelegate : wrong number of arguments");
    return false;
}
bool js_crossapp_FileUtils_getInstance(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::FileUtils* ret = CrossApp::FileUtils::getInstance();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::FileUtils>(cx, (CrossApp::FileUtils*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_FileUtils_getInstance : wrong number of arguments");
    return false;
}

void js_CrossApp_FileUtils_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (FileUtils)", obj);
}
void js_register_crossapp_FileUtils(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_FileUtils_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_FileUtils_class->name = "FileUtils";
    jsb_CrossApp_FileUtils_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_FileUtils_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_FileUtils_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_FileUtils_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_FileUtils_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_FileUtils_class->resolve = JS_ResolveStub;
    jsb_CrossApp_FileUtils_class->convert = JS_ConvertStub;
    jsb_CrossApp_FileUtils_class->finalize = js_CrossApp_FileUtils_finalize;
    jsb_CrossApp_FileUtils_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("writeDataToFile", js_crossapp_FileUtils_writeDataToFile, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeFile", js_crossapp_FileUtils_removeFile, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDataFromFile", js_crossapp_FileUtils_getDataFromFile, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("purgeCachedEntries", js_crossapp_FileUtils_purgeCachedEntries, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAbsolutePath", js_crossapp_FileUtils_isAbsolutePath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("renameFile", js_crossapp_FileUtils_renameFile, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDefaultResourceRootPath", js_crossapp_FileUtils_getDefaultResourceRootPath, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isPopupNotify", js_crossapp_FileUtils_isPopupNotify, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeDirectory", js_crossapp_FileUtils_removeDirectory, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("writeToFile", js_crossapp_FileUtils_writeToFile, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getValueMapFromFile", js_crossapp_FileUtils_getValueMapFromFile, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFileString", js_crossapp_FileUtils_getFileString, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFileSize", js_crossapp_FileUtils_getFileSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("writeStringToFile", js_crossapp_FileUtils_writeStringToFile, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addSearchPath", js_crossapp_FileUtils_addSearchPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isFileExist", js_crossapp_FileUtils_isFileExist, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("fullPathForFilename", js_crossapp_FileUtils_fullPathForFilename, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("fullPathFromRelativeFile", js_crossapp_FileUtils_fullPathFromRelativeFile, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFileExtension", js_crossapp_FileUtils_getFileExtension, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPopupNotify", js_crossapp_FileUtils_setPopupNotify, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isDirectoryExist", js_crossapp_FileUtils_isDirectoryExist, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDefaultResourceRootPath", js_crossapp_FileUtils_setDefaultResourceRootPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createDirectory", js_crossapp_FileUtils_createDirectory, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("loadFilenameLookupDictionaryFromFile", js_crossapp_FileUtils_loadFilenameLookupDictionaryFromFile, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getWritablePath", js_crossapp_FileUtils_getWritablePath, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("destroyInstance", js_crossapp_FileUtils_destroyInstance, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDelegate", js_crossapp_FileUtils_setDelegate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getInstance", js_crossapp_FileUtils_getInstance, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_FileUtils_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_FileUtils_class,
        dummy_constructor<CrossApp::FileUtils>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "FileUtils", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::FileUtils> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_FileUtils_class;
        p->proto = jsb_CrossApp_FileUtils_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAWebView_class;
JSObject *jsb_CrossApp_CAWebView_prototype;

bool js_crossapp_CAWebView_onFinishLoading(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_onFinishLoading : Invalid Native Object");
    if (argc == 1) {
        std::function<void (const std::basic_string<char> &)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](const std::basic_string<char> & larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = std_string_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWebView_onFinishLoading : Error processing arguments");
        cobj->onFinishLoading(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_onFinishLoading : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWebView_draw(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_draw : Invalid Native Object");
    if (argc == 3) {
        CrossApp::Renderer* arg0 = nullptr;
        CrossApp::Mat4 arg1;
        uint32_t arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::Renderer*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_matrix(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWebView_draw : Error processing arguments");
        cobj->draw(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_draw : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_crossapp_CAWebView_onStartLoading(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_onStartLoading : Invalid Native Object");
    if (argc == 1) {
        std::function<bool (const std::basic_string<char> &)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](const std::basic_string<char> & larg0) -> bool {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = std_string_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            bool ret;
		            ret = JS::ToBoolean(rval);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWebView_onStartLoading : Error processing arguments");
        cobj->onStartLoading(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_onStartLoading : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWebView_canGoBack(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_canGoBack : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->canGoBack();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_canGoBack : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWebView_loadHTMLString(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_loadHTMLString : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        std::string arg1;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWebView_loadHTMLString : Error processing arguments");
        cobj->loadHTMLString(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_loadHTMLString : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAWebView_onJSCallback(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_onJSCallback : Invalid Native Object");
    if (argc == 1) {
        std::function<void (const std::basic_string<char> &)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](const std::basic_string<char> & larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = std_string_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWebView_onJSCallback : Error processing arguments");
        cobj->onJSCallback(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_onJSCallback : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWebView_goForward(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_goForward : Invalid Native Object");
    if (argc == 0) {
        cobj->goForward();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_goForward : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWebView_goBack(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_goBack : Invalid Native Object");
    if (argc == 0) {
        cobj->goBack();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_goBack : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWebView_setScalesPageToFit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_setScalesPageToFit : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWebView_setScalesPageToFit : Error processing arguments");
        cobj->setScalesPageToFit(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_setScalesPageToFit : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWebView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWebView_showNativeWeb(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_showNativeWeb : Invalid Native Object");
    if (argc == 0) {
        cobj->showNativeWeb();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_showNativeWeb : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWebView_loadFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_loadFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWebView_loadFile : Error processing arguments");
        cobj->loadFile(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_loadFile : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWebView_loadURL(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_loadURL : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWebView_loadURL : Error processing arguments");
        cobj->loadURL(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_loadURL : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWebView_evaluateJS(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_evaluateJS : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWebView_evaluateJS : Error processing arguments");
        std::string ret = cobj->evaluateJS(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_evaluateJS : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWebView_showLoadingActivity(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_showLoadingActivity : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWebView_showLoadingActivity : Error processing arguments");
        cobj->showLoadingActivity(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_showLoadingActivity : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWebView_onFailLoading(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_onFailLoading : Invalid Native Object");
    if (argc == 1) {
        std::function<void (const std::basic_string<char> &)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](const std::basic_string<char> & larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = std_string_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWebView_onFailLoading : Error processing arguments");
        cobj->onFailLoading(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_onFailLoading : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWebView_update(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_update : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWebView_update : Error processing arguments");
        cobj->update(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_update : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWebView_setActivityView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_setActivityView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAActivityIndicatorView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAActivityIndicatorView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWebView_setActivityView : Error processing arguments");
        cobj->setActivityView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_setActivityView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWebView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWebView_stopLoading(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_stopLoading : Invalid Native Object");
    if (argc == 0) {
        cobj->stopLoading();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_stopLoading : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWebView_reload(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_reload : Invalid Native Object");
    if (argc == 0) {
        cobj->reload();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_reload : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWebView_getHTMLSource(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_getHTMLSource : Invalid Native Object");
    if (argc == 0) {
        std::string ret = cobj->getHTMLSource();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_getHTMLSource : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWebView_canGoForward(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_canGoForward : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->canGoForward();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_canGoForward : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWebView_setJavascriptInterfaceScheme(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_setJavascriptInterfaceScheme : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWebView_setJavascriptInterfaceScheme : Error processing arguments");
        cobj->setJavascriptInterfaceScheme(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_setJavascriptInterfaceScheme : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWebView_setVisible(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_setVisible : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWebView_setVisible : Error processing arguments");
        cobj->setVisible(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_setVisible : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAWebView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWebView_hideNativeWebAndShowImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAWebView_hideNativeWebAndShowImage : Invalid Native Object");
    if (argc == 0) {
        cobj->hideNativeWebAndShowImage();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAWebView_hideNativeWebAndShowImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAWebView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWebView_createWithFrame : Error processing arguments");
        CrossApp::CAWebView* ret = CrossApp::CAWebView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWebView>(cx, (CrossApp::CAWebView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAWebView_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CAWebView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWebView_createWithLayout : Error processing arguments");
        CrossApp::CAWebView* ret = CrossApp::CAWebView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWebView>(cx, (CrossApp::CAWebView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAWebView_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CAWebView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAWebView_createWithCenter : Error processing arguments");
        CrossApp::CAWebView* ret = CrossApp::CAWebView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWebView>(cx, (CrossApp::CAWebView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAWebView_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CAWebView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAWebView* cobj = new (std::nothrow) CrossApp::CAWebView();
    TypeTest<CrossApp::CAWebView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAWebView");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAWebView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAWebView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAWebView *nobj = static_cast<CrossApp::CAWebView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAWebView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAWebView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAWebView_class->name = "CAWebView";
    jsb_CrossApp_CAWebView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAWebView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAWebView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAWebView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAWebView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAWebView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAWebView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAWebView_class->finalize = js_CrossApp_CAWebView_finalize;
    jsb_CrossApp_CAWebView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("onFinishLoading", js_crossapp_CAWebView_onFinishLoading, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("draw", js_crossapp_CAWebView_draw, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onStartLoading", js_crossapp_CAWebView_onStartLoading, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("canGoBack", js_crossapp_CAWebView_canGoBack, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("loadHTMLString", js_crossapp_CAWebView_loadHTMLString, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onJSCallback", js_crossapp_CAWebView_onJSCallback, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("goForward", js_crossapp_CAWebView_goForward, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("goBack", js_crossapp_CAWebView_goBack, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setScalesPageToFit", js_crossapp_CAWebView_setScalesPageToFit, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CAWebView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("showNativeWeb", js_crossapp_CAWebView_showNativeWeb, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("loadFile", js_crossapp_CAWebView_loadFile, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("loadURL", js_crossapp_CAWebView_loadURL, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("evaluateJS", js_crossapp_CAWebView_evaluateJS, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("showLoadingActivity", js_crossapp_CAWebView_showLoadingActivity, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onFailLoading", js_crossapp_CAWebView_onFailLoading, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("update", js_crossapp_CAWebView_update, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setActivityView", js_crossapp_CAWebView_setActivityView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_crossapp_CAWebView_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("stopLoading", js_crossapp_CAWebView_stopLoading, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reload", js_crossapp_CAWebView_reload, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getHTMLSource", js_crossapp_CAWebView_getHTMLSource, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("canGoForward", js_crossapp_CAWebView_canGoForward, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setJavascriptInterfaceScheme", js_crossapp_CAWebView_setJavascriptInterfaceScheme, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setVisible", js_crossapp_CAWebView_setVisible, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_crossapp_CAWebView_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("hideNativeWebAndShowImage", js_crossapp_CAWebView_hideNativeWebAndShowImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_crossapp_CAWebView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CAWebView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CAWebView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAWebView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAWebView_class,
        js_crossapp_CAWebView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAWebView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAWebView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAWebView_class;
        p->proto = jsb_CrossApp_CAWebView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAClippingView_class;
JSObject *jsb_CrossApp_CAClippingView_prototype;

bool js_crossapp_CAClippingView_isClippingEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAClippingView_isClippingEnabled : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isClippingEnabled();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAClippingView_isClippingEnabled : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAClippingView_onEnter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAClippingView_onEnter : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnter();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAClippingView_onEnter : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAClippingView_onExit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAClippingView_onExit : Invalid Native Object");
    if (argc == 0) {
        cobj->onExit();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAClippingView_onExit : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAClippingView_setInverted(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAClippingView_setInverted : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAClippingView_setInverted : Error processing arguments");
        cobj->setInverted(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAClippingView_setInverted : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAClippingView_visit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAClippingView_visit : Invalid Native Object");
    if (argc == 3) {
        CrossApp::Renderer* arg0 = nullptr;
        CrossApp::Mat4 arg1;
        uint32_t arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::Renderer*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_matrix(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAClippingView_visit : Error processing arguments");
        cobj->visit(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAClippingView_visit : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_crossapp_CAClippingView_setStencil(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAClippingView_setStencil : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAClippingView_setStencil : Error processing arguments");
        cobj->setStencil(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAClippingView_setStencil : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAClippingView_getAlphaThreshold(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAClippingView_getAlphaThreshold : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getAlphaThreshold();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAClippingView_getAlphaThreshold : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAClippingView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CAClippingView* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAClippingView_init : Invalid Native Object");
    do {
        if (argc == 1) {
            CrossApp::CAView* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            bool ret = cobj->init(arg0);
            jsval jsret = JSVAL_NULL;
            jsret = BOOLEAN_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 0) {
            bool ret = cobj->init();
            jsval jsret = JSVAL_NULL;
            jsret = BOOLEAN_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CAClippingView_init : wrong number of arguments");
    return false;
}
bool js_crossapp_CAClippingView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAClippingView_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAClippingView_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAClippingView_getStencil(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAClippingView_getStencil : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getStencil();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAClippingView_getStencil : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAClippingView_setClippingEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAClippingView_setClippingEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAClippingView_setClippingEnabled : Error processing arguments");
        cobj->setClippingEnabled(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAClippingView_setClippingEnabled : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAClippingView_setAlphaThreshold(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAClippingView_setAlphaThreshold : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAClippingView_setAlphaThreshold : Error processing arguments");
        cobj->setAlphaThreshold(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAClippingView_setAlphaThreshold : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAClippingView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAClippingView_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAClippingView_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAClippingView_isInverted(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAClippingView_isInverted : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isInverted();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAClippingView_isInverted : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAClippingView_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 1) {
            CrossApp::CAView* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::CAClippingView* ret = CrossApp::CAClippingView::create(arg0);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAClippingView>(cx, (CrossApp::CAClippingView*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 0) {
            CrossApp::CAClippingView* ret = CrossApp::CAClippingView::create();
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAClippingView>(cx, (CrossApp::CAClippingView*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_crossapp_CAClippingView_create : wrong number of arguments");
    return false;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAClippingView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAClippingView)", obj);
}
void js_register_crossapp_CAClippingView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAClippingView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAClippingView_class->name = "CAClippingView";
    jsb_CrossApp_CAClippingView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAClippingView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAClippingView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAClippingView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAClippingView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAClippingView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAClippingView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAClippingView_class->finalize = js_CrossApp_CAClippingView_finalize;
    jsb_CrossApp_CAClippingView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("isClippingEnabled", js_crossapp_CAClippingView_isClippingEnabled, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnter", js_crossapp_CAClippingView_onEnter, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExit", js_crossapp_CAClippingView_onExit, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setInverted", js_crossapp_CAClippingView_setInverted, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("visit", js_crossapp_CAClippingView_visit, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setStencil", js_crossapp_CAClippingView_setStencil, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAlphaThreshold", js_crossapp_CAClippingView_getAlphaThreshold, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CAClippingView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_crossapp_CAClippingView_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getStencil", js_crossapp_CAClippingView_getStencil, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setClippingEnabled", js_crossapp_CAClippingView_setClippingEnabled, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlphaThreshold", js_crossapp_CAClippingView_setAlphaThreshold, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_crossapp_CAClippingView_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isInverted", js_crossapp_CAClippingView_isInverted, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CAClippingView_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAClippingView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAClippingView_class,
        dummy_constructor<CrossApp::CAClippingView>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAClippingView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAClippingView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAClippingView_class;
        p->proto = jsb_CrossApp_CAClippingView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAAlertView_class;
JSObject *jsb_CrossApp_CAAlertView_prototype;

bool js_crossapp_CAAlertView_show(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CAAlertView* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CAAlertView *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAlertView_show : Invalid Native Object");
    do {
        if (argc == 1) {
            std::function<void (int)> arg0;
            do {
			    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
			    {
			        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
			        auto lambda = [=, &ok](int larg0) -> void {
			            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
			            jsval largv[1];
			            largv[0] = int32_to_jsval(cx, larg0);
			            JS::RootedValue rval(cx);
			            bool succeed = func->invoke(1, &largv[0], &rval);
			            if (!succeed && JS_IsExceptionPending(cx)) {
			                JS_ReportPendingException(cx);
			            }
			        };
			        arg0 = lambda;
			    }
			    else
			    {
			        arg0 = nullptr;
			    }
			} while(0)
			;
            if (!ok) { ok = true; break; }
            cobj->show(arg0);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 0) {
            cobj->show();
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CAAlertView_show : wrong number of arguments");
    return false;
}
bool js_crossapp_CAAlertView_setButtonTitles(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAlertView* cobj = (CrossApp::CAAlertView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAlertView_setButtonTitles : Invalid Native Object");
    if (argc == 1) {
        std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > arg0;
        ok &= jsval_to_std_vector_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAlertView_setButtonTitles : Error processing arguments");
        cobj->setButtonTitles(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAlertView_setButtonTitles : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAlertView_addButtonTitle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAlertView* cobj = (CrossApp::CAAlertView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAlertView_addButtonTitle : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAlertView_addButtonTitle : Error processing arguments");
        cobj->addButtonTitle(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAlertView_addButtonTitle : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAlertView_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 3) {
            std::string arg0;
            ok &= jsval_to_std_string(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= jsval_to_std_string(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > arg2;
            ok &= jsval_to_std_vector_string(cx, args.get(2), &arg2);
            if (!ok) { ok = true; break; }
            CrossApp::CAAlertView* ret = CrossApp::CAAlertView::create(arg0, arg1, arg2);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAAlertView>(cx, (CrossApp::CAAlertView*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 2) {
            std::string arg0;
            ok &= jsval_to_std_string(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= jsval_to_std_string(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAAlertView* ret = CrossApp::CAAlertView::create(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAAlertView>(cx, (CrossApp::CAAlertView*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_crossapp_CAAlertView_create : wrong number of arguments");
    return false;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAAlertView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAAlertView)", obj);
}
void js_register_crossapp_CAAlertView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAAlertView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAAlertView_class->name = "CAAlertView";
    jsb_CrossApp_CAAlertView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAAlertView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAAlertView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAAlertView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAAlertView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAAlertView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAAlertView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAAlertView_class->finalize = js_CrossApp_CAAlertView_finalize;
    jsb_CrossApp_CAAlertView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("show", js_crossapp_CAAlertView_show, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setButtonTitles", js_crossapp_CAAlertView_setButtonTitles, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addButtonTitle", js_crossapp_CAAlertView_addButtonTitle, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CAAlertView_create, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAAlertView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAAlertView_class,
        dummy_constructor<CrossApp::CAAlertView>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAAlertView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAAlertView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAAlertView_class;
        p->proto = jsb_CrossApp_CAAlertView_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAAVPlayer_class;
JSObject *jsb_CrossApp_CAAVPlayer_prototype;

bool js_crossapp_CAAVPlayer_onPlayBufferLoadingState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAVPlayer* cobj = (CrossApp::CAAVPlayer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAVPlayer_onPlayBufferLoadingState : Invalid Native Object");
    if (argc == 1) {
        std::function<void (const std::basic_string<char> &)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](const std::basic_string<char> & larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = std_string_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAVPlayer_onPlayBufferLoadingState : Error processing arguments");
        cobj->onPlayBufferLoadingState(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAVPlayer_onPlayBufferLoadingState : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAVPlayer_onDidPlayToEndTime(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAVPlayer* cobj = (CrossApp::CAAVPlayer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAVPlayer_onDidPlayToEndTime : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAVPlayer_onDidPlayToEndTime : Error processing arguments");
        cobj->onDidPlayToEndTime(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAVPlayer_onDidPlayToEndTime : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAVPlayer_play(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAVPlayer* cobj = (CrossApp::CAAVPlayer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAVPlayer_play : Invalid Native Object");
    if (argc == 0) {
        cobj->play();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAVPlayer_play : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAVPlayer_pause(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAVPlayer* cobj = (CrossApp::CAAVPlayer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAVPlayer_pause : Invalid Native Object");
    if (argc == 0) {
        cobj->pause();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAVPlayer_pause : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAVPlayer_initWithFilePath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAVPlayer* cobj = (CrossApp::CAAVPlayer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAVPlayer_initWithFilePath : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAVPlayer_initWithFilePath : Error processing arguments");
        bool ret = cobj->initWithFilePath(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAVPlayer_initWithFilePath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAVPlayer_onTimeJumped(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAVPlayer* cobj = (CrossApp::CAAVPlayer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAVPlayer_onTimeJumped : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAVPlayer_onTimeJumped : Error processing arguments");
        cobj->onTimeJumped(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAVPlayer_onTimeJumped : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAVPlayer_getPresentationSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAVPlayer* cobj = (CrossApp::CAAVPlayer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAVPlayer_getPresentationSize : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DSize& ret = cobj->getPresentationSize();
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAVPlayer_getPresentationSize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAVPlayer_getDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAVPlayer* cobj = (CrossApp::CAAVPlayer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAVPlayer_getDuration : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getDuration();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAVPlayer_getDuration : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAVPlayer_stop(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAVPlayer* cobj = (CrossApp::CAAVPlayer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAVPlayer_stop : Invalid Native Object");
    if (argc == 0) {
        cobj->stop();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAVPlayer_stop : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAVPlayer_setCurrentTime(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAVPlayer* cobj = (CrossApp::CAAVPlayer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAVPlayer_setCurrentTime : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAVPlayer_setCurrentTime : Error processing arguments");
        cobj->setCurrentTime(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAVPlayer_setCurrentTime : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAVPlayer_getCurrentTime(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAVPlayer* cobj = (CrossApp::CAAVPlayer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAVPlayer_getCurrentTime : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getCurrentTime();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAVPlayer_getCurrentTime : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAVPlayer_onPlayState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAVPlayer* cobj = (CrossApp::CAAVPlayer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAVPlayer_onPlayState : Invalid Native Object");
    if (argc == 1) {
        std::function<void (const std::basic_string<char> &)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](const std::basic_string<char> & larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = std_string_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAVPlayer_onPlayState : Error processing arguments");
        cobj->onPlayState(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAVPlayer_onPlayState : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAVPlayer_onLoadedTime(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAVPlayer* cobj = (CrossApp::CAAVPlayer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAVPlayer_onLoadedTime : Invalid Native Object");
    if (argc == 1) {
        std::function<void (float, float)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](float larg0, float larg1) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            largv[0] = DOUBLE_TO_JSVAL(larg0);
		            largv[1] = DOUBLE_TO_JSVAL(larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAVPlayer_onLoadedTime : Error processing arguments");
        cobj->onLoadedTime(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAVPlayer_onLoadedTime : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAVPlayer_initWithUrl(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAVPlayer* cobj = (CrossApp::CAAVPlayer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAVPlayer_initWithUrl : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAVPlayer_initWithUrl : Error processing arguments");
        bool ret = cobj->initWithUrl(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAVPlayer_initWithUrl : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAVPlayer_onPeriodicTime(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAVPlayer* cobj = (CrossApp::CAAVPlayer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAVPlayer_onPeriodicTime : Invalid Native Object");
    if (argc == 1) {
        std::function<void (float, float)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](float larg0, float larg1) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            largv[0] = DOUBLE_TO_JSVAL(larg0);
		            largv[1] = DOUBLE_TO_JSVAL(larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAVPlayer_onPeriodicTime : Error processing arguments");
        cobj->onPeriodicTime(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAVPlayer_onPeriodicTime : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAVPlayer_createWithFilePath(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAVPlayer_createWithFilePath : Error processing arguments");
        CrossApp::CAAVPlayer* ret = CrossApp::CAAVPlayer::createWithFilePath(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAAVPlayer>(cx, (CrossApp::CAAVPlayer*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAAVPlayer_createWithFilePath : wrong number of arguments");
    return false;
}
bool js_crossapp_CAAVPlayer_createWithUrl(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAVPlayer_createWithUrl : Error processing arguments");
        CrossApp::CAAVPlayer* ret = CrossApp::CAAVPlayer::createWithUrl(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAAVPlayer>(cx, (CrossApp::CAAVPlayer*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAAVPlayer_createWithUrl : wrong number of arguments");
    return false;
}
bool js_crossapp_CAAVPlayer_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAAVPlayer* cobj = new (std::nothrow) CrossApp::CAAVPlayer();
    TypeTest<CrossApp::CAAVPlayer> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAAVPlayer");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAAVPlayer_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAAVPlayer)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAAVPlayer *nobj = static_cast<CrossApp::CAAVPlayer *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAAVPlayer(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAAVPlayer_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAAVPlayer_class->name = "CAAVPlayer";
    jsb_CrossApp_CAAVPlayer_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAAVPlayer_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAAVPlayer_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAAVPlayer_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAAVPlayer_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAAVPlayer_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAAVPlayer_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAAVPlayer_class->finalize = js_CrossApp_CAAVPlayer_finalize;
    jsb_CrossApp_CAAVPlayer_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("onPlayBufferLoadingState", js_crossapp_CAAVPlayer_onPlayBufferLoadingState, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDidPlayToEndTime", js_crossapp_CAAVPlayer_onDidPlayToEndTime, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("play", js_crossapp_CAAVPlayer_play, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("pause", js_crossapp_CAAVPlayer_pause, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithFilePath", js_crossapp_CAAVPlayer_initWithFilePath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onTimeJumped", js_crossapp_CAAVPlayer_onTimeJumped, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPresentationSize", js_crossapp_CAAVPlayer_getPresentationSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDuration", js_crossapp_CAAVPlayer_getDuration, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("stop", js_crossapp_CAAVPlayer_stop, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCurrentTime", js_crossapp_CAAVPlayer_setCurrentTime, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCurrentTime", js_crossapp_CAAVPlayer_getCurrentTime, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onPlayState", js_crossapp_CAAVPlayer_onPlayState, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onLoadedTime", js_crossapp_CAAVPlayer_onLoadedTime, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithUrl", js_crossapp_CAAVPlayer_initWithUrl, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onPeriodicTime", js_crossapp_CAAVPlayer_onPeriodicTime, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFilePath", js_crossapp_CAAVPlayer_createWithFilePath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithUrl", js_crossapp_CAAVPlayer_createWithUrl, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAAVPlayer_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAAVPlayer_class,
        js_crossapp_CAAVPlayer_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAAVPlayer", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAAVPlayer> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAAVPlayer_class;
        p->proto = jsb_CrossApp_CAAVPlayer_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAAVPlayerView_class;
JSObject *jsb_CrossApp_CAAVPlayerView_prototype;

bool js_crossapp_CAAVPlayerView_getPlayer(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAVPlayerView* cobj = (CrossApp::CAAVPlayerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAVPlayerView_getPlayer : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAAVPlayer* ret = cobj->getPlayer();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAAVPlayer>(cx, (CrossApp::CAAVPlayer*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAVPlayerView_getPlayer : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAAVPlayerView_setPlayer(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAVPlayerView* cobj = (CrossApp::CAAVPlayerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAAVPlayerView_setPlayer : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAAVPlayer* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAAVPlayer*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAVPlayerView_setPlayer : Error processing arguments");
        cobj->setPlayer(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAAVPlayerView_setPlayer : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAAVPlayerView_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAAVPlayerView* ret = CrossApp::CAAVPlayerView::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAAVPlayerView>(cx, (CrossApp::CAAVPlayerView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAAVPlayerView_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CAAVPlayerView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAVPlayerView_createWithFrame : Error processing arguments");
        CrossApp::CAAVPlayerView* ret = CrossApp::CAAVPlayerView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAAVPlayerView>(cx, (CrossApp::CAAVPlayerView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAAVPlayerView_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CAAVPlayerView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAVPlayerView_createWithLayout : Error processing arguments");
        CrossApp::CAAVPlayerView* ret = CrossApp::CAAVPlayerView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAAVPlayerView>(cx, (CrossApp::CAAVPlayerView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAAVPlayerView_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CAAVPlayerView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAAVPlayerView_createWithCenter : Error processing arguments");
        CrossApp::CAAVPlayerView* ret = CrossApp::CAAVPlayerView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAAVPlayerView>(cx, (CrossApp::CAAVPlayerView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAAVPlayerView_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CAAVPlayerView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAAVPlayerView* cobj = new (std::nothrow) CrossApp::CAAVPlayerView();
    TypeTest<CrossApp::CAAVPlayerView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAAVPlayerView");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAAVPlayerView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAAVPlayerView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAAVPlayerView *nobj = static_cast<CrossApp::CAAVPlayerView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAAVPlayerView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAAVPlayerView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAAVPlayerView_class->name = "CAAVPlayerView";
    jsb_CrossApp_CAAVPlayerView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAAVPlayerView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAAVPlayerView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAAVPlayerView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAAVPlayerView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAAVPlayerView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAAVPlayerView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAAVPlayerView_class->finalize = js_CrossApp_CAAVPlayerView_finalize;
    jsb_CrossApp_CAAVPlayerView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getPlayer", js_crossapp_CAAVPlayerView_getPlayer, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPlayer", js_crossapp_CAAVPlayerView_setPlayer, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CAAVPlayerView_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_crossapp_CAAVPlayerView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CAAVPlayerView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CAAVPlayerView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAAVPlayerView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAAVPlayerView_class,
        js_crossapp_CAAVPlayerView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAAVPlayerView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAAVPlayerView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAAVPlayerView_class;
        p->proto = jsb_CrossApp_CAAVPlayerView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAPickerView_class;
JSObject *jsb_CrossApp_CAPickerView_prototype;

bool js_crossapp_CAPickerView_setFontSizeNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_setFontSizeNormal : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPickerView_setFontSizeNormal : Error processing arguments");
        cobj->setFontSizeNormal(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_setFontSizeNormal : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPickerView_onHeightForComponent(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_onHeightForComponent : Invalid Native Object");
    if (argc == 1) {
        std::function<unsigned int (unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0) -> unsigned int {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            uint32_t ret;
		            ok &= jsval_to_uint32(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPickerView_onHeightForComponent : Error processing arguments");
        cobj->onHeightForComponent(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_onHeightForComponent : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPickerView_onViewForRow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_onViewForRow : Invalid Native Object");
    if (argc == 1) {
        std::function<CrossApp::CAView *(unsigned int, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0, unsigned int larg1) -> CAView* {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            CrossApp::CAView* ret;
		            do {
		            if (rval.isNull()) { ret = nullptr; break; }
		            if (!rval.isObject()) { ok = false; break; }
		            js_proxy_t *jsProxy;
		            JSObject *tmpObj = rval.toObjectOrNull();
		            jsProxy = jsb_get_js_proxy(tmpObj);
		            ret = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
		            JSB_PRECONDITION2( ret, cx, 0, "Invalid Native Object");
		        } while (0);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPickerView_onViewForRow : Error processing arguments");
        cobj->onViewForRow(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_onViewForRow : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPickerView_getFontSizeNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_getFontSizeNormal : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getFontSizeNormal();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_getFontSizeNormal : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPickerView_reloadAllComponents(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_reloadAllComponents : Invalid Native Object");
    if (argc == 0) {
        cobj->reloadAllComponents();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_reloadAllComponents : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPickerView_onWidthForComponent(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_onWidthForComponent : Invalid Native Object");
    if (argc == 1) {
        std::function<unsigned int (unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0) -> unsigned int {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            uint32_t ret;
		            ok &= jsval_to_uint32(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPickerView_onWidthForComponent : Error processing arguments");
        cobj->onWidthForComponent(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_onWidthForComponent : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPickerView_onNumberOfComponents(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_onNumberOfComponents : Invalid Native Object");
    if (argc == 1) {
        std::function<unsigned int ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> unsigned int {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            uint32_t ret;
		            ok &= jsval_to_uint32(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPickerView_onNumberOfComponents : Error processing arguments");
        cobj->onNumberOfComponents(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_onNumberOfComponents : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPickerView_getFontSizeSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_getFontSizeSelected : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getFontSizeSelected();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_getFontSizeSelected : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPickerView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPickerView_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_setBackgroundImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPickerView_setBackgroundImage : Error processing arguments");
        cobj->setBackgroundImage(arg0);
        args.rval().setUndefined();
        return true;
    }
    if (argc == 2) {
        CrossApp::CAImage* arg0 = nullptr;
        bool arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPickerView_setBackgroundImage : Error processing arguments");
        cobj->setBackgroundImage(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_setBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPickerView_onNumberOfRowsInComponent(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_onNumberOfRowsInComponent : Invalid Native Object");
    if (argc == 1) {
        std::function<unsigned int (unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0) -> unsigned int {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            uint32_t ret;
		            ok &= jsval_to_uint32(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPickerView_onNumberOfRowsInComponent : Error processing arguments");
        cobj->onNumberOfRowsInComponent(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_onNumberOfRowsInComponent : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPickerView_getFontColorSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_getFontColorSelected : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getFontColorSelected();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_getFontColorSelected : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPickerView_visitEve(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_visitEve : Invalid Native Object");
    if (argc == 0) {
        cobj->visitEve();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_visitEve : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPickerView_getFontColorNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_getFontColorNormal : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getFontColorNormal();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_getFontColorNormal : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPickerView_setFontColorNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_setFontColorNormal : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPickerView_setFontColorNormal : Error processing arguments");
        cobj->setFontColorNormal(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_setFontColorNormal : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPickerView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPickerView_getSeparateColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_getSeparateColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getSeparateColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_getSeparateColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPickerView_selectRow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_selectRow : Invalid Native Object");
    if (argc == 2) {
        uint32_t arg0 = 0;
        uint32_t arg1 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPickerView_selectRow : Error processing arguments");
        cobj->selectRow(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }
    if (argc == 3) {
        uint32_t arg0 = 0;
        uint32_t arg1 = 0;
        bool arg2;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        arg2 = JS::ToBoolean(args.get(2));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPickerView_selectRow : Error processing arguments");
        cobj->selectRow(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_selectRow : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAPickerView_reloadComponent(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_reloadComponent : Invalid Native Object");
    if (argc == 2) {
        uint32_t arg0 = 0;
        uint32_t arg1 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPickerView_reloadComponent : Error processing arguments");
        cobj->reloadComponent(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }
    if (argc == 3) {
        uint32_t arg0 = 0;
        uint32_t arg1 = 0;
        bool arg2;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        arg2 = JS::ToBoolean(args.get(2));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPickerView_reloadComponent : Error processing arguments");
        cobj->reloadComponent(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_reloadComponent : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAPickerView_setFontColorSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_setFontColorSelected : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPickerView_setFontColorSelected : Error processing arguments");
        cobj->setFontColorSelected(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_setFontColorSelected : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPickerView_selectedRowInComponent(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_selectedRowInComponent : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPickerView_selectedRowInComponent : Error processing arguments");
        int ret = cobj->selectedRowInComponent(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_selectedRowInComponent : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPickerView_setSeparateColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_setSeparateColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPickerView_setSeparateColor : Error processing arguments");
        cobj->setSeparateColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_setSeparateColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPickerView_onTitleForRow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_onTitleForRow : Invalid Native Object");
    if (argc == 1) {
        std::function<std::basic_string<char> (unsigned int, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
                auto lambda = [=, &ok](unsigned int larg0, unsigned int larg1) -> std::basic_string<char> {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            std::string ret;
		            ok &= jsval_to_std_string(cx, rval, &ret);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPickerView_onTitleForRow : Error processing arguments");
        cobj->onTitleForRow(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_onTitleForRow : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPickerView_onDidSelectRow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_onDidSelectRow : Invalid Native Object");
    if (argc == 1) {
        std::function<void (unsigned int, unsigned int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0, unsigned int larg1) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            largv[1] = uint32_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPickerView_onDidSelectRow : Error processing arguments");
        cobj->onDidSelectRow(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_onDidSelectRow : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPickerView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAPickerView_setFontSizeSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_setFontSizeSelected : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPickerView_setFontSizeSelected : Error processing arguments");
        cobj->setFontSizeSelected(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_setFontSizeSelected : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPickerView_onViewForSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAPickerView_onViewForSelected : Invalid Native Object");
    if (argc == 1) {
        std::function<CrossApp::CAView *(unsigned int, CrossApp::DSize)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](unsigned int larg0, CrossApp::DSize larg1) -> CAView* {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            largv[0] = uint32_to_jsval(cx, larg0);
		            largv[1] = dsize_to_jsval(cx, larg1);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            CrossApp::CAView* ret;
		            do {
		            if (rval.isNull()) { ret = nullptr; break; }
		            if (!rval.isObject()) { ok = false; break; }
		            js_proxy_t *jsProxy;
		            JSObject *tmpObj = rval.toObjectOrNull();
		            jsProxy = jsb_get_js_proxy(tmpObj);
		            ret = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
		            JSB_PRECONDITION2( ret, cx, 0, "Invalid Native Object");
		        } while (0);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPickerView_onViewForSelected : Error processing arguments");
        cobj->onViewForSelected(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAPickerView_onViewForSelected : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAPickerView_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAPickerView* ret = CrossApp::CAPickerView::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPickerView>(cx, (CrossApp::CAPickerView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAPickerView_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CAPickerView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPickerView_createWithFrame : Error processing arguments");
        CrossApp::CAPickerView* ret = CrossApp::CAPickerView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPickerView>(cx, (CrossApp::CAPickerView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAPickerView_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CAPickerView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPickerView_createWithLayout : Error processing arguments");
        CrossApp::CAPickerView* ret = CrossApp::CAPickerView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPickerView>(cx, (CrossApp::CAPickerView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAPickerView_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CAPickerView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAPickerView_createWithCenter : Error processing arguments");
        CrossApp::CAPickerView* ret = CrossApp::CAPickerView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPickerView>(cx, (CrossApp::CAPickerView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAPickerView_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CAPickerView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAPickerView* cobj = new (std::nothrow) CrossApp::CAPickerView();
    TypeTest<CrossApp::CAPickerView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAPickerView");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAPickerView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAPickerView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAPickerView *nobj = static_cast<CrossApp::CAPickerView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAPickerView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAPickerView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAPickerView_class->name = "CAPickerView";
    jsb_CrossApp_CAPickerView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAPickerView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAPickerView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAPickerView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAPickerView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAPickerView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAPickerView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAPickerView_class->finalize = js_CrossApp_CAPickerView_finalize;
    jsb_CrossApp_CAPickerView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setFontSizeNormal", js_crossapp_CAPickerView_setFontSizeNormal, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onHeightForComponent", js_crossapp_CAPickerView_onHeightForComponent, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onViewForRow", js_crossapp_CAPickerView_onViewForRow, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFontSizeNormal", js_crossapp_CAPickerView_getFontSizeNormal, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reloadAllComponents", js_crossapp_CAPickerView_reloadAllComponents, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onWidthForComponent", js_crossapp_CAPickerView_onWidthForComponent, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onNumberOfComponents", js_crossapp_CAPickerView_onNumberOfComponents, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFontSizeSelected", js_crossapp_CAPickerView_getFontSizeSelected, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CAPickerView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundImage", js_crossapp_CAPickerView_setBackgroundImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onNumberOfRowsInComponent", js_crossapp_CAPickerView_onNumberOfRowsInComponent, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFontColorSelected", js_crossapp_CAPickerView_getFontColorSelected, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("visitEve", js_crossapp_CAPickerView_visitEve, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFontColorNormal", js_crossapp_CAPickerView_getFontColorNormal, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFontColorNormal", js_crossapp_CAPickerView_setFontColorNormal, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_crossapp_CAPickerView_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSeparateColor", js_crossapp_CAPickerView_getSeparateColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("selectRow", js_crossapp_CAPickerView_selectRow, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reloadComponent", js_crossapp_CAPickerView_reloadComponent, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFontColorSelected", js_crossapp_CAPickerView_setFontColorSelected, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("selectedRowInComponent", js_crossapp_CAPickerView_selectedRowInComponent, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSeparateColor", js_crossapp_CAPickerView_setSeparateColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onTitleForRow", js_crossapp_CAPickerView_onTitleForRow, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDidSelectRow", js_crossapp_CAPickerView_onDidSelectRow, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_crossapp_CAPickerView_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFontSizeSelected", js_crossapp_CAPickerView_setFontSizeSelected, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onViewForSelected", js_crossapp_CAPickerView_onViewForSelected, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CAPickerView_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_crossapp_CAPickerView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CAPickerView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CAPickerView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAPickerView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAPickerView_class,
        js_crossapp_CAPickerView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAPickerView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAPickerView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAPickerView_class;
        p->proto = jsb_CrossApp_CAPickerView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CADatePickerView_class;
JSObject *jsb_CrossApp_CADatePickerView_prototype;

bool js_crossapp_CADatePickerView_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADatePickerView* cobj = (CrossApp::CADatePickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADatePickerView_setBackgroundImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADatePickerView_setBackgroundImage : Error processing arguments");
        cobj->setBackgroundImage(arg0);
        args.rval().setUndefined();
        return true;
    }
    if (argc == 2) {
        CrossApp::CAImage* arg0 = nullptr;
        bool arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADatePickerView_setBackgroundImage : Error processing arguments");
        cobj->setBackgroundImage(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADatePickerView_setBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CADatePickerView_setBackgroundImageForSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADatePickerView* cobj = (CrossApp::CADatePickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADatePickerView_setBackgroundImageForSelected : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADatePickerView_setBackgroundImageForSelected : Error processing arguments");
        cobj->setBackgroundImageForSelected(arg0);
        args.rval().setUndefined();
        return true;
    }
    if (argc == 2) {
        CrossApp::CAImage* arg0 = nullptr;
        bool arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADatePickerView_setBackgroundImageForSelected : Error processing arguments");
        cobj->setBackgroundImageForSelected(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADatePickerView_setBackgroundImageForSelected : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CADatePickerView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADatePickerView* cobj = (CrossApp::CADatePickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADatePickerView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADatePickerView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CADatePickerView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADatePickerView* cobj = (CrossApp::CADatePickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADatePickerView_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADatePickerView_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CADatePickerView_setTime(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADatePickerView* cobj = (CrossApp::CADatePickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADatePickerView_setTime : Invalid Native Object");
    if (argc == 1) {
        long arg0 = 0;
        ok &= jsval_to_long(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADatePickerView_setTime : Error processing arguments");
        cobj->setTime(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADatePickerView_setTime : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CADatePickerView_setDate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADatePickerView* cobj = (CrossApp::CADatePickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADatePickerView_setDate : Invalid Native Object");
    if (argc == 4) {
        int arg0 = 0;
        int arg1 = 0;
        int arg2 = 0;
        bool arg3;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
        arg3 = JS::ToBoolean(args.get(3));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADatePickerView_setDate : Error processing arguments");
        cobj->setDate(arg0, arg1, arg2, arg3);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADatePickerView_setDate : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_crossapp_CADatePickerView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADatePickerView* cobj = (CrossApp::CADatePickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADatePickerView_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADatePickerView_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CADatePickerView_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CADatePickerView::Mode arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADatePickerView_create : Error processing arguments");
        CrossApp::CADatePickerView* ret = CrossApp::CADatePickerView::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CADatePickerView>(cx, (CrossApp::CADatePickerView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CADatePickerView_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CADatePickerView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DRect arg0;
        CrossApp::CADatePickerView::Mode arg1;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADatePickerView_createWithFrame : Error processing arguments");
        CrossApp::CADatePickerView* ret = CrossApp::CADatePickerView::createWithFrame(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CADatePickerView>(cx, (CrossApp::CADatePickerView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CADatePickerView_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CADatePickerView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DLayout arg0;
        CrossApp::CADatePickerView::Mode arg1;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADatePickerView_createWithLayout : Error processing arguments");
        CrossApp::CADatePickerView* ret = CrossApp::CADatePickerView::createWithLayout(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CADatePickerView>(cx, (CrossApp::CADatePickerView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CADatePickerView_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CADatePickerView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DRect arg0;
        CrossApp::CADatePickerView::Mode arg1;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADatePickerView_createWithCenter : Error processing arguments");
        CrossApp::CADatePickerView* ret = CrossApp::CADatePickerView::createWithCenter(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CADatePickerView>(cx, (CrossApp::CADatePickerView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CADatePickerView_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CADatePickerView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CADatePickerView::Mode arg0;
    ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
    JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADatePickerView_constructor : Error processing arguments");
    CrossApp::CADatePickerView* cobj = new (std::nothrow) CrossApp::CADatePickerView(arg0);
    TypeTest<CrossApp::CADatePickerView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CADatePickerView");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAControl_prototype;

void js_CrossApp_CADatePickerView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CADatePickerView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CADatePickerView *nobj = static_cast<CrossApp::CADatePickerView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CADatePickerView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CADatePickerView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CADatePickerView_class->name = "CADatePickerView";
    jsb_CrossApp_CADatePickerView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CADatePickerView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CADatePickerView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CADatePickerView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CADatePickerView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CADatePickerView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CADatePickerView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CADatePickerView_class->finalize = js_CrossApp_CADatePickerView_finalize;
    jsb_CrossApp_CADatePickerView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setBackgroundImage", js_crossapp_CADatePickerView_setBackgroundImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundImageForSelected", js_crossapp_CADatePickerView_setBackgroundImageForSelected, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CADatePickerView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_crossapp_CADatePickerView_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTime", js_crossapp_CADatePickerView_setTime, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDate", js_crossapp_CADatePickerView_setDate, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_crossapp_CADatePickerView_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CADatePickerView_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_crossapp_CADatePickerView_createWithFrame, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CADatePickerView_createWithLayout, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CADatePickerView_createWithCenter, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CADatePickerView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAControl_prototype),
        jsb_CrossApp_CADatePickerView_class,
        js_crossapp_CADatePickerView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CADatePickerView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CADatePickerView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CADatePickerView_class;
        p->proto = jsb_CrossApp_CADatePickerView_prototype;
        p->parentProto = jsb_CrossApp_CAControl_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CADrawView_class;
JSObject *jsb_CrossApp_CADrawView_prototype;

bool js_crossapp_CADrawView_drawLine(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_drawLine : Invalid Native Object");
    if (argc == 3) {
        CrossApp::DPoint arg0;
        CrossApp::DPoint arg1;
        CrossApp::CAColor4B arg2;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        ok &= jsval_to_dpoint(cx, args.get(1), &arg1);
        ok &= jsval_to_cacolor4b(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawView_drawLine : Error processing arguments");
        cobj->drawLine(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawView_drawLine : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_crossapp_CADrawView_drawPoints(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CADrawView* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_drawPoints : Invalid Native Object");
    do {
        if (argc == 4) {
            const CrossApp::DPoint* arg0 = nullptr;
            std::vector<CrossApp::DPoint> tempData;ok &= jsval_to_vector_vec2(cx, args.get(0), &tempData);arg0=tempData.data();
            if (!ok) { ok = true; break; }
            uint32_t arg1 = 0;
            ok &= jsval_to_uint32(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            double arg2 = 0;
            ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
            if (!ok) { ok = true; break; }
            CrossApp::CAColor4B arg3;
            ok &= jsval_to_cacolor4b(cx, args.get(3), &arg3);
            if (!ok) { ok = true; break; }
            cobj->drawPoints(arg0, arg1, arg2, arg3);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 3) {
            const CrossApp::DPoint* arg0 = nullptr;
            std::vector<CrossApp::DPoint> tempData;ok &= jsval_to_vector_vec2(cx, args.get(0), &tempData);arg0=tempData.data();
            if (!ok) { ok = true; break; }
            uint32_t arg1 = 0;
            ok &= jsval_to_uint32(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAColor4B arg2;
            ok &= jsval_to_cacolor4b(cx, args.get(2), &arg2);
            if (!ok) { ok = true; break; }
            cobj->drawPoints(arg0, arg1, arg2);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CADrawView_drawPoints : wrong number of arguments");
    return false;
}
bool js_crossapp_CADrawView_drawRect(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CADrawView* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_drawRect : Invalid Native Object");
    do {
        if (argc == 5) {
            CrossApp::DPoint arg0;
            ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::DPoint arg1;
            ok &= jsval_to_dpoint(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::DPoint arg2;
            ok &= jsval_to_dpoint(cx, args.get(2), &arg2);
            if (!ok) { ok = true; break; }
            CrossApp::DPoint arg3;
            ok &= jsval_to_dpoint(cx, args.get(3), &arg3);
            if (!ok) { ok = true; break; }
            CrossApp::CAColor4B arg4;
            ok &= jsval_to_cacolor4b(cx, args.get(4), &arg4);
            if (!ok) { ok = true; break; }
            cobj->drawRect(arg0, arg1, arg2, arg3, arg4);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 3) {
            CrossApp::DPoint arg0;
            ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::DPoint arg1;
            ok &= jsval_to_dpoint(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAColor4B arg2;
            ok &= jsval_to_cacolor4b(cx, args.get(2), &arg2);
            if (!ok) { ok = true; break; }
            cobj->drawRect(arg0, arg1, arg2);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CADrawView_drawRect : wrong number of arguments");
    return false;
}
bool js_crossapp_CADrawView_drawSolidCircle(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CADrawView* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_drawSolidCircle : Invalid Native Object");
    do {
        if (argc == 5) {
            CrossApp::DPoint arg0;
            ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            double arg2 = 0;
            ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
            if (!ok) { ok = true; break; }
            uint32_t arg3 = 0;
            ok &= jsval_to_uint32(cx, args.get(3), &arg3);
            if (!ok) { ok = true; break; }
            CrossApp::CAColor4B arg4;
            ok &= jsval_to_cacolor4b(cx, args.get(4), &arg4);
            if (!ok) { ok = true; break; }
            cobj->drawSolidCircle(arg0, arg1, arg2, arg3, arg4);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 7) {
            CrossApp::DPoint arg0;
            ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            double arg2 = 0;
            ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
            if (!ok) { ok = true; break; }
            uint32_t arg3 = 0;
            ok &= jsval_to_uint32(cx, args.get(3), &arg3);
            if (!ok) { ok = true; break; }
            double arg4 = 0;
            ok &= JS::ToNumber( cx, args.get(4), &arg4) && !isnan(arg4);
            if (!ok) { ok = true; break; }
            double arg5 = 0;
            ok &= JS::ToNumber( cx, args.get(5), &arg5) && !isnan(arg5);
            if (!ok) { ok = true; break; }
            CrossApp::CAColor4B arg6;
            ok &= jsval_to_cacolor4b(cx, args.get(6), &arg6);
            if (!ok) { ok = true; break; }
            cobj->drawSolidCircle(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CADrawView_drawSolidCircle : wrong number of arguments");
    return false;
}
bool js_crossapp_CADrawView_setLineWidth(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_setLineWidth : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawView_setLineWidth : Error processing arguments");
        cobj->setLineWidth(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawView_setLineWidth : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CADrawView_onDrawGLPoint(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_onDrawGLPoint : Invalid Native Object");
    if (argc == 2) {
        CrossApp::Mat4 arg0;
        uint32_t arg1 = 0;
        ok &= jsval_to_matrix(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawView_onDrawGLPoint : Error processing arguments");
        cobj->onDrawGLPoint(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawView_onDrawGLPoint : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CADrawView_drawPolygon(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_drawPolygon : Invalid Native Object");
    if (argc == 5) {
        const CrossApp::DPoint* arg0 = nullptr;
        int arg1 = 0;
        CrossApp::CAColor4B arg2;
        double arg3 = 0;
        CrossApp::CAColor4B arg4;
        std::vector<CrossApp::DPoint> tempData;ok &= jsval_to_vector_vec2(cx, args.get(0), &tempData);arg0=tempData.data();
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        ok &= jsval_to_cacolor4b(cx, args.get(2), &arg2);
        ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
        ok &= jsval_to_cacolor4b(cx, args.get(4), &arg4);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawView_drawPolygon : Error processing arguments");
        cobj->drawPolygon(arg0, arg1, arg2, arg3, arg4);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawView_drawPolygon : wrong number of arguments: %d, was expecting %d", argc, 5);
    return false;
}
bool js_crossapp_CADrawView_drawDot(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_drawDot : Invalid Native Object");
    if (argc == 3) {
        CrossApp::DPoint arg0;
        double arg1 = 0;
        CrossApp::CAColor4B arg2;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= jsval_to_cacolor4b(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawView_drawDot : Error processing arguments");
        cobj->drawDot(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawView_drawDot : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_crossapp_CADrawView_drawCatmullRom(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_drawCatmullRom : Invalid Native Object");
    if (argc == 3) {
        CrossApp::PointArray* arg0 = nullptr;
        uint32_t arg1 = 0;
        CrossApp::CAColor4B arg2;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::PointArray*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_cacolor4b(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawView_drawCatmullRom : Error processing arguments");
        cobj->drawCatmullRom(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawView_drawCatmullRom : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_crossapp_CADrawView_drawSegment(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_drawSegment : Invalid Native Object");
    if (argc == 4) {
        CrossApp::DPoint arg0;
        CrossApp::DPoint arg1;
        double arg2 = 0;
        CrossApp::CAColor4B arg3;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        ok &= jsval_to_dpoint(cx, args.get(1), &arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        ok &= jsval_to_cacolor4b(cx, args.get(3), &arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawView_drawSegment : Error processing arguments");
        cobj->drawSegment(arg0, arg1, arg2, arg3);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawView_drawSegment : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_crossapp_CADrawView_getBlendFunc(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_getBlendFunc : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::BlendFunc& ret = cobj->getBlendFunc();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR BlendFunc;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawView_getBlendFunc : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CADrawView_onDraw(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_onDraw : Invalid Native Object");
    if (argc == 2) {
        CrossApp::Mat4 arg0;
        uint32_t arg1 = 0;
        ok &= jsval_to_matrix(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawView_onDraw : Error processing arguments");
        cobj->onDraw(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawView_onDraw : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CADrawView_drawCircle(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CADrawView* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_drawCircle : Invalid Native Object");
    do {
        if (argc == 6) {
            CrossApp::DPoint arg0;
            ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            double arg2 = 0;
            ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
            if (!ok) { ok = true; break; }
            uint32_t arg3 = 0;
            ok &= jsval_to_uint32(cx, args.get(3), &arg3);
            if (!ok) { ok = true; break; }
            bool arg4;
            arg4 = JS::ToBoolean(args.get(4));
            CrossApp::CAColor4B arg5;
            ok &= jsval_to_cacolor4b(cx, args.get(5), &arg5);
            if (!ok) { ok = true; break; }
            cobj->drawCircle(arg0, arg1, arg2, arg3, arg4, arg5);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 8) {
            CrossApp::DPoint arg0;
            ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            double arg2 = 0;
            ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
            if (!ok) { ok = true; break; }
            uint32_t arg3 = 0;
            ok &= jsval_to_uint32(cx, args.get(3), &arg3);
            if (!ok) { ok = true; break; }
            bool arg4;
            arg4 = JS::ToBoolean(args.get(4));
            double arg5 = 0;
            ok &= JS::ToNumber( cx, args.get(5), &arg5) && !isnan(arg5);
            if (!ok) { ok = true; break; }
            double arg6 = 0;
            ok &= JS::ToNumber( cx, args.get(6), &arg6) && !isnan(arg6);
            if (!ok) { ok = true; break; }
            CrossApp::CAColor4B arg7;
            ok &= jsval_to_cacolor4b(cx, args.get(7), &arg7);
            if (!ok) { ok = true; break; }
            cobj->drawCircle(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CADrawView_drawCircle : wrong number of arguments");
    return false;
}
bool js_crossapp_CADrawView_drawQuadBezier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_drawQuadBezier : Invalid Native Object");
    if (argc == 5) {
        CrossApp::DPoint arg0;
        CrossApp::DPoint arg1;
        CrossApp::DPoint arg2;
        uint32_t arg3 = 0;
        CrossApp::CAColor4B arg4;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        ok &= jsval_to_dpoint(cx, args.get(1), &arg1);
        ok &= jsval_to_dpoint(cx, args.get(2), &arg2);
        ok &= jsval_to_uint32(cx, args.get(3), &arg3);
        ok &= jsval_to_cacolor4b(cx, args.get(4), &arg4);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawView_drawQuadBezier : Error processing arguments");
        cobj->drawQuadBezier(arg0, arg1, arg2, arg3, arg4);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawView_drawQuadBezier : wrong number of arguments: %d, was expecting %d", argc, 5);
    return false;
}
bool js_crossapp_CADrawView_onDrawGLLine(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_onDrawGLLine : Invalid Native Object");
    if (argc == 2) {
        CrossApp::Mat4 arg0;
        uint32_t arg1 = 0;
        ok &= jsval_to_matrix(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawView_onDrawGLLine : Error processing arguments");
        cobj->onDrawGLLine(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawView_onDrawGLLine : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CADrawView_drawSolidPoly(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_drawSolidPoly : Invalid Native Object");
    if (argc == 3) {
        const CrossApp::DPoint* arg0 = nullptr;
        uint32_t arg1 = 0;
        CrossApp::CAColor4B arg2;
        std::vector<CrossApp::DPoint> tempData;ok &= jsval_to_vector_vec2(cx, args.get(0), &tempData);arg0=tempData.data();
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_cacolor4b(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawView_drawSolidPoly : Error processing arguments");
        cobj->drawSolidPoly(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawView_drawSolidPoly : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_crossapp_CADrawView_drawTriangle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_drawTriangle : Invalid Native Object");
    if (argc == 4) {
        CrossApp::DPoint arg0;
        CrossApp::DPoint arg1;
        CrossApp::DPoint arg2;
        CrossApp::CAColor4B arg3;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        ok &= jsval_to_dpoint(cx, args.get(1), &arg1);
        ok &= jsval_to_dpoint(cx, args.get(2), &arg2);
        ok &= jsval_to_cacolor4b(cx, args.get(3), &arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawView_drawTriangle : Error processing arguments");
        cobj->drawTriangle(arg0, arg1, arg2, arg3);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawView_drawTriangle : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_crossapp_CADrawView_setBlendFunc(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_setBlendFunc : Invalid Native Object");
    if (argc == 1) {
        CrossApp::BlendFunc arg0;
        #pragma warning NO CONVERSION TO NATIVE FOR BlendFunc
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawView_setBlendFunc : Error processing arguments");
        cobj->setBlendFunc(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawView_setBlendFunc : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CADrawView_clear(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_clear : Invalid Native Object");
    if (argc == 0) {
        cobj->clear();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawView_clear : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CADrawView_drawCardinalSpline(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_drawCardinalSpline : Invalid Native Object");
    if (argc == 4) {
        CrossApp::PointArray* arg0 = nullptr;
        double arg1 = 0;
        uint32_t arg2 = 0;
        CrossApp::CAColor4B arg3;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::PointArray*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        ok &= jsval_to_cacolor4b(cx, args.get(3), &arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawView_drawCardinalSpline : Error processing arguments");
        cobj->drawCardinalSpline(arg0, arg1, arg2, arg3);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawView_drawCardinalSpline : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_crossapp_CADrawView_drawSolidRect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_drawSolidRect : Invalid Native Object");
    if (argc == 3) {
        CrossApp::DPoint arg0;
        CrossApp::DPoint arg1;
        CrossApp::CAColor4B arg2;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        ok &= jsval_to_dpoint(cx, args.get(1), &arg1);
        ok &= jsval_to_cacolor4b(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawView_drawSolidRect : Error processing arguments");
        cobj->drawSolidRect(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawView_drawSolidRect : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_crossapp_CADrawView_getLineWidth(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_getLineWidth : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getLineWidth();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawView_getLineWidth : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CADrawView_drawPoly(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_drawPoly : Invalid Native Object");
    if (argc == 4) {
        const CrossApp::DPoint* arg0 = nullptr;
        uint32_t arg1 = 0;
        bool arg2;
        CrossApp::CAColor4B arg3;
        std::vector<CrossApp::DPoint> tempData;ok &= jsval_to_vector_vec2(cx, args.get(0), &tempData);arg0=tempData.data();
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        arg2 = JS::ToBoolean(args.get(2));
        ok &= jsval_to_cacolor4b(cx, args.get(3), &arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawView_drawPoly : Error processing arguments");
        cobj->drawPoly(arg0, arg1, arg2, arg3);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawView_drawPoly : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_crossapp_CADrawView_drawPoint(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_drawPoint : Invalid Native Object");
    if (argc == 3) {
        CrossApp::DPoint arg0;
        double arg1 = 0;
        CrossApp::CAColor4B arg2;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= jsval_to_cacolor4b(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawView_drawPoint : Error processing arguments");
        cobj->drawPoint(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawView_drawPoint : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_crossapp_CADrawView_drawCubicBezier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADrawView_drawCubicBezier : Invalid Native Object");
    if (argc == 6) {
        CrossApp::DPoint arg0;
        CrossApp::DPoint arg1;
        CrossApp::DPoint arg2;
        CrossApp::DPoint arg3;
        uint32_t arg4 = 0;
        CrossApp::CAColor4B arg5;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        ok &= jsval_to_dpoint(cx, args.get(1), &arg1);
        ok &= jsval_to_dpoint(cx, args.get(2), &arg2);
        ok &= jsval_to_dpoint(cx, args.get(3), &arg3);
        ok &= jsval_to_uint32(cx, args.get(4), &arg4);
        ok &= jsval_to_cacolor4b(cx, args.get(5), &arg5);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawView_drawCubicBezier : Error processing arguments");
        cobj->drawCubicBezier(arg0, arg1, arg2, arg3, arg4, arg5);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADrawView_drawCubicBezier : wrong number of arguments: %d, was expecting %d", argc, 6);
    return false;
}
bool js_crossapp_CADrawView_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 0) {
        CrossApp::CADrawView* ret = CrossApp::CADrawView::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CADrawView>(cx, (CrossApp::CADrawView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADrawView_create : Error processing arguments");
        CrossApp::CADrawView* ret = CrossApp::CADrawView::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CADrawView>(cx, (CrossApp::CADrawView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CADrawView_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CADrawView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CADrawView* cobj = new (std::nothrow) CrossApp::CADrawView();
    TypeTest<CrossApp::CADrawView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CADrawView");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CADrawView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CADrawView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CADrawView *nobj = static_cast<CrossApp::CADrawView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CADrawView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CADrawView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CADrawView_class->name = "CADrawView";
    jsb_CrossApp_CADrawView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CADrawView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CADrawView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CADrawView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CADrawView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CADrawView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CADrawView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CADrawView_class->finalize = js_CrossApp_CADrawView_finalize;
    jsb_CrossApp_CADrawView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("drawLine", js_crossapp_CADrawView_drawLine, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawPoints", js_crossapp_CADrawView_drawPoints, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawRect", js_crossapp_CADrawView_drawRect, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawSolidCircle", js_crossapp_CADrawView_drawSolidCircle, 5, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setLineWidth", js_crossapp_CADrawView_setLineWidth, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDrawGLPoint", js_crossapp_CADrawView_onDrawGLPoint, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawPolygon", js_crossapp_CADrawView_drawPolygon, 5, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawDot", js_crossapp_CADrawView_drawDot, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawCatmullRom", js_crossapp_CADrawView_drawCatmullRom, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawSegment", js_crossapp_CADrawView_drawSegment, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBlendFunc", js_crossapp_CADrawView_getBlendFunc, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDraw", js_crossapp_CADrawView_onDraw, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawCircle", js_crossapp_CADrawView_drawCircle, 6, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawQuadBezier", js_crossapp_CADrawView_drawQuadBezier, 5, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDrawGLLine", js_crossapp_CADrawView_onDrawGLLine, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawSolidPoly", js_crossapp_CADrawView_drawSolidPoly, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawTriangle", js_crossapp_CADrawView_drawTriangle, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBlendFunc", js_crossapp_CADrawView_setBlendFunc, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("clear", js_crossapp_CADrawView_clear, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawCardinalSpline", js_crossapp_CADrawView_drawCardinalSpline, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawSolidRect", js_crossapp_CADrawView_drawSolidRect, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getLineWidth", js_crossapp_CADrawView_getLineWidth, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawPoly", js_crossapp_CADrawView_drawPoly, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawPoint", js_crossapp_CADrawView_drawPoint, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawCubicBezier", js_crossapp_CADrawView_drawCubicBezier, 6, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CADrawView_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CADrawView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CADrawView_class,
        js_crossapp_CADrawView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CADrawView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CADrawView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CADrawView_class;
        p->proto = jsb_CrossApp_CADrawView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAUserDefault_class;
JSObject *jsb_CrossApp_CAUserDefault_prototype;

bool js_crossapp_CAUserDefault_setIntegerForKey(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAUserDefault* cobj = (CrossApp::CAUserDefault *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAUserDefault_setIntegerForKey : Invalid Native Object");
    if (argc == 2) {
        const char* arg0 = nullptr;
        int arg1 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAUserDefault_setIntegerForKey : Error processing arguments");
        cobj->setIntegerForKey(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAUserDefault_setIntegerForKey : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAUserDefault_getFloatForKey(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CAUserDefault* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CAUserDefault *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAUserDefault_getFloatForKey : Invalid Native Object");
    do {
        if (argc == 2) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            double ret = cobj->getFloatForKey(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            jsret = DOUBLE_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 1) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            double ret = cobj->getFloatForKey(arg0);
            jsval jsret = JSVAL_NULL;
            jsret = DOUBLE_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CAUserDefault_getFloatForKey : wrong number of arguments");
    return false;
}
bool js_crossapp_CAUserDefault_getBoolForKey(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CAUserDefault* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CAUserDefault *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAUserDefault_getBoolForKey : Invalid Native Object");
    do {
        if (argc == 2) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            bool arg1;
            arg1 = JS::ToBoolean(args.get(1));
            bool ret = cobj->getBoolForKey(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            jsret = BOOLEAN_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 1) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            bool ret = cobj->getBoolForKey(arg0);
            jsval jsret = JSVAL_NULL;
            jsret = BOOLEAN_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CAUserDefault_getBoolForKey : wrong number of arguments");
    return false;
}
bool js_crossapp_CAUserDefault_setDoubleForKey(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAUserDefault* cobj = (CrossApp::CAUserDefault *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAUserDefault_setDoubleForKey : Invalid Native Object");
    if (argc == 2) {
        const char* arg0 = nullptr;
        double arg1 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAUserDefault_setDoubleForKey : Error processing arguments");
        cobj->setDoubleForKey(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAUserDefault_setDoubleForKey : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAUserDefault_setFloatForKey(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAUserDefault* cobj = (CrossApp::CAUserDefault *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAUserDefault_setFloatForKey : Invalid Native Object");
    if (argc == 2) {
        const char* arg0 = nullptr;
        double arg1 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAUserDefault_setFloatForKey : Error processing arguments");
        cobj->setFloatForKey(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAUserDefault_setFloatForKey : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAUserDefault_getStringForKey(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CAUserDefault* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CAUserDefault *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAUserDefault_getStringForKey : Invalid Native Object");
    do {
        if (argc == 2) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= jsval_to_std_string(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            std::string ret = cobj->getStringForKey(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            jsret = std_string_to_jsval(cx, ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 1) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            std::string ret = cobj->getStringForKey(arg0);
            jsval jsret = JSVAL_NULL;
            jsret = std_string_to_jsval(cx, ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CAUserDefault_getStringForKey : wrong number of arguments");
    return false;
}
bool js_crossapp_CAUserDefault_setStringForKey(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAUserDefault* cobj = (CrossApp::CAUserDefault *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAUserDefault_setStringForKey : Invalid Native Object");
    if (argc == 2) {
        const char* arg0 = nullptr;
        std::string arg1;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAUserDefault_setStringForKey : Error processing arguments");
        cobj->setStringForKey(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAUserDefault_setStringForKey : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAUserDefault_flush(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAUserDefault* cobj = (CrossApp::CAUserDefault *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAUserDefault_flush : Invalid Native Object");
    if (argc == 0) {
        cobj->flush();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAUserDefault_flush : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAUserDefault_getIntegerForKey(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CAUserDefault* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CAUserDefault *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAUserDefault_getIntegerForKey : Invalid Native Object");
    do {
        if (argc == 2) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            int ret = cobj->getIntegerForKey(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            jsret = int32_to_jsval(cx, ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 1) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            int ret = cobj->getIntegerForKey(arg0);
            jsval jsret = JSVAL_NULL;
            jsret = int32_to_jsval(cx, ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CAUserDefault_getIntegerForKey : wrong number of arguments");
    return false;
}
bool js_crossapp_CAUserDefault_getDoubleForKey(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CAUserDefault* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CAUserDefault *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAUserDefault_getDoubleForKey : Invalid Native Object");
    do {
        if (argc == 2) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            double ret = cobj->getDoubleForKey(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            jsret = DOUBLE_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 1) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            double ret = cobj->getDoubleForKey(arg0);
            jsval jsret = JSVAL_NULL;
            jsret = DOUBLE_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CAUserDefault_getDoubleForKey : wrong number of arguments");
    return false;
}
bool js_crossapp_CAUserDefault_setBoolForKey(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAUserDefault* cobj = (CrossApp::CAUserDefault *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAUserDefault_setBoolForKey : Invalid Native Object");
    if (argc == 2) {
        const char* arg0 = nullptr;
        bool arg1;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAUserDefault_setBoolForKey : Error processing arguments");
        cobj->setBoolForKey(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAUserDefault_setBoolForKey : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAUserDefault_destroyInstance(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAUserDefault::destroyInstance();
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAUserDefault_destroyInstance : wrong number of arguments");
    return false;
}
bool js_crossapp_CAUserDefault_getXMLFilePath(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        const std::string& ret = CrossApp::CAUserDefault::getXMLFilePath();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAUserDefault_getXMLFilePath : wrong number of arguments");
    return false;
}
bool js_crossapp_CAUserDefault_isXMLFileExist(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        bool ret = CrossApp::CAUserDefault::isXMLFileExist();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAUserDefault_isXMLFileExist : wrong number of arguments");
    return false;
}
bool js_crossapp_CAUserDefault_getInstance(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAUserDefault* ret = CrossApp::CAUserDefault::getInstance();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAUserDefault>(cx, (CrossApp::CAUserDefault*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAUserDefault_getInstance : wrong number of arguments");
    return false;
}

void js_CrossApp_CAUserDefault_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAUserDefault)", obj);
}
void js_register_crossapp_CAUserDefault(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAUserDefault_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAUserDefault_class->name = "CAUserDefault";
    jsb_CrossApp_CAUserDefault_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAUserDefault_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAUserDefault_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAUserDefault_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAUserDefault_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAUserDefault_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAUserDefault_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAUserDefault_class->finalize = js_CrossApp_CAUserDefault_finalize;
    jsb_CrossApp_CAUserDefault_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setIntegerForKey", js_crossapp_CAUserDefault_setIntegerForKey, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFloatForKey", js_crossapp_CAUserDefault_getFloatForKey, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBoolForKey", js_crossapp_CAUserDefault_getBoolForKey, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDoubleForKey", js_crossapp_CAUserDefault_setDoubleForKey, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFloatForKey", js_crossapp_CAUserDefault_setFloatForKey, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getStringForKey", js_crossapp_CAUserDefault_getStringForKey, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setStringForKey", js_crossapp_CAUserDefault_setStringForKey, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("flush", js_crossapp_CAUserDefault_flush, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getIntegerForKey", js_crossapp_CAUserDefault_getIntegerForKey, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDoubleForKey", js_crossapp_CAUserDefault_getDoubleForKey, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBoolForKey", js_crossapp_CAUserDefault_setBoolForKey, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("destroyInstance", js_crossapp_CAUserDefault_destroyInstance, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getXMLFilePath", js_crossapp_CAUserDefault_getXMLFilePath, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isXMLFileExist", js_crossapp_CAUserDefault_isXMLFileExist, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getInstance", js_crossapp_CAUserDefault_getInstance, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAUserDefault_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CAUserDefault_class,
        dummy_constructor<CrossApp::CAUserDefault>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAUserDefault", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAUserDefault> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAUserDefault_class;
        p->proto = jsb_CrossApp_CAUserDefault_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAHttpRequest_class;
JSObject *jsb_CrossApp_CAHttpRequest_prototype;

bool js_crossapp_CAHttpRequest_getUrl(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpRequest* cobj = (CrossApp::CAHttpRequest *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpRequest_getUrl : Invalid Native Object");
    if (argc == 0) {
        const char* ret = cobj->getUrl();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpRequest_getUrl : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAHttpRequest_setResponseCallback(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpRequest* cobj = (CrossApp::CAHttpRequest *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpRequest_setResponseCallback : Invalid Native Object");
    if (argc == 1) {
        std::function<void (CrossApp::CAHttpClient *, CrossApp::CAHttpResponse *)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::CAHttpClient* larg0, CrossApp::CAHttpResponse* larg1) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[2];
		            do {
		            if (larg0) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAHttpClient>(cx, (CrossApp::CAHttpClient*)larg0);
		                largv[0] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[0] = JSVAL_NULL;
		            }
		        } while (0);
		            do {
		            if (larg1) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAHttpResponse>(cx, (CrossApp::CAHttpResponse*)larg1);
		                largv[1] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[1] = JSVAL_NULL;
		            }
		        } while (0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(2, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAHttpRequest_setResponseCallback : Error processing arguments");
        cobj->setResponseCallback(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpRequest_setResponseCallback : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAHttpRequest_getCallback(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpRequest* cobj = (CrossApp::CAHttpRequest *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpRequest_getCallback : Invalid Native Object");
    if (argc == 0) {
        const std::function<void (CrossApp::CAHttpClient *, CrossApp::CAHttpResponse *)>& ret = cobj->getCallback();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR std::function;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpRequest_getCallback : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAHttpRequest_getThreadID(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpRequest* cobj = (CrossApp::CAHttpRequest *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpRequest_getThreadID : Invalid Native Object");
    if (argc == 0) {
        ssize_t ret = cobj->getThreadID();
        jsval jsret = JSVAL_NULL;
        jsret = ssize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpRequest_getThreadID : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAHttpRequest_getRequestData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpRequest* cobj = (CrossApp::CAHttpRequest *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpRequest_getRequestData : Invalid Native Object");
    if (argc == 0) {
        char* ret = cobj->getRequestData();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpRequest_getRequestData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAHttpRequest_setUrl(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpRequest* cobj = (CrossApp::CAHttpRequest *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpRequest_setUrl : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAHttpRequest_setUrl : Error processing arguments");
        cobj->setUrl(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpRequest_setUrl : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAHttpRequest_setRequestType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpRequest* cobj = (CrossApp::CAHttpRequest *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpRequest_setRequestType : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAHttpRequest::Type arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAHttpRequest_setRequestType : Error processing arguments");
        cobj->setRequestType(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpRequest_setRequestType : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAHttpRequest_getHeaders(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpRequest* cobj = (CrossApp::CAHttpRequest *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpRequest_getHeaders : Invalid Native Object");
    if (argc == 0) {
        std::vector<std::string, std::allocator<std::string> > ret = cobj->getHeaders();
        jsval jsret = JSVAL_NULL;
        jsret = std_vector_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpRequest_getHeaders : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAHttpRequest_getRequestType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpRequest* cobj = (CrossApp::CAHttpRequest *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpRequest_getRequestType : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getRequestType();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpRequest_getRequestType : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAHttpRequest_setThreadID(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpRequest* cobj = (CrossApp::CAHttpRequest *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpRequest_setThreadID : Invalid Native Object");
    if (argc == 1) {
        ssize_t arg0 = 0;
        ok &= jsval_to_ssize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAHttpRequest_setThreadID : Error processing arguments");
        cobj->setThreadID(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpRequest_setThreadID : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAHttpRequest_setRequestData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpRequest* cobj = (CrossApp::CAHttpRequest *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpRequest_setRequestData : Invalid Native Object");
    if (argc == 2) {
        const char* arg0 = nullptr;
        unsigned long arg1 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAHttpRequest_setRequestData : Error processing arguments");
        cobj->setRequestData(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpRequest_setRequestData : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAHttpRequest_getRequestDataSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpRequest* cobj = (CrossApp::CAHttpRequest *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpRequest_getRequestDataSize : Invalid Native Object");
    if (argc == 0) {
        ssize_t ret = cobj->getRequestDataSize();
        jsval jsret = JSVAL_NULL;
        jsret = ssize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpRequest_getRequestDataSize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAHttpRequest_setFileNameToPost(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpRequest* cobj = (CrossApp::CAHttpRequest *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpRequest_setFileNameToPost : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAHttpRequest_setFileNameToPost : Error processing arguments");
        cobj->setFileNameToPost(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpRequest_setFileNameToPost : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAHttpRequest_setHeaders(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpRequest* cobj = (CrossApp::CAHttpRequest *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpRequest_setHeaders : Invalid Native Object");
    if (argc == 1) {
        std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > > arg0;
        ok &= jsval_to_std_vector_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAHttpRequest_setHeaders : Error processing arguments");
        cobj->setHeaders(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpRequest_setHeaders : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAHttpRequest_getFileNameToPost(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpRequest* cobj = (CrossApp::CAHttpRequest *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpRequest_getFileNameToPost : Invalid Native Object");
    if (argc == 0) {
        const char* ret = cobj->getFileNameToPost();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpRequest_getFileNameToPost : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAHttpRequest_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAHttpRequest* ret = CrossApp::CAHttpRequest::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAHttpRequest>(cx, (CrossApp::CAHttpRequest*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAHttpRequest_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CAHttpRequest_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAHttpRequest* cobj = new (std::nothrow) CrossApp::CAHttpRequest();
    TypeTest<CrossApp::CAHttpRequest> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAHttpRequest");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAHttpRequest_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAHttpRequest)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAHttpRequest *nobj = static_cast<CrossApp::CAHttpRequest *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAHttpRequest(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAHttpRequest_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAHttpRequest_class->name = "CAHttpRequest";
    jsb_CrossApp_CAHttpRequest_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAHttpRequest_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAHttpRequest_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAHttpRequest_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAHttpRequest_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAHttpRequest_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAHttpRequest_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAHttpRequest_class->finalize = js_CrossApp_CAHttpRequest_finalize;
    jsb_CrossApp_CAHttpRequest_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getUrl", js_crossapp_CAHttpRequest_getUrl, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setResponseCallback", js_crossapp_CAHttpRequest_setResponseCallback, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCallback", js_crossapp_CAHttpRequest_getCallback, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getThreadID", js_crossapp_CAHttpRequest_getThreadID, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRequestData", js_crossapp_CAHttpRequest_getRequestData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setUrl", js_crossapp_CAHttpRequest_setUrl, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setRequestType", js_crossapp_CAHttpRequest_setRequestType, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getHeaders", js_crossapp_CAHttpRequest_getHeaders, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRequestType", js_crossapp_CAHttpRequest_getRequestType, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setThreadID", js_crossapp_CAHttpRequest_setThreadID, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setRequestData", js_crossapp_CAHttpRequest_setRequestData, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRequestDataSize", js_crossapp_CAHttpRequest_getRequestDataSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFileNameToPost", js_crossapp_CAHttpRequest_setFileNameToPost, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setHeaders", js_crossapp_CAHttpRequest_setHeaders, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFileNameToPost", js_crossapp_CAHttpRequest_getFileNameToPost, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CAHttpRequest_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAHttpRequest_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAHttpRequest_class,
        js_crossapp_CAHttpRequest_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAHttpRequest", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAHttpRequest> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAHttpRequest_class;
        p->proto = jsb_CrossApp_CAHttpRequest_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAHttpResponse_class;
JSObject *jsb_CrossApp_CAHttpResponse_prototype;

bool js_crossapp_CAHttpResponse_setErrorBuffer(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpResponse* cobj = (CrossApp::CAHttpResponse *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpResponse_setErrorBuffer : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAHttpResponse_setErrorBuffer : Error processing arguments");
        cobj->setErrorBuffer(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpResponse_setErrorBuffer : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAHttpResponse_getErrorBuffer(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpResponse* cobj = (CrossApp::CAHttpResponse *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpResponse_getErrorBuffer : Invalid Native Object");
    if (argc == 0) {
        const char* ret = cobj->getErrorBuffer();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpResponse_getErrorBuffer : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAHttpResponse_isSucceed(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpResponse* cobj = (CrossApp::CAHttpResponse *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpResponse_isSucceed : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isSucceed();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpResponse_isSucceed : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAHttpResponse_getHttpRequest(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpResponse* cobj = (CrossApp::CAHttpResponse *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpResponse_getHttpRequest : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAHttpRequest* ret = cobj->getHttpRequest();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAHttpRequest>(cx, (CrossApp::CAHttpRequest*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpResponse_getHttpRequest : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAHttpResponse_setResponseData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpResponse* cobj = (CrossApp::CAHttpResponse *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpResponse_setResponseData : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAData* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAData*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAHttpResponse_setResponseData : Error processing arguments");
        cobj->setResponseData(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpResponse_setResponseData : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAHttpResponse_autorelease(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpResponse* cobj = (CrossApp::CAHttpResponse *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpResponse_autorelease : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAObject* ret = cobj->autorelease();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAObject>(cx, (CrossApp::CAObject*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpResponse_autorelease : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAHttpResponse_getResponseData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpResponse* cobj = (CrossApp::CAHttpResponse *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpResponse_getResponseData : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAData* ret = cobj->getResponseData();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAData>(cx, (CrossApp::CAData*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpResponse_getResponseData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAHttpResponse_setResponseHeader(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpResponse* cobj = (CrossApp::CAHttpResponse *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpResponse_setResponseHeader : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAData* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAData*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAHttpResponse_setResponseHeader : Error processing arguments");
        cobj->setResponseHeader(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpResponse_setResponseHeader : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAHttpResponse_setResponseCode(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpResponse* cobj = (CrossApp::CAHttpResponse *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpResponse_setResponseCode : Invalid Native Object");
    if (argc == 1) {
        long arg0 = 0;
        ok &= jsval_to_long(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAHttpResponse_setResponseCode : Error processing arguments");
        cobj->setResponseCode(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpResponse_setResponseCode : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAHttpResponse_getResponseCode(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpResponse* cobj = (CrossApp::CAHttpResponse *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpResponse_getResponseCode : Invalid Native Object");
    if (argc == 0) {
        long ret = cobj->getResponseCode();
        jsval jsret = JSVAL_NULL;
        jsret = long_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpResponse_getResponseCode : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAHttpResponse_getResponseHeader(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpResponse* cobj = (CrossApp::CAHttpResponse *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpResponse_getResponseHeader : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAData* ret = cobj->getResponseHeader();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAData>(cx, (CrossApp::CAData*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpResponse_getResponseHeader : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAHttpResponse_setSucceed(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpResponse* cobj = (CrossApp::CAHttpResponse *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpResponse_setSucceed : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAHttpResponse_setSucceed : Error processing arguments");
        cobj->setSucceed(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpResponse_setSucceed : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAHttpResponse_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAHttpRequest* arg0 = nullptr;
    do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAHttpRequest*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
    JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAHttpResponse_constructor : Error processing arguments");
    CrossApp::CAHttpResponse* cobj = new (std::nothrow) CrossApp::CAHttpResponse(arg0);
    TypeTest<CrossApp::CAHttpResponse> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAHttpResponse");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAHttpResponse_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAHttpResponse)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAHttpResponse *nobj = static_cast<CrossApp::CAHttpResponse *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAHttpResponse(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAHttpResponse_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAHttpResponse_class->name = "CAHttpResponse";
    jsb_CrossApp_CAHttpResponse_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAHttpResponse_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAHttpResponse_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAHttpResponse_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAHttpResponse_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAHttpResponse_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAHttpResponse_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAHttpResponse_class->finalize = js_CrossApp_CAHttpResponse_finalize;
    jsb_CrossApp_CAHttpResponse_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setErrorBuffer", js_crossapp_CAHttpResponse_setErrorBuffer, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getErrorBuffer", js_crossapp_CAHttpResponse_getErrorBuffer, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isSucceed", js_crossapp_CAHttpResponse_isSucceed, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getHttpRequest", js_crossapp_CAHttpResponse_getHttpRequest, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setResponseData", js_crossapp_CAHttpResponse_setResponseData, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("autorelease", js_crossapp_CAHttpResponse_autorelease, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getResponseData", js_crossapp_CAHttpResponse_getResponseData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setResponseHeader", js_crossapp_CAHttpResponse_setResponseHeader, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setResponseCode", js_crossapp_CAHttpResponse_setResponseCode, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getResponseCode", js_crossapp_CAHttpResponse_getResponseCode, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getResponseHeader", js_crossapp_CAHttpResponse_getResponseHeader, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSucceed", js_crossapp_CAHttpResponse_setSucceed, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAHttpResponse_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAHttpResponse_class,
        js_crossapp_CAHttpResponse_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAHttpResponse", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAHttpResponse> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAHttpResponse_class;
        p->proto = jsb_CrossApp_CAHttpResponse_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAHttpClient_class;
JSObject *jsb_CrossApp_CAHttpClient_prototype;

bool js_crossapp_CAHttpClient_sendImmediate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpClient* cobj = (CrossApp::CAHttpClient *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpClient_sendImmediate : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAHttpRequest* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAHttpRequest*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAHttpClient_sendImmediate : Error processing arguments");
        cobj->sendImmediate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpClient_sendImmediate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAHttpClient_getSSLVerification(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpClient* cobj = (CrossApp::CAHttpClient *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpClient_getSSLVerification : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getSSLVerification();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpClient_getSSLVerification : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAHttpClient_getCookie(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpClient* cobj = (CrossApp::CAHttpClient *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpClient_getCookie : Invalid Native Object");
    if (argc == 0) {
        CAHttpCookie* ret = cobj->getCookie();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CAHttpCookie>(cx, (CAHttpCookie*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpClient_getCookie : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAHttpClient_setTimeoutForConnect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpClient* cobj = (CrossApp::CAHttpClient *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpClient_setTimeoutForConnect : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAHttpClient_setTimeoutForConnect : Error processing arguments");
        cobj->setTimeoutForConnect(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpClient_setTimeoutForConnect : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAHttpClient_setTimeoutForRead(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpClient* cobj = (CrossApp::CAHttpClient *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpClient_setTimeoutForRead : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAHttpClient_setTimeoutForRead : Error processing arguments");
        cobj->setTimeoutForRead(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpClient_setTimeoutForRead : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAHttpClient_send(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpClient* cobj = (CrossApp::CAHttpClient *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpClient_send : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAHttpRequest* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAHttpRequest*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAHttpClient_send : Error processing arguments");
        cobj->send(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpClient_send : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAHttpClient_enableCookies(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpClient* cobj = (CrossApp::CAHttpClient *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpClient_enableCookies : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAHttpClient_enableCookies : Error processing arguments");
        cobj->enableCookies(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpClient_enableCookies : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAHttpClient_setSSLVerification(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpClient* cobj = (CrossApp::CAHttpClient *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpClient_setSSLVerification : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAHttpClient_setSSLVerification : Error processing arguments");
        cobj->setSSLVerification(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpClient_setSSLVerification : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAHttpClient_getRequestCount(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpClient* cobj = (CrossApp::CAHttpClient *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpClient_getRequestCount : Invalid Native Object");
    if (argc == 0) {
        unsigned long ret = cobj->getRequestCount();
        jsval jsret = JSVAL_NULL;
        jsret = ulong_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpClient_getRequestCount : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAHttpClient_getTimeoutForConnect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpClient* cobj = (CrossApp::CAHttpClient *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpClient_getTimeoutForConnect : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getTimeoutForConnect();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpClient_getTimeoutForConnect : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAHttpClient_getTimeoutForRead(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpClient* cobj = (CrossApp::CAHttpClient *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpClient_getTimeoutForRead : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getTimeoutForRead();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpClient_getTimeoutForRead : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAHttpClient_getCookieFilename(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAHttpClient* cobj = (CrossApp::CAHttpClient *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAHttpClient_getCookieFilename : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getCookieFilename();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAHttpClient_getCookieFilename : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAHttpClient_destroyInstance(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        ssize_t arg0 = 0;
        ok &= jsval_to_ssize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAHttpClient_destroyInstance : Error processing arguments");
        CrossApp::CAHttpClient::destroyInstance(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAHttpClient_destroyInstance : wrong number of arguments");
    return false;
}
bool js_crossapp_CAHttpClient_destroyAllInstance(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAHttpClient::destroyAllInstance();
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAHttpClient_destroyAllInstance : wrong number of arguments");
    return false;
}
bool js_crossapp_CAHttpClient_getInstance(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        ssize_t arg0 = 0;
        ok &= jsval_to_ssize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAHttpClient_getInstance : Error processing arguments");
        CrossApp::CAHttpClient* ret = CrossApp::CAHttpClient::getInstance(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAHttpClient>(cx, (CrossApp::CAHttpClient*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAHttpClient_getInstance : wrong number of arguments");
    return false;
}
bool js_crossapp_CAHttpClient_uploadFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 10) {
        std::string arg0;
        std::map<std::string, std::string> arg1;
        std::string arg2;
        std::string arg3;
        std::string arg4;
        std::string arg5;
        std::string arg6;
        std::string* arg7 = nullptr;
        long* arg8 = 0;
        std::string* arg9 = nullptr;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_std_map_string_string(cx, args.get(1), &arg1);
        ok &= jsval_to_std_string(cx, args.get(2), &arg2);
        ok &= jsval_to_std_string(cx, args.get(3), &arg3);
        ok &= jsval_to_std_string(cx, args.get(4), &arg4);
        ok &= jsval_to_std_string(cx, args.get(5), &arg5);
        ok &= jsval_to_std_string(cx, args.get(6), &arg6);
        #pragma warning NO CONVERSION TO NATIVE FOR std::string*
		ok = false;
        #pragma warning NO CONVERSION TO NATIVE FOR long*
		ok = false;
        #pragma warning NO CONVERSION TO NATIVE FOR std::string*
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAHttpClient_uploadFile : Error processing arguments");
        bool ret = CrossApp::CAHttpClient::uploadFile(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAHttpClient_uploadFile : wrong number of arguments");
    return false;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAHttpClient_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAHttpClient)", obj);
}
void js_register_crossapp_CAHttpClient(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAHttpClient_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAHttpClient_class->name = "CAHttpClient";
    jsb_CrossApp_CAHttpClient_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAHttpClient_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAHttpClient_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAHttpClient_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAHttpClient_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAHttpClient_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAHttpClient_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAHttpClient_class->finalize = js_CrossApp_CAHttpClient_finalize;
    jsb_CrossApp_CAHttpClient_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("sendImmediate", js_crossapp_CAHttpClient_sendImmediate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSSLVerification", js_crossapp_CAHttpClient_getSSLVerification, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCookie", js_crossapp_CAHttpClient_getCookie, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTimeoutForConnect", js_crossapp_CAHttpClient_setTimeoutForConnect, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTimeoutForRead", js_crossapp_CAHttpClient_setTimeoutForRead, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("send", js_crossapp_CAHttpClient_send, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("enableCookies", js_crossapp_CAHttpClient_enableCookies, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSSLVerification", js_crossapp_CAHttpClient_setSSLVerification, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRequestCount", js_crossapp_CAHttpClient_getRequestCount, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTimeoutForConnect", js_crossapp_CAHttpClient_getTimeoutForConnect, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTimeoutForRead", js_crossapp_CAHttpClient_getTimeoutForRead, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCookieFilename", js_crossapp_CAHttpClient_getCookieFilename, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("destroyInstance", js_crossapp_CAHttpClient_destroyInstance, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("destroyAllInstance", js_crossapp_CAHttpClient_destroyAllInstance, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getInstance", js_crossapp_CAHttpClient_getInstance, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("uploadFile", js_crossapp_CAHttpClient_uploadFile, 10, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAHttpClient_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAHttpClient_class,
        dummy_constructor<CrossApp::CAHttpClient>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAHttpClient", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAHttpClient> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAHttpClient_class;
        p->proto = jsb_CrossApp_CAHttpClient_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CADownloadManager_class;
JSObject *jsb_CrossApp_CADownloadManager_prototype;

bool js_crossapp_CADownloadManager_getDownloadMaxCount(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADownloadManager* cobj = (CrossApp::CADownloadManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADownloadManager_getDownloadMaxCount : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getDownloadMaxCount();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADownloadManager_getDownloadMaxCount : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CADownloadManager_setDownloadMaxCount(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADownloadManager* cobj = (CrossApp::CADownloadManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADownloadManager_setDownloadMaxCount : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADownloadManager_setDownloadMaxCount : Error processing arguments");
        cobj->setDownloadMaxCount(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADownloadManager_setDownloadMaxCount : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CADownloadManager_getLocalFileSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADownloadManager* cobj = (CrossApp::CADownloadManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADownloadManager_getLocalFileSize : Invalid Native Object");
    if (argc == 1) {
        ssize_t arg0 = 0;
        ok &= jsval_to_ssize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADownloadManager_getLocalFileSize : Error processing arguments");
        ssize_t ret = cobj->getLocalFileSize(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = ssize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADownloadManager_getLocalFileSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CADownloadManager_enqueueDownload(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADownloadManager* cobj = (CrossApp::CADownloadManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADownloadManager_enqueueDownload : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        std::string arg1;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADownloadManager_enqueueDownload : Error processing arguments");
        ssize_t ret = cobj->enqueueDownload(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = ssize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 3) {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        ok &= jsval_to_std_string(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADownloadManager_enqueueDownload : Error processing arguments");
        ssize_t ret = cobj->enqueueDownload(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        jsret = ssize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 4) {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        std::string arg3;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        ok &= jsval_to_std_string(cx, args.get(2), &arg2);
        ok &= jsval_to_std_string(cx, args.get(3), &arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADownloadManager_enqueueDownload : Error processing arguments");
        ssize_t ret = cobj->enqueueDownload(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        jsret = ssize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADownloadManager_enqueueDownload : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CADownloadManager_clearOnSuccessDownloadAllRecord(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADownloadManager* cobj = (CrossApp::CADownloadManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADownloadManager_clearOnSuccessDownloadAllRecord : Invalid Native Object");
    if (argc == 0) {
        cobj->clearOnSuccessDownloadAllRecord();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADownloadManager_clearOnSuccessDownloadAllRecord : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CADownloadManager_eraseDownload(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADownloadManager* cobj = (CrossApp::CADownloadManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADownloadManager_eraseDownload : Invalid Native Object");
    if (argc == 1) {
        ssize_t arg0 = 0;
        ok &= jsval_to_ssize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADownloadManager_eraseDownload : Error processing arguments");
        cobj->eraseDownload(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADownloadManager_eraseDownload : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CADownloadManager_enqueueDownloadEx(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADownloadManager* cobj = (CrossApp::CADownloadManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADownloadManager_enqueueDownloadEx : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        std::string arg1;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADownloadManager_enqueueDownloadEx : Error processing arguments");
        ssize_t ret = cobj->enqueueDownloadEx(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = ssize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 3) {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        ok &= jsval_to_std_string(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADownloadManager_enqueueDownloadEx : Error processing arguments");
        ssize_t ret = cobj->enqueueDownloadEx(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        jsret = ssize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 4) {
        std::string arg0;
        std::string arg1;
        std::string arg2;
        std::string arg3;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        ok &= jsval_to_std_string(cx, args.get(2), &arg2);
        ok &= jsval_to_std_string(cx, args.get(3), &arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADownloadManager_enqueueDownloadEx : Error processing arguments");
        ssize_t ret = cobj->enqueueDownloadEx(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        jsret = ssize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADownloadManager_enqueueDownloadEx : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CADownloadManager_isDownloading(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADownloadManager* cobj = (CrossApp::CADownloadManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADownloadManager_isDownloading : Invalid Native Object");
    if (argc == 1) {
        ssize_t arg0 = 0;
        ok &= jsval_to_ssize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADownloadManager_isDownloading : Error processing arguments");
        bool ret = cobj->isDownloading(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADownloadManager_isDownloading : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CADownloadManager_clearOnSuccessDownloadRecord(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADownloadManager* cobj = (CrossApp::CADownloadManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADownloadManager_clearOnSuccessDownloadRecord : Invalid Native Object");
    if (argc == 1) {
        ssize_t arg0 = 0;
        ok &= jsval_to_ssize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADownloadManager_clearOnSuccessDownloadRecord : Error processing arguments");
        cobj->clearOnSuccessDownloadRecord(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADownloadManager_clearOnSuccessDownloadRecord : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CADownloadManager_getDownloadUrl(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADownloadManager* cobj = (CrossApp::CADownloadManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADownloadManager_getDownloadUrl : Invalid Native Object");
    if (argc == 1) {
        ssize_t arg0 = 0;
        ok &= jsval_to_ssize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADownloadManager_getDownloadUrl : Error processing arguments");
        const char* ret = cobj->getDownloadUrl(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADownloadManager_getDownloadUrl : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CADownloadManager_resumeDownload(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADownloadManager* cobj = (CrossApp::CADownloadManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADownloadManager_resumeDownload : Invalid Native Object");
    if (argc == 1) {
        ssize_t arg0 = 0;
        ok &= jsval_to_ssize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADownloadManager_resumeDownload : Error processing arguments");
        cobj->resumeDownload(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADownloadManager_resumeDownload : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CADownloadManager_getDownloadManagerDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADownloadManager* cobj = (CrossApp::CADownloadManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADownloadManager_getDownloadManagerDelegate : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CADownloadManagerDelegate* ret = cobj->getDownloadManagerDelegate();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CADownloadManagerDelegate>(cx, (CrossApp::CADownloadManagerDelegate*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADownloadManager_getDownloadManagerDelegate : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CADownloadManager_getTotalFileSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADownloadManager* cobj = (CrossApp::CADownloadManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADownloadManager_getTotalFileSize : Invalid Native Object");
    if (argc == 1) {
        ssize_t arg0 = 0;
        ok &= jsval_to_ssize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADownloadManager_getTotalFileSize : Error processing arguments");
        ssize_t ret = cobj->getTotalFileSize(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = ssize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADownloadManager_getTotalFileSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CADownloadManager_getFilePath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADownloadManager* cobj = (CrossApp::CADownloadManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADownloadManager_getFilePath : Invalid Native Object");
    if (argc == 1) {
        ssize_t arg0 = 0;
        ok &= jsval_to_ssize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADownloadManager_getFilePath : Error processing arguments");
        const char* ret = cobj->getFilePath(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADownloadManager_getFilePath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CADownloadManager_getDownloadHeader(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADownloadManager* cobj = (CrossApp::CADownloadManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADownloadManager_getDownloadHeader : Invalid Native Object");
    if (argc == 1) {
        ssize_t arg0 = 0;
        ok &= jsval_to_ssize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADownloadManager_getDownloadHeader : Error processing arguments");
        const char* ret = cobj->getDownloadHeader(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADownloadManager_getDownloadHeader : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CADownloadManager_pauseDownload(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADownloadManager* cobj = (CrossApp::CADownloadManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADownloadManager_pauseDownload : Invalid Native Object");
    if (argc == 1) {
        ssize_t arg0 = 0;
        ok &= jsval_to_ssize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADownloadManager_pauseDownload : Error processing arguments");
        cobj->pauseDownload(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADownloadManager_pauseDownload : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CADownloadManager_isFinished(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADownloadManager* cobj = (CrossApp::CADownloadManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADownloadManager_isFinished : Invalid Native Object");
    if (argc == 1) {
        ssize_t arg0 = 0;
        ok &= jsval_to_ssize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADownloadManager_isFinished : Error processing arguments");
        bool ret = cobj->isFinished(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADownloadManager_isFinished : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CADownloadManager_getDownloadAllTextTags(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADownloadManager* cobj = (CrossApp::CADownloadManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADownloadManager_getDownloadAllTextTags : Invalid Native Object");
    if (argc == 0) {
        std::vector<std::string, std::allocator<std::string> > ret = cobj->getDownloadAllTextTags();
        jsval jsret = JSVAL_NULL;
        jsret = std_vector_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADownloadManager_getDownloadAllTextTags : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CADownloadManager_getStartTime(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADownloadManager* cobj = (CrossApp::CADownloadManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CADownloadManager_getStartTime : Invalid Native Object");
    if (argc == 1) {
        ssize_t arg0 = 0;
        ok &= jsval_to_ssize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADownloadManager_getStartTime : Error processing arguments");
        const char* ret = cobj->getStartTime(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CADownloadManager_getStartTime : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CADownloadManager_destroyInstance(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CADownloadManager::destroyInstance();
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CADownloadManager_destroyInstance : wrong number of arguments");
    return false;
}
bool js_crossapp_CADownloadManager_getInstance(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CADownloadManager* ret = CrossApp::CADownloadManager::getInstance();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CADownloadManager>(cx, (CrossApp::CADownloadManager*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CADownloadManager_getInstance : wrong number of arguments");
    return false;
}

void js_CrossApp_CADownloadManager_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CADownloadManager)", obj);
}
void js_register_crossapp_CADownloadManager(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CADownloadManager_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CADownloadManager_class->name = "CADownloadManager";
    jsb_CrossApp_CADownloadManager_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CADownloadManager_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CADownloadManager_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CADownloadManager_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CADownloadManager_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CADownloadManager_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CADownloadManager_class->convert = JS_ConvertStub;
    jsb_CrossApp_CADownloadManager_class->finalize = js_CrossApp_CADownloadManager_finalize;
    jsb_CrossApp_CADownloadManager_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getDownloadMaxCount", js_crossapp_CADownloadManager_getDownloadMaxCount, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDownloadMaxCount", js_crossapp_CADownloadManager_setDownloadMaxCount, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getLocalFileSize", js_crossapp_CADownloadManager_getLocalFileSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("enqueueDownload", js_crossapp_CADownloadManager_enqueueDownload, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("clearOnSuccessDownloadAllRecord", js_crossapp_CADownloadManager_clearOnSuccessDownloadAllRecord, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("eraseDownload", js_crossapp_CADownloadManager_eraseDownload, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("enqueueDownloadEx", js_crossapp_CADownloadManager_enqueueDownloadEx, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isDownloading", js_crossapp_CADownloadManager_isDownloading, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("clearOnSuccessDownloadRecord", js_crossapp_CADownloadManager_clearOnSuccessDownloadRecord, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDownloadUrl", js_crossapp_CADownloadManager_getDownloadUrl, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("resumeDownload", js_crossapp_CADownloadManager_resumeDownload, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDownloadManagerDelegate", js_crossapp_CADownloadManager_getDownloadManagerDelegate, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTotalFileSize", js_crossapp_CADownloadManager_getTotalFileSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFilePath", js_crossapp_CADownloadManager_getFilePath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDownloadHeader", js_crossapp_CADownloadManager_getDownloadHeader, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("pauseDownload", js_crossapp_CADownloadManager_pauseDownload, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isFinished", js_crossapp_CADownloadManager_isFinished, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDownloadAllTextTags", js_crossapp_CADownloadManager_getDownloadAllTextTags, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getStartTime", js_crossapp_CADownloadManager_getStartTime, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("destroyInstance", js_crossapp_CADownloadManager_destroyInstance, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getInstance", js_crossapp_CADownloadManager_getInstance, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CADownloadManager_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CADownloadManager_class,
        dummy_constructor<CrossApp::CADownloadManager>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CADownloadManager", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CADownloadManager> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CADownloadManager_class;
        p->proto = jsb_CrossApp_CADownloadManager_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CATextField_class;
JSObject *jsb_CrossApp_CATextField_prototype;

bool js_crossapp_CATextField_getFontSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_getFontSize : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getFontSize();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_getFontSize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextField_setKeyboardType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_setKeyboardType : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATextField::KeyboardType arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_setKeyboardType : Error processing arguments");
        cobj->setKeyboardType(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_setKeyboardType : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextField_onShouldBeginEditing(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_onShouldBeginEditing : Invalid Native Object");
    if (argc == 1) {
        std::function<bool ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> bool {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            bool ret;
		            ret = JS::ToBoolean(rval);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_onShouldBeginEditing : Error processing arguments");
        cobj->onShouldBeginEditing(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_onShouldBeginEditing : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextField_getText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_getText : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getText();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_getText : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextField_setClearButtonMode(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_setClearButtonMode : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATextField::ClearButtonMode arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_setClearButtonMode : Error processing arguments");
        cobj->setClearButtonMode(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_setClearButtonMode : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextField_getTextColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_getTextColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getTextColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_getTextColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextField_getKeyboardType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_getKeyboardType : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getKeyboardType();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_getKeyboardType : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextField_isSecureTextEntry(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_isSecureTextEntry : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isSecureTextEntry();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_isSecureTextEntry : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextField_getAlign(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_getAlign : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getAlign();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_getAlign : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextField_setAlign(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_setAlign : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATextField::Align arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_setAlign : Error processing arguments");
        cobj->setAlign(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_setAlign : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextField_setMarginImageLeft(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_setMarginImageLeft : Invalid Native Object");
    if (argc == 2) {
        CrossApp::DSize arg0;
        std::string arg1;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_setMarginImageLeft : Error processing arguments");
        cobj->setMarginImageLeft(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_setMarginImageLeft : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CATextField_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextField_setMarginRight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_setMarginRight : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_setMarginRight : Error processing arguments");
        cobj->setMarginRight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_setMarginRight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextField_getClearButtonMode(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_getClearButtonMode : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getClearButtonMode();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_getClearButtonMode : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextField_onShouldReturn(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_onShouldReturn : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_onShouldReturn : Error processing arguments");
        cobj->onShouldReturn(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_onShouldReturn : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextField_onShouldEndEditing(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_onShouldEndEditing : Invalid Native Object");
    if (argc == 1) {
        std::function<bool ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> bool {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            bool ret;
		            ret = JS::ToBoolean(rval);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_onShouldEndEditing : Error processing arguments");
        cobj->onShouldEndEditing(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_onShouldEndEditing : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextField_getReturnType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_getReturnType : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getReturnType();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_getReturnType : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextField_getPlaceHolderText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_getPlaceHolderText : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getPlaceHolderText();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_getPlaceHolderText : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextField_setAllowkeyBoardHide(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_setAllowkeyBoardHide : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_setAllowkeyBoardHide : Error processing arguments");
        cobj->setAllowkeyBoardHide(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_setAllowkeyBoardHide : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextField_onShouldChangeCharacters(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_onShouldChangeCharacters : Invalid Native Object");
    if (argc == 1) {
        std::function<bool (long, long, const std::basic_string<char> &)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](long larg0, long larg1, const std::basic_string<char> & larg2) -> bool {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[3];
		            largv[0] = long_to_jsval(cx, larg0);
		            largv[1] = long_to_jsval(cx, larg1);
		            largv[2] = std_string_to_jsval(cx, larg2);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(3, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            bool ret;
		            ret = JS::ToBoolean(rval);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_onShouldChangeCharacters : Error processing arguments");
        cobj->onShouldChangeCharacters(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_onShouldChangeCharacters : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextField_getPlaceHolderColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_getPlaceHolderColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getPlaceHolderColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_getPlaceHolderColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextField_setPlaceHolderText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_setPlaceHolderText : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_setPlaceHolderText : Error processing arguments");
        cobj->setPlaceHolderText(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_setPlaceHolderText : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextField_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_setBackgroundImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_setBackgroundImage : Error processing arguments");
        cobj->setBackgroundImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_setBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextField_getMarginRight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_getMarginRight : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getMarginRight();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_getMarginRight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextField_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextField_setMarginLeft(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_setMarginLeft : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_setMarginLeft : Error processing arguments");
        cobj->setMarginLeft(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_setMarginLeft : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextField_setFontSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_setFontSize : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_setFontSize : Error processing arguments");
        cobj->setFontSize(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_setFontSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextField_setPlaceHolderColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_setPlaceHolderColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_setPlaceHolderColor : Error processing arguments");
        cobj->setPlaceHolderColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_setPlaceHolderColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextField_setTextColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_setTextColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_setTextColor : Error processing arguments");
        cobj->setTextColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_setTextColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextField_setReturnType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_setReturnType : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATextField::ReturnType arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_setReturnType : Error processing arguments");
        cobj->setReturnType(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_setReturnType : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextField_getMaxLength(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_getMaxLength : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getMaxLength();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_getMaxLength : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextField_resignFirstResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_resignFirstResponder : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->resignFirstResponder();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_resignFirstResponder : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextField_setText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_setText : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_setText : Error processing arguments");
        cobj->setText(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_setText : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextField_setMarginImageRight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_setMarginImageRight : Invalid Native Object");
    if (argc == 2) {
        CrossApp::DSize arg0;
        std::string arg1;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_setMarginImageRight : Error processing arguments");
        cobj->setMarginImageRight(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_setMarginImageRight : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CATextField_onDidChangeText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_onDidChangeText : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_onDidChangeText : Error processing arguments");
        cobj->onDidChangeText(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_onDidChangeText : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextField_getMarginLeft(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_getMarginLeft : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getMarginLeft();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_getMarginLeft : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextField_setMaxLength(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_setMaxLength : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_setMaxLength : Error processing arguments");
        cobj->setMaxLength(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_setMaxLength : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextField_becomeFirstResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_becomeFirstResponder : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->becomeFirstResponder();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_becomeFirstResponder : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextField_setSecureTextEntry(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_setSecureTextEntry : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_setSecureTextEntry : Error processing arguments");
        cobj->setSecureTextEntry(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_setSecureTextEntry : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextField_onKeyBoardHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_onKeyBoardHeight : Invalid Native Object");
    if (argc == 1) {
        std::function<void (int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](int larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = int32_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_onKeyBoardHeight : Error processing arguments");
        cobj->onKeyBoardHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_onKeyBoardHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextField_isAllowkeyBoardHide(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_isAllowkeyBoardHide : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowkeyBoardHide();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_isAllowkeyBoardHide : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextField_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextField_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextField_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextField_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_createWithFrame : Error processing arguments");
        CrossApp::CATextField* ret = CrossApp::CATextField::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATextField>(cx, (CrossApp::CATextField*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CATextField_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CATextField_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_createWithLayout : Error processing arguments");
        CrossApp::CATextField* ret = CrossApp::CATextField::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATextField>(cx, (CrossApp::CATextField*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CATextField_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CATextField_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextField_createWithCenter : Error processing arguments");
        CrossApp::CATextField* ret = CrossApp::CATextField::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATextField>(cx, (CrossApp::CATextField*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CATextField_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CATextField_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CATextField* cobj = new (std::nothrow) CrossApp::CATextField();
    TypeTest<CrossApp::CATextField> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CATextField");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAControl_prototype;

void js_CrossApp_CATextField_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CATextField)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATextField *nobj = static_cast<CrossApp::CATextField *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CATextField(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATextField_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATextField_class->name = "CATextField";
    jsb_CrossApp_CATextField_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATextField_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATextField_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATextField_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATextField_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATextField_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATextField_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATextField_class->finalize = js_CrossApp_CATextField_finalize;
    jsb_CrossApp_CATextField_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getFontSize", js_crossapp_CATextField_getFontSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setKeyboardType", js_crossapp_CATextField_setKeyboardType, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onShouldBeginEditing", js_crossapp_CATextField_onShouldBeginEditing, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getText", js_crossapp_CATextField_getText, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setClearButtonMode", js_crossapp_CATextField_setClearButtonMode, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTextColor", js_crossapp_CATextField_getTextColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getKeyboardType", js_crossapp_CATextField_getKeyboardType, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isSecureTextEntry", js_crossapp_CATextField_isSecureTextEntry, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAlign", js_crossapp_CATextField_getAlign, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlign", js_crossapp_CATextField_setAlign, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMarginImageLeft", js_crossapp_CATextField_setMarginImageLeft, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CATextField_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMarginRight", js_crossapp_CATextField_setMarginRight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getClearButtonMode", js_crossapp_CATextField_getClearButtonMode, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onShouldReturn", js_crossapp_CATextField_onShouldReturn, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onShouldEndEditing", js_crossapp_CATextField_onShouldEndEditing, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getReturnType", js_crossapp_CATextField_getReturnType, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPlaceHolderText", js_crossapp_CATextField_getPlaceHolderText, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowkeyBoardHide", js_crossapp_CATextField_setAllowkeyBoardHide, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onShouldChangeCharacters", js_crossapp_CATextField_onShouldChangeCharacters, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPlaceHolderColor", js_crossapp_CATextField_getPlaceHolderColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPlaceHolderText", js_crossapp_CATextField_setPlaceHolderText, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundImage", js_crossapp_CATextField_setBackgroundImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMarginRight", js_crossapp_CATextField_getMarginRight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_crossapp_CATextField_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMarginLeft", js_crossapp_CATextField_setMarginLeft, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFontSize", js_crossapp_CATextField_setFontSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPlaceHolderColor", js_crossapp_CATextField_setPlaceHolderColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTextColor", js_crossapp_CATextField_setTextColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setReturnType", js_crossapp_CATextField_setReturnType, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMaxLength", js_crossapp_CATextField_getMaxLength, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("resignFirstResponder", js_crossapp_CATextField_resignFirstResponder, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setText", js_crossapp_CATextField_setText, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMarginImageRight", js_crossapp_CATextField_setMarginImageRight, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDidChangeText", js_crossapp_CATextField_onDidChangeText, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMarginLeft", js_crossapp_CATextField_getMarginLeft, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMaxLength", js_crossapp_CATextField_setMaxLength, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("becomeFirstResponder", js_crossapp_CATextField_becomeFirstResponder, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSecureTextEntry", js_crossapp_CATextField_setSecureTextEntry, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onKeyBoardHeight", js_crossapp_CATextField_onKeyBoardHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowkeyBoardHide", js_crossapp_CATextField_isAllowkeyBoardHide, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_crossapp_CATextField_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_crossapp_CATextField_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CATextField_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CATextField_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CATextField_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAControl_prototype),
        jsb_CrossApp_CATextField_class,
        js_crossapp_CATextField_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CATextField", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATextField> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATextField_class;
        p->proto = jsb_CrossApp_CATextField_prototype;
        p->parentProto = jsb_CrossApp_CAControl_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CATextView_class;
JSObject *jsb_CrossApp_CATextView_prototype;

bool js_crossapp_CATextView_getFontSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextView* cobj = (CrossApp::CATextView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextView_getFontSize : Invalid Native Object");
    if (argc == 0) {
        const int& ret = cobj->getFontSize();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextView_getFontSize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextView_onShouldBeginEditing(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextView* cobj = (CrossApp::CATextView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextView_onShouldBeginEditing : Invalid Native Object");
    if (argc == 1) {
        std::function<bool ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> bool {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            bool ret;
		            ret = JS::ToBoolean(rval);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextView_onShouldBeginEditing : Error processing arguments");
        cobj->onShouldBeginEditing(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextView_onShouldBeginEditing : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextView_getText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextView* cobj = (CrossApp::CATextView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextView_getText : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getText();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextView_getText : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextView_getTextColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextView* cobj = (CrossApp::CATextView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextView_getTextColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getTextColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextView_getTextColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextView_onShouldReturn(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextView* cobj = (CrossApp::CATextView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextView_onShouldReturn : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextView_onShouldReturn : Error processing arguments");
        cobj->onShouldReturn(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextView_onShouldReturn : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextView_onShouldEndEditing(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextView* cobj = (CrossApp::CATextView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextView_onShouldEndEditing : Invalid Native Object");
    if (argc == 1) {
        std::function<bool ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> bool {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            bool ret;
		            ret = JS::ToBoolean(rval);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextView_onShouldEndEditing : Error processing arguments");
        cobj->onShouldEndEditing(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextView_onShouldEndEditing : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextView_getReturnType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextView* cobj = (CrossApp::CATextView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextView_getReturnType : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getReturnType();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextView_getReturnType : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextView_onShouldChangeCharacters(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextView* cobj = (CrossApp::CATextView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextView_onShouldChangeCharacters : Invalid Native Object");
    if (argc == 1) {
        std::function<bool (long, long, const std::basic_string<char> &)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](long larg0, long larg1, const std::basic_string<char> & larg2) -> bool {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[3];
		            largv[0] = long_to_jsval(cx, larg0);
		            largv[1] = long_to_jsval(cx, larg1);
		            largv[2] = std_string_to_jsval(cx, larg2);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(3, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		            bool ret;
		            ret = JS::ToBoolean(rval);
		            return ret;
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextView_onShouldChangeCharacters : Error processing arguments");
        cobj->onShouldChangeCharacters(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextView_onShouldChangeCharacters : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextView_setAlign(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextView* cobj = (CrossApp::CATextView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextView_setAlign : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATextView::Align arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextView_setAlign : Error processing arguments");
        cobj->setAlign(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextView_setAlign : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextView_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextView* cobj = (CrossApp::CATextView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextView_setBackgroundImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextView_setBackgroundImage : Error processing arguments");
        cobj->setBackgroundImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextView_setBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextView* cobj = (CrossApp::CATextView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextView_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextView_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextView_setFontSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextView* cobj = (CrossApp::CATextView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextView_setFontSize : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextView_setFontSize : Error processing arguments");
        cobj->setFontSize(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextView_setFontSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextView_getAlign(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextView* cobj = (CrossApp::CATextView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextView_getAlign : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getAlign();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextView_getAlign : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextView_setTextColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextView* cobj = (CrossApp::CATextView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextView_setTextColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextView_setTextColor : Error processing arguments");
        cobj->setTextColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextView_setTextColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextView_setReturnType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextView* cobj = (CrossApp::CATextView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextView_setReturnType : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATextView::ReturnType arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextView_setReturnType : Error processing arguments");
        cobj->setReturnType(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextView_setReturnType : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextView_resignFirstResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextView* cobj = (CrossApp::CATextView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextView_resignFirstResponder : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->resignFirstResponder();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextView_resignFirstResponder : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextView_setText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextView* cobj = (CrossApp::CATextView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextView_setText : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextView_setText : Error processing arguments");
        cobj->setText(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextView_setText : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextView_onDidChangeText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextView* cobj = (CrossApp::CATextView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextView_onDidChangeText : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextView_onDidChangeText : Error processing arguments");
        cobj->onDidChangeText(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextView_onDidChangeText : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextView_becomeFirstResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextView* cobj = (CrossApp::CATextView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextView_becomeFirstResponder : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->becomeFirstResponder();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextView_becomeFirstResponder : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextView_onKeyBoardHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextView* cobj = (CrossApp::CATextView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextView_onKeyBoardHeight : Invalid Native Object");
    if (argc == 1) {
        std::function<void (int)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](int larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = int32_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextView_onKeyBoardHeight : Error processing arguments");
        cobj->onKeyBoardHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextView_onKeyBoardHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CATextView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextView* cobj = (CrossApp::CATextView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CATextView_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CATextView_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CATextView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextView_createWithFrame : Error processing arguments");
        CrossApp::CATextView* ret = CrossApp::CATextView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATextView>(cx, (CrossApp::CATextView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CATextView_createWithFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CATextView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DLayout arg0;
        ok &= jsval_to_dlayout(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextView_createWithLayout : Error processing arguments");
        CrossApp::CATextView* ret = CrossApp::CATextView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATextView>(cx, (CrossApp::CATextView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CATextView_createWithLayout : wrong number of arguments");
    return false;
}
bool js_crossapp_CATextView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CATextView_createWithCenter : Error processing arguments");
        CrossApp::CATextView* ret = CrossApp::CATextView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATextView>(cx, (CrossApp::CATextView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CATextView_createWithCenter : wrong number of arguments");
    return false;
}
bool js_crossapp_CATextView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CATextView* cobj = new (std::nothrow) CrossApp::CATextView();
    TypeTest<CrossApp::CATextView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CATextView");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAControl_prototype;

void js_CrossApp_CATextView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CATextView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATextView *nobj = static_cast<CrossApp::CATextView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CATextView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATextView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATextView_class->name = "CATextView";
    jsb_CrossApp_CATextView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATextView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATextView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATextView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATextView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATextView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATextView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATextView_class->finalize = js_CrossApp_CATextView_finalize;
    jsb_CrossApp_CATextView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getFontSize", js_crossapp_CATextView_getFontSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onShouldBeginEditing", js_crossapp_CATextView_onShouldBeginEditing, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getText", js_crossapp_CATextView_getText, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTextColor", js_crossapp_CATextView_getTextColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onShouldReturn", js_crossapp_CATextView_onShouldReturn, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onShouldEndEditing", js_crossapp_CATextView_onShouldEndEditing, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getReturnType", js_crossapp_CATextView_getReturnType, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onShouldChangeCharacters", js_crossapp_CATextView_onShouldChangeCharacters, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlign", js_crossapp_CATextView_setAlign, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundImage", js_crossapp_CATextView_setBackgroundImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_crossapp_CATextView_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFontSize", js_crossapp_CATextView_setFontSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAlign", js_crossapp_CATextView_getAlign, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTextColor", js_crossapp_CATextView_setTextColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setReturnType", js_crossapp_CATextView_setReturnType, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("resignFirstResponder", js_crossapp_CATextView_resignFirstResponder, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setText", js_crossapp_CATextView_setText, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDidChangeText", js_crossapp_CATextView_onDidChangeText, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("becomeFirstResponder", js_crossapp_CATextView_becomeFirstResponder, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onKeyBoardHeight", js_crossapp_CATextView_onKeyBoardHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_crossapp_CATextView_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_crossapp_CATextView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_crossapp_CATextView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_crossapp_CATextView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CATextView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAControl_prototype),
        jsb_CrossApp_CATextView_class,
        js_crossapp_CATextView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CATextView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATextView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATextView_class;
        p->proto = jsb_CrossApp_CATextView_prototype;
        p->parentProto = jsb_CrossApp_CAControl_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAFontProcesstor_class;
JSObject *jsb_CrossApp_CAFontProcesstor_prototype;

bool js_crossapp_CAFontProcesstor_heightForFont(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAFont arg0;
        ok &= jsval_to_cafont(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAFontProcesstor_heightForFont : Error processing arguments");
        double ret = CrossApp::CAFontProcesstor::heightForFont(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAFontProcesstor_heightForFont : wrong number of arguments");
    return false;
}
bool js_crossapp_CAFontProcesstor_imageForText(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 4) {
        std::string arg0;
        CrossApp::CAFont arg1;
        CrossApp::DSize arg2;
        CrossApp::CATextAlignment arg3;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_cafont(cx, args.get(1), &arg1);
        ok &= jsval_to_dsize(cx, args.get(2), &arg2);
        ok &= jsval_to_int32(cx, args.get(3), (int32_t *)&arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAFontProcesstor_imageForText : Error processing arguments");
        CrossApp::CAImage* ret = CrossApp::CAFontProcesstor::imageForText(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAFontProcesstor_imageForText : wrong number of arguments");
    return false;
}
bool js_crossapp_CAFontProcesstor_heightForTextAtWidth(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 3) {
        std::string arg0;
        CrossApp::CAFont arg1;
        double arg2 = 0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_cafont(cx, args.get(1), &arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAFontProcesstor_heightForTextAtWidth : Error processing arguments");
        double ret = CrossApp::CAFontProcesstor::heightForTextAtWidth(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAFontProcesstor_heightForTextAtWidth : wrong number of arguments");
    return false;
}
bool js_crossapp_CAFontProcesstor_widthForTextAtOneLine(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        std::string arg0;
        CrossApp::CAFont arg1;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_cafont(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAFontProcesstor_widthForTextAtOneLine : Error processing arguments");
        double ret = CrossApp::CAFontProcesstor::widthForTextAtOneLine(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAFontProcesstor_widthForTextAtOneLine : wrong number of arguments");
    return false;
}

void js_CrossApp_CAFontProcesstor_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAFontProcesstor)", obj);
}
void js_register_crossapp_CAFontProcesstor(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAFontProcesstor_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAFontProcesstor_class->name = "CAFontProcesstor";
    jsb_CrossApp_CAFontProcesstor_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAFontProcesstor_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAFontProcesstor_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAFontProcesstor_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAFontProcesstor_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAFontProcesstor_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAFontProcesstor_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAFontProcesstor_class->finalize = js_CrossApp_CAFontProcesstor_finalize;
    jsb_CrossApp_CAFontProcesstor_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("heightForFont", js_crossapp_CAFontProcesstor_heightForFont, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("imageForText", js_crossapp_CAFontProcesstor_imageForText, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("heightForTextAtWidth", js_crossapp_CAFontProcesstor_heightForTextAtWidth, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("widthForTextAtOneLine", js_crossapp_CAFontProcesstor_widthForTextAtOneLine, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAFontProcesstor_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CAFontProcesstor_class,
        dummy_constructor<CrossApp::CAFontProcesstor>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAFontProcesstor", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAFontProcesstor> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAFontProcesstor_class;
        p->proto = jsb_CrossApp_CAFontProcesstor_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAClipboard_class;
JSObject *jsb_CrossApp_CAClipboard_prototype;

bool js_crossapp_CAClipboard_setText(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAClipboard_setText : Error processing arguments");
        CrossApp::CAClipboard::setText(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAClipboard_setText : wrong number of arguments");
    return false;
}
bool js_crossapp_CAClipboard_getText(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        std::string ret = CrossApp::CAClipboard::getText();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAClipboard_getText : wrong number of arguments");
    return false;
}

void js_CrossApp_CAClipboard_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAClipboard)", obj);
}
void js_register_crossapp_CAClipboard(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAClipboard_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAClipboard_class->name = "CAClipboard";
    jsb_CrossApp_CAClipboard_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAClipboard_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAClipboard_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAClipboard_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAClipboard_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAClipboard_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAClipboard_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAClipboard_class->finalize = js_CrossApp_CAClipboard_finalize;
    jsb_CrossApp_CAClipboard_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("setText", js_crossapp_CAClipboard_setText, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getText", js_crossapp_CAClipboard_getText, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAClipboard_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CAClipboard_class,
        dummy_constructor<CrossApp::CAClipboard>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAClipboard", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAClipboard> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAClipboard_class;
        p->proto = jsb_CrossApp_CAClipboard_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAScanQRcode_class;
JSObject *jsb_CrossApp_CAScanQRcode_prototype;

bool js_crossapp_CAScanQRcode_showScanQRcode(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::function<void (const std::basic_string<char> &)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](const std::basic_string<char> & larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = std_string_to_jsval(cx, larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAScanQRcode_showScanQRcode : Error processing arguments");
        CrossApp::CAScanQRcode::showScanQRcode(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAScanQRcode_showScanQRcode : wrong number of arguments");
    return false;
}

void js_CrossApp_CAScanQRcode_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAScanQRcode)", obj);
}
void js_register_crossapp_CAScanQRcode(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAScanQRcode_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAScanQRcode_class->name = "CAScanQRcode";
    jsb_CrossApp_CAScanQRcode_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAScanQRcode_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAScanQRcode_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAScanQRcode_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAScanQRcode_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAScanQRcode_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAScanQRcode_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAScanQRcode_class->finalize = js_CrossApp_CAScanQRcode_finalize;
    jsb_CrossApp_CAScanQRcode_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("showScanQRcode", js_crossapp_CAScanQRcode_showScanQRcode, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAScanQRcode_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CAScanQRcode_class,
        dummy_constructor<CrossApp::CAScanQRcode>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAScanQRcode", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAScanQRcode> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAScanQRcode_class;
        p->proto = jsb_CrossApp_CAScanQRcode_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CADevice_class;
JSObject *jsb_CrossApp_CADevice_prototype;

bool js_crossapp_CADevice_getVolume(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CADevice::VolumeData arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADevice_getVolume : Error processing arguments");
        double ret = CrossApp::CADevice::getVolume(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CADevice_getVolume : wrong number of arguments");
    return false;
}
bool js_crossapp_CADevice_openUrl(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADevice_openUrl : Error processing arguments");
        CrossApp::CADevice::openUrl(arg0);
        args.rval().setUndefined();
        return true;
    }
    if (argc == 2) {
        std::string arg0;
        std::function<void (bool)> arg1;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        do {
		    if(JS_TypeOfValue(cx, args.get(1)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(1)));
		        auto lambda = [=, &ok](bool larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = BOOLEAN_TO_JSVAL(larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg1 = lambda;
		    }
		    else
		    {
		        arg1 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADevice_openUrl : Error processing arguments");
        CrossApp::CADevice::openUrl(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CADevice_openUrl : wrong number of arguments");
    return false;
}
bool js_crossapp_CADevice_getAppVersion(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        const std::string& ret = CrossApp::CADevice::getAppVersion();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CADevice_getAppVersion : wrong number of arguments");
    return false;
}
bool js_crossapp_CADevice_getScreenBrightness(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        double ret = CrossApp::CADevice::getScreenBrightness();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CADevice_getScreenBrightness : wrong number of arguments");
    return false;
}
bool js_crossapp_CADevice_getNetWorkType(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        int ret = (int)CrossApp::CADevice::getNetWorkType();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CADevice_getNetWorkType : wrong number of arguments");
    return false;
}
bool js_crossapp_CADevice_getSystemVersion(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        const CrossApp::CAValueMap& ret = CrossApp::CADevice::getSystemVersion();
        jsval jsret = JSVAL_NULL;
        jsret = cavaluemap_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CADevice_getSystemVersion : wrong number of arguments");
    return false;
}
bool js_crossapp_CADevice_getBatteryLevel(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        double ret = CrossApp::CADevice::getBatteryLevel();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CADevice_getBatteryLevel : wrong number of arguments");
    return false;
}
bool js_crossapp_CADevice_setIdleTimerDisabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADevice_setIdleTimerDisabled : Error processing arguments");
        CrossApp::CADevice::setIdleTimerDisabled(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CADevice_setIdleTimerDisabled : wrong number of arguments");
    return false;
}
bool js_crossapp_CADevice_sendLocalNotification(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 3) {
        const char* arg0 = nullptr;
        const char* arg1 = nullptr;
        int arg2 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        std::string arg1_tmp; ok &= jsval_to_std_string(cx, args.get(1), &arg1_tmp); arg1 = arg1_tmp.c_str();
        ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADevice_sendLocalNotification : Error processing arguments");
        CrossApp::CADevice::sendLocalNotification(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CADevice_sendLocalNotification : wrong number of arguments");
    return false;
}
bool js_crossapp_CADevice_setScreenBrightness(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADevice_setScreenBrightness : Error processing arguments");
        CrossApp::CADevice::setScreenBrightness(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CADevice_setScreenBrightness : wrong number of arguments");
    return false;
}
bool js_crossapp_CADevice_setVolume(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        double arg0 = 0;
        CrossApp::CADevice::VolumeData arg1;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CADevice_setVolume : Error processing arguments");
        CrossApp::CADevice::setVolume(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CADevice_setVolume : wrong number of arguments");
    return false;
}
bool js_crossapp_CADevice_isNetWorkAvailble(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        bool ret = CrossApp::CADevice::isNetWorkAvailble();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CADevice_isNetWorkAvailble : wrong number of arguments");
    return false;
}

void js_CrossApp_CADevice_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CADevice)", obj);
}
void js_register_crossapp_CADevice(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CADevice_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CADevice_class->name = "CADevice";
    jsb_CrossApp_CADevice_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CADevice_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CADevice_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CADevice_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CADevice_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CADevice_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CADevice_class->convert = JS_ConvertStub;
    jsb_CrossApp_CADevice_class->finalize = js_CrossApp_CADevice_finalize;
    jsb_CrossApp_CADevice_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("getVolume", js_crossapp_CADevice_getVolume, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("openUrl", js_crossapp_CADevice_openUrl, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAppVersion", js_crossapp_CADevice_getAppVersion, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getScreenBrightness", js_crossapp_CADevice_getScreenBrightness, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNetWorkType", js_crossapp_CADevice_getNetWorkType, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSystemVersion", js_crossapp_CADevice_getSystemVersion, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBatteryLevel", js_crossapp_CADevice_getBatteryLevel, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setIdleTimerDisabled", js_crossapp_CADevice_setIdleTimerDisabled, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("sendLocalNotification", js_crossapp_CADevice_sendLocalNotification, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setScreenBrightness", js_crossapp_CADevice_setScreenBrightness, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setVolume", js_crossapp_CADevice_setVolume, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isNetWorkAvailble", js_crossapp_CADevice_isNetWorkAvailble, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CADevice_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CADevice_class,
        dummy_constructor<CrossApp::CADevice>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CADevice", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CADevice> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CADevice_class;
        p->proto = jsb_CrossApp_CADevice_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAMotionManager_class;
JSObject *jsb_CrossApp_CAMotionManager_prototype;

bool js_crossapp_CAMotionManager_stopGyroscope(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAMotionManager* cobj = (CrossApp::CAMotionManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAMotionManager_stopGyroscope : Invalid Native Object");
    if (argc == 0) {
        cobj->stopGyroscope();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAMotionManager_stopGyroscope : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAMotionManager_setGyroInterval(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAMotionManager* cobj = (CrossApp::CAMotionManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAMotionManager_setGyroInterval : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAMotionManager_setGyroInterval : Error processing arguments");
        cobj->setGyroInterval(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAMotionManager_setGyroInterval : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAMotionManager_getInstance(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAMotionManager* ret = CrossApp::CAMotionManager::getInstance();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAMotionManager>(cx, (CrossApp::CAMotionManager*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAMotionManager_getInstance : wrong number of arguments");
    return false;
}
bool js_crossapp_CAMotionManager_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAMotionManager* cobj = new (std::nothrow) CrossApp::CAMotionManager();
    TypeTest<CrossApp::CAMotionManager> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAMotionManager");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAMotionManager_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAMotionManager)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAMotionManager *nobj = static_cast<CrossApp::CAMotionManager *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAMotionManager(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAMotionManager_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAMotionManager_class->name = "CAMotionManager";
    jsb_CrossApp_CAMotionManager_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAMotionManager_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAMotionManager_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAMotionManager_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAMotionManager_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAMotionManager_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAMotionManager_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAMotionManager_class->finalize = js_CrossApp_CAMotionManager_finalize;
    jsb_CrossApp_CAMotionManager_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("stopGyroscope", js_crossapp_CAMotionManager_stopGyroscope, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setGyroInterval", js_crossapp_CAMotionManager_setGyroInterval, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("getInstance", js_crossapp_CAMotionManager_getInstance, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAMotionManager_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAMotionManager_class,
        js_crossapp_CAMotionManager_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAMotionManager", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAMotionManager> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAMotionManager_class;
        p->proto = jsb_CrossApp_CAMotionManager_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAImagePickerController_class;
JSObject *jsb_CrossApp_CAImagePickerController_prototype;

bool js_crossapp_CAImagePickerController_writeImageToPhoto(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImagePickerController* cobj = (CrossApp::CAImagePickerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImagePickerController_writeImageToPhoto : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAImage* arg0 = nullptr;
        std::function<void (bool)> arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        do {
		    if(JS_TypeOfValue(cx, args.get(1)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(1)));
		        auto lambda = [=, &ok](bool larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = BOOLEAN_TO_JSVAL(larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg1 = lambda;
		    }
		    else
		    {
		        arg1 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImagePickerController_writeImageToPhoto : Error processing arguments");
        cobj->writeImageToPhoto(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }
    if (argc == 3) {
        CrossApp::CAImage* arg0 = nullptr;
        std::function<void (bool)> arg1;
        std::string arg2;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        do {
		    if(JS_TypeOfValue(cx, args.get(1)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(1)));
		        auto lambda = [=, &ok](bool larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = BOOLEAN_TO_JSVAL(larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg1 = lambda;
		    }
		    else
		    {
		        arg1 = nullptr;
		    }
		} while(0)
		;
        ok &= jsval_to_std_string(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImagePickerController_writeImageToPhoto : Error processing arguments");
        cobj->writeImageToPhoto(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImagePickerController_writeImageToPhoto : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CAImagePickerController_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImagePickerController* cobj = (CrossApp::CAImagePickerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImagePickerController_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImagePickerController_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CAImagePickerController_open(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImagePickerController* cobj = (CrossApp::CAImagePickerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CAImagePickerController_open : Invalid Native Object");
    if (argc == 1) {
        std::function<void (CrossApp::CAImage *)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::CAImage* larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            do {
		            if (larg0) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)larg0);
		                largv[0] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[0] = JSVAL_NULL;
		            }
		        } while (0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImagePickerController_open : Error processing arguments");
        cobj->open(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CAImagePickerController_open : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CAImagePickerController_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAImagePickerController::SourceType arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImagePickerController_create : Error processing arguments");
        CrossApp::CAImagePickerController* ret = CrossApp::CAImagePickerController::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImagePickerController>(cx, (CrossApp::CAImagePickerController*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAImagePickerController_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CAImagePickerController_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAImagePickerController::SourceType arg0;
    ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
    JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CAImagePickerController_constructor : Error processing arguments");
    CrossApp::CAImagePickerController* cobj = new (std::nothrow) CrossApp::CAImagePickerController(arg0);
    TypeTest<CrossApp::CAImagePickerController> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CAImagePickerController");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAImagePickerController_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAImagePickerController)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAImagePickerController *nobj = static_cast<CrossApp::CAImagePickerController *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CAImagePickerController(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAImagePickerController_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAImagePickerController_class->name = "CAImagePickerController";
    jsb_CrossApp_CAImagePickerController_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAImagePickerController_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAImagePickerController_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAImagePickerController_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAImagePickerController_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAImagePickerController_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAImagePickerController_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAImagePickerController_class->finalize = js_CrossApp_CAImagePickerController_finalize;
    jsb_CrossApp_CAImagePickerController_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("writeImageToPhoto", js_crossapp_CAImagePickerController_writeImageToPhoto, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CAImagePickerController_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("open", js_crossapp_CAImagePickerController_open, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CAImagePickerController_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAImagePickerController_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAImagePickerController_class,
        js_crossapp_CAImagePickerController_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAImagePickerController", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAImagePickerController> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAImagePickerController_class;
        p->proto = jsb_CrossApp_CAImagePickerController_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CAAddressBook_class;
JSObject *jsb_CrossApp_CAAddressBook_prototype;

bool js_crossapp_CAAddressBook_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAAddressBook* ret = CrossApp::CAAddressBook::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAAddressBook>(cx, (CrossApp::CAAddressBook*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CAAddressBook_create : wrong number of arguments");
    return false;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAAddressBook_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CAAddressBook)", obj);
}
void js_register_crossapp_CAAddressBook(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAAddressBook_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAAddressBook_class->name = "CAAddressBook";
    jsb_CrossApp_CAAddressBook_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAAddressBook_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAAddressBook_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAAddressBook_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAAddressBook_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAAddressBook_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAAddressBook_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAAddressBook_class->finalize = js_CrossApp_CAAddressBook_finalize;
    jsb_CrossApp_CAAddressBook_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CAAddressBook_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAAddressBook_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAAddressBook_class,
        dummy_constructor<CrossApp::CAAddressBook>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CAAddressBook", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAAddressBook> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAAddressBook_class;
        p->proto = jsb_CrossApp_CAAddressBook_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CGSprite_class;
JSObject *jsb_CrossApp_CGSprite_prototype;

bool js_crossapp_CGSprite_stopActionsByFlags(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_stopActionsByFlags : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_stopActionsByFlags : Error processing arguments");
        cobj->stopActionsByFlags(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_stopActionsByFlags : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSprite_setNormalizedPosition(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_setNormalizedPosition : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DPoint arg0;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_setNormalizedPosition : Error processing arguments");
        cobj->setNormalizedPosition(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_setNormalizedPosition : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSprite_getActionByTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_getActionByTag : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_getActionByTag : Error processing arguments");
        CrossApp::Action* ret = cobj->getActionByTag(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Action>(cx, (CrossApp::Action*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_getActionByTag : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSprite_runAction(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_runAction : Invalid Native Object");
    if (argc == 1) {
        CrossApp::Action* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::Action*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_runAction : Error processing arguments");
        CrossApp::Action* ret = cobj->runAction(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Action>(cx, (CrossApp::Action*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_runAction : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSprite_initWithImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CGSprite* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_initWithImage : Invalid Native Object");
    do {
        if (argc == 2) {
            CrossApp::CAImage* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::DRect arg1;
            ok &= jsval_to_drect(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            bool ret = cobj->initWithImage(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            jsret = BOOLEAN_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 1) {
            CrossApp::CAImage* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            bool ret = cobj->initWithImage(arg0);
            jsval jsret = JSVAL_NULL;
            jsret = BOOLEAN_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 3) {
            CrossApp::CAImage* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::DRect arg1;
            ok &= jsval_to_drect(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            bool arg2;
            arg2 = JS::ToBoolean(args.get(2));
            bool ret = cobj->initWithImage(arg0, arg1, arg2);
            jsval jsret = JSVAL_NULL;
            jsret = BOOLEAN_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CGSprite_initWithImage : wrong number of arguments");
    return false;
}
bool js_crossapp_CGSprite_getNumberOfRunningActions(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_getNumberOfRunningActions : Invalid Native Object");
    if (argc == 0) {
        unsigned long ret = cobj->getNumberOfRunningActions();
        jsval jsret = JSVAL_NULL;
        jsret = ulong_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_getNumberOfRunningActions : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSprite_getOffsetPosition(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_getOffsetPosition : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DPoint& ret = cobj->getOffsetPosition();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_getOffsetPosition : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSprite_getScaleZ(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_getScaleZ : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getScaleZ();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_getScaleZ : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSprite_getRotationQuat(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_getRotationQuat : Invalid Native Object");
    if (argc == 0) {
        CrossApp::Quaternion ret = cobj->getRotationQuat();
        jsval jsret = JSVAL_NULL;
        jsret = quaternion_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_getRotationQuat : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSprite_initWithSpriteFrameName(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_initWithSpriteFrameName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_initWithSpriteFrameName : Error processing arguments");
        bool ret = cobj->initWithSpriteFrameName(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_initWithSpriteFrameName : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSprite_getRotation3D(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_getRotation3D : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DPoint3D ret = cobj->getRotation3D();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint3d_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_getRotation3D : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSprite_isFrameDisplayed(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_isFrameDisplayed : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CGSpriteFrame* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CGSpriteFrame*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_isFrameDisplayed : Error processing arguments");
        bool ret = cobj->isFrameDisplayed(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_isFrameDisplayed : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSprite_getContentSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_getContentSize : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DSize& ret = cobj->getContentSize();
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_getContentSize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSprite_stopAllActionsByTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_stopAllActionsByTag : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_stopAllActionsByTag : Error processing arguments");
        cobj->stopAllActionsByTag(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_stopAllActionsByTag : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSprite_stopAllActions(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_stopAllActions : Invalid Native Object");
    if (argc == 0) {
        cobj->stopAllActions();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_stopAllActions : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSprite_setContentSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_setContentSize : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_setContentSize : Error processing arguments");
        cobj->setContentSize(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_setContentSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSprite_setSpriteFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_setSpriteFrame : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CGSpriteFrame* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CGSpriteFrame*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_setSpriteFrame : Error processing arguments");
        cobj->setSpriteFrame(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_setSpriteFrame : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSprite_setScaleZ(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_setScaleZ : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_setScaleZ : Error processing arguments");
        cobj->setScaleZ(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_setScaleZ : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSprite_setDisplayFrameWithAnimationName(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_setDisplayFrameWithAnimationName : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        int arg1 = 0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_setDisplayFrameWithAnimationName : Error processing arguments");
        cobj->setDisplayFrameWithAnimationName(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_setDisplayFrameWithAnimationName : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CGSprite_setPosition3D(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_setPosition3D : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DPoint3D arg0;
        ok &= jsval_to_dpoint3d(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_setPosition3D : Error processing arguments");
        cobj->setPosition3D(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_setPosition3D : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSprite_getSpriteFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_getSpriteFrame : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CGSpriteFrame* ret = cobj->getSpriteFrame();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CGSpriteFrame>(cx, (CrossApp::CGSpriteFrame*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_getSpriteFrame : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSprite_setPositionZ(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_setPositionZ : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_setPositionZ : Error processing arguments");
        cobj->setPositionZ(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_setPositionZ : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSprite_boundingBox(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_boundingBox : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DRect ret = cobj->boundingBox();
        jsval jsret = JSVAL_NULL;
        jsret = drect_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_boundingBox : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSprite_setImageRect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_setImageRect : Invalid Native Object");
    if (argc == 3) {
        CrossApp::DRect arg0;
        bool arg1;
        CrossApp::DSize arg2;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        arg1 = JS::ToBoolean(args.get(1));
        ok &= jsval_to_dsize(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_setImageRect : Error processing arguments");
        cobj->setImageRect(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_setImageRect : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_crossapp_CGSprite_setPosition(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_setPosition : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DPoint arg0;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_setPosition : Error processing arguments");
        cobj->setPosition(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_setPosition : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSprite_stopActionByTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_stopActionByTag : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_stopActionByTag : Error processing arguments");
        cobj->stopActionByTag(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_stopActionByTag : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSprite_getPosition(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_getPosition : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DPoint& ret = cobj->getPosition();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_getPosition : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSprite_getNormalizedPosition(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_getNormalizedPosition : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DPoint& ret = cobj->getNormalizedPosition();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_getNormalizedPosition : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSprite_initWithFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CGSprite* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_initWithFile : Invalid Native Object");
    do {
        if (argc == 2) {
            std::string arg0;
            ok &= jsval_to_std_string(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::DRect arg1;
            ok &= jsval_to_drect(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            bool ret = cobj->initWithFile(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            jsret = BOOLEAN_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 1) {
            std::string arg0;
            ok &= jsval_to_std_string(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            bool ret = cobj->initWithFile(arg0);
            jsval jsret = JSVAL_NULL;
            jsret = BOOLEAN_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CGSprite_initWithFile : wrong number of arguments");
    return false;
}
bool js_crossapp_CGSprite_setRotation3D(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_setRotation3D : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DPoint3D arg0;
        ok &= jsval_to_dpoint3d(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_setRotation3D : Error processing arguments");
        cobj->setRotation3D(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_setRotation3D : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSprite_setPositionY(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_setPositionY : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_setPositionY : Error processing arguments");
        cobj->setPositionY(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_setPositionY : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSprite_setImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_setImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_setImage : Error processing arguments");
        cobj->setImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_setImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSprite_getPositionZ(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_getPositionZ : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getPositionZ();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_getPositionZ : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSprite_getPositionY(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_getPositionY : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getPositionY();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_getPositionY : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSprite_setPositionX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_setPositionX : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_setPositionX : Error processing arguments");
        cobj->setPositionX(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_setPositionX : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSprite_getPosition3D(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_getPosition3D : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DPoint3D ret = cobj->getPosition3D();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint3d_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_getPosition3D : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSprite_getPositionX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_getPositionX : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getPositionX();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_getPositionX : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSprite_initWithSpriteFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_initWithSpriteFrame : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CGSpriteFrame* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CGSpriteFrame*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_initWithSpriteFrame : Error processing arguments");
        bool ret = cobj->initWithSpriteFrame(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_initWithSpriteFrame : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSprite_setRotationQuat(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_setRotationQuat : Invalid Native Object");
    if (argc == 1) {
        CrossApp::Quaternion arg0;
        ok &= jsval_to_quaternion(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_setRotationQuat : Error processing arguments");
        cobj->setRotationQuat(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_setRotationQuat : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSprite_getImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_getImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_getImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSprite_stopAction(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSprite* cobj = (CrossApp::CGSprite *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSprite_stopAction : Invalid Native Object");
    if (argc == 1) {
        CrossApp::Action* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::Action*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_stopAction : Error processing arguments");
        cobj->stopAction(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSprite_stopAction : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSprite_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 1) {
            std::string arg0;
            ok &= jsval_to_std_string(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::CGSprite* ret = CrossApp::CGSprite::create(arg0);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CGSprite>(cx, (CrossApp::CGSprite*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 0) {
            CrossApp::CGSprite* ret = CrossApp::CGSprite::create();
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CGSprite>(cx, (CrossApp::CGSprite*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 2) {
            std::string arg0;
            ok &= jsval_to_std_string(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::DRect arg1;
            ok &= jsval_to_drect(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CGSprite* ret = CrossApp::CGSprite::create(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CGSprite>(cx, (CrossApp::CGSprite*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_crossapp_CGSprite_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CGSprite_createWithImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 2) {
            CrossApp::CAImage* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::DRect arg1;
            ok &= jsval_to_drect(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CGSprite* ret = CrossApp::CGSprite::createWithImage(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CGSprite>(cx, (CrossApp::CGSprite*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 1) {
            CrossApp::CAImage* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::CGSprite* ret = CrossApp::CGSprite::createWithImage(arg0);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CGSprite>(cx, (CrossApp::CGSprite*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_crossapp_CGSprite_createWithImage : wrong number of arguments");
    return false;
}
bool js_crossapp_CGSprite_createWithSpriteFrameName(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_createWithSpriteFrameName : Error processing arguments");
        CrossApp::CGSprite* ret = CrossApp::CGSprite::createWithSpriteFrameName(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CGSprite>(cx, (CrossApp::CGSprite*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CGSprite_createWithSpriteFrameName : wrong number of arguments");
    return false;
}
bool js_crossapp_CGSprite_createWithSpriteFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CGSpriteFrame* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CGSpriteFrame*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSprite_createWithSpriteFrame : Error processing arguments");
        CrossApp::CGSprite* ret = CrossApp::CGSprite::createWithSpriteFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CGSprite>(cx, (CrossApp::CGSprite*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CGSprite_createWithSpriteFrame : wrong number of arguments");
    return false;
}
bool js_crossapp_CGSprite_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CGSprite* cobj = new (std::nothrow) CrossApp::CGSprite();
    TypeTest<CrossApp::CGSprite> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CGSprite");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_CGSprite_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::CGSprite *nobj = new (std::nothrow) CrossApp::CGSprite();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CGSprite");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CGSprite_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CGSprite)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CGSprite *nobj = static_cast<CrossApp::CGSprite *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_CGSprite(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CGSprite_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CGSprite_class->name = "CGSprite";
    jsb_CrossApp_CGSprite_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CGSprite_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CGSprite_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CGSprite_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CGSprite_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CGSprite_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CGSprite_class->convert = JS_ConvertStub;
    jsb_CrossApp_CGSprite_class->finalize = js_CrossApp_CGSprite_finalize;
    jsb_CrossApp_CGSprite_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("stopActionsByFlags", js_crossapp_CGSprite_stopActionsByFlags, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setNormalizedPosition", js_crossapp_CGSprite_setNormalizedPosition, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getActionByTag", js_crossapp_CGSprite_getActionByTag, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("runAction", js_crossapp_CGSprite_runAction, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithImage", js_crossapp_CGSprite_initWithImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNumberOfRunningActions", js_crossapp_CGSprite_getNumberOfRunningActions, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getOffsetPosition", js_crossapp_CGSprite_getOffsetPosition, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getScaleZ", js_crossapp_CGSprite_getScaleZ, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRotationQuat", js_crossapp_CGSprite_getRotationQuat, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithSpriteFrameName", js_crossapp_CGSprite_initWithSpriteFrameName, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRotation3D", js_crossapp_CGSprite_getRotation3D, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isFrameDisplayed", js_crossapp_CGSprite_isFrameDisplayed, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getContentSize", js_crossapp_CGSprite_getContentSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("stopAllActionsByTag", js_crossapp_CGSprite_stopAllActionsByTag, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("stopAllActions", js_crossapp_CGSprite_stopAllActions, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setContentSize", js_crossapp_CGSprite_setContentSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSpriteFrame", js_crossapp_CGSprite_setSpriteFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setScaleZ", js_crossapp_CGSprite_setScaleZ, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDisplayFrameWithAnimationName", js_crossapp_CGSprite_setDisplayFrameWithAnimationName, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPosition3D", js_crossapp_CGSprite_setPosition3D, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSpriteFrame", js_crossapp_CGSprite_getSpriteFrame, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPositionZ", js_crossapp_CGSprite_setPositionZ, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("boundingBox", js_crossapp_CGSprite_boundingBox, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageRect", js_crossapp_CGSprite_setImageRect, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPosition", js_crossapp_CGSprite_setPosition, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("stopActionByTag", js_crossapp_CGSprite_stopActionByTag, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPosition", js_crossapp_CGSprite_getPosition, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNormalizedPosition", js_crossapp_CGSprite_getNormalizedPosition, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithFile", js_crossapp_CGSprite_initWithFile, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setRotation3D", js_crossapp_CGSprite_setRotation3D, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPositionY", js_crossapp_CGSprite_setPositionY, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImage", js_crossapp_CGSprite_setImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPositionZ", js_crossapp_CGSprite_getPositionZ, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPositionY", js_crossapp_CGSprite_getPositionY, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPositionX", js_crossapp_CGSprite_setPositionX, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPosition3D", js_crossapp_CGSprite_getPosition3D, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPositionX", js_crossapp_CGSprite_getPositionX, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithSpriteFrame", js_crossapp_CGSprite_initWithSpriteFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setRotationQuat", js_crossapp_CGSprite_setRotationQuat, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImage", js_crossapp_CGSprite_getImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("stopAction", js_crossapp_CGSprite_stopAction, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_CGSprite_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CGSprite_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithImage", js_crossapp_CGSprite_createWithImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithSpriteFrameName", js_crossapp_CGSprite_createWithSpriteFrameName, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithSpriteFrame", js_crossapp_CGSprite_createWithSpriteFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CGSprite_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CGSprite_class,
        js_crossapp_CGSprite_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CGSprite", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CGSprite> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CGSprite_class;
        p->proto = jsb_CrossApp_CGSprite_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.CGSprite.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_CGSpriteFrame_class;
JSObject *jsb_CrossApp_CGSpriteFrame_prototype;

bool js_crossapp_CGSpriteFrame_setRotated(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSpriteFrame* cobj = (CrossApp::CGSpriteFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrame_setRotated : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSpriteFrame_setRotated : Error processing arguments");
        cobj->setRotated(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSpriteFrame_setRotated : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSpriteFrame_setAnchorPoint(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSpriteFrame* cobj = (CrossApp::CGSpriteFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrame_setAnchorPoint : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DPoint arg0;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSpriteFrame_setAnchorPoint : Error processing arguments");
        cobj->setAnchorPoint(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSpriteFrame_setAnchorPoint : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSpriteFrame_getOffset(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSpriteFrame* cobj = (CrossApp::CGSpriteFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrame_getOffset : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DPoint& ret = cobj->getOffset();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSpriteFrame_getOffset : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSpriteFrame_getOriginalSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSpriteFrame* cobj = (CrossApp::CGSpriteFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrame_getOriginalSize : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DSize& ret = cobj->getOriginalSize();
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSpriteFrame_getOriginalSize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSpriteFrame_getRect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSpriteFrame* cobj = (CrossApp::CGSpriteFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrame_getRect : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DRect& ret = cobj->getRect();
        jsval jsret = JSVAL_NULL;
        jsret = drect_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSpriteFrame_getRect : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSpriteFrame_clone(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSpriteFrame* cobj = (CrossApp::CGSpriteFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrame_clone : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CGSpriteFrame* ret = cobj->clone();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CGSpriteFrame>(cx, (CrossApp::CGSpriteFrame*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSpriteFrame_clone : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSpriteFrame_setImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSpriteFrame* cobj = (CrossApp::CGSpriteFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrame_setImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSpriteFrame_setImage : Error processing arguments");
        cobj->setImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSpriteFrame_setImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSpriteFrame_initWithImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CGSpriteFrame* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CGSpriteFrame *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrame_initWithImage : Invalid Native Object");
    do {
        if (argc == 5) {
            CrossApp::CAImage* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::DRect arg1;
            ok &= jsval_to_drect(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            bool arg2;
            arg2 = JS::ToBoolean(args.get(2));
            CrossApp::DPoint arg3;
            ok &= jsval_to_dpoint(cx, args.get(3), &arg3);
            if (!ok) { ok = true; break; }
            CrossApp::DSize arg4;
            ok &= jsval_to_dsize(cx, args.get(4), &arg4);
            if (!ok) { ok = true; break; }
            bool ret = cobj->initWithImage(arg0, arg1, arg2, arg3, arg4);
            jsval jsret = JSVAL_NULL;
            jsret = BOOLEAN_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 2) {
            CrossApp::CAImage* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::DRect arg1;
            ok &= jsval_to_drect(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            bool ret = cobj->initWithImage(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            jsret = BOOLEAN_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CGSpriteFrame_initWithImage : wrong number of arguments");
    return false;
}
bool js_crossapp_CGSpriteFrame_getAnchorPoint(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSpriteFrame* cobj = (CrossApp::CGSpriteFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrame_getAnchorPoint : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DPoint& ret = cobj->getAnchorPoint();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSpriteFrame_getAnchorPoint : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSpriteFrame_setOriginalSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSpriteFrame* cobj = (CrossApp::CGSpriteFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrame_setOriginalSize : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSpriteFrame_setOriginalSize : Error processing arguments");
        cobj->setOriginalSize(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSpriteFrame_setOriginalSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSpriteFrame_setOffset(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSpriteFrame* cobj = (CrossApp::CGSpriteFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrame_setOffset : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DPoint arg0;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSpriteFrame_setOffset : Error processing arguments");
        cobj->setOffset(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSpriteFrame_setOffset : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSpriteFrame_hasAnchorPoint(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSpriteFrame* cobj = (CrossApp::CGSpriteFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrame_hasAnchorPoint : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->hasAnchorPoint();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSpriteFrame_hasAnchorPoint : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSpriteFrame_isRotated(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSpriteFrame* cobj = (CrossApp::CGSpriteFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrame_isRotated : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isRotated();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSpriteFrame_isRotated : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSpriteFrame_getImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSpriteFrame* cobj = (CrossApp::CGSpriteFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrame_getImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSpriteFrame_getImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSpriteFrame_setRect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSpriteFrame* cobj = (CrossApp::CGSpriteFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrame_setRect : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSpriteFrame_setRect : Error processing arguments");
        cobj->setRect(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSpriteFrame_setRect : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSpriteFrame_initWithImageFilename(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CGSpriteFrame* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CGSpriteFrame *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrame_initWithImageFilename : Invalid Native Object");
    do {
        if (argc == 5) {
            std::string arg0;
            ok &= jsval_to_std_string(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::DRect arg1;
            ok &= jsval_to_drect(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            bool arg2;
            arg2 = JS::ToBoolean(args.get(2));
            CrossApp::DPoint arg3;
            ok &= jsval_to_dpoint(cx, args.get(3), &arg3);
            if (!ok) { ok = true; break; }
            CrossApp::DSize arg4;
            ok &= jsval_to_dsize(cx, args.get(4), &arg4);
            if (!ok) { ok = true; break; }
            bool ret = cobj->initWithImageFilename(arg0, arg1, arg2, arg3, arg4);
            jsval jsret = JSVAL_NULL;
            jsret = BOOLEAN_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= jsval_to_std_string(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::DRect arg1;
            ok &= jsval_to_drect(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            bool ret = cobj->initWithImageFilename(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            jsret = BOOLEAN_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CGSpriteFrame_initWithImageFilename : wrong number of arguments");
    return false;
}
bool js_crossapp_CGSpriteFrame_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 5) {
            std::string arg0;
            ok &= jsval_to_std_string(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::DRect arg1;
            ok &= jsval_to_drect(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            bool arg2;
            arg2 = JS::ToBoolean(args.get(2));
            if (!ok) { ok = true; break; }
            CrossApp::DPoint arg3;
            ok &= jsval_to_dpoint(cx, args.get(3), &arg3);
            if (!ok) { ok = true; break; }
            CrossApp::DSize arg4;
            ok &= jsval_to_dsize(cx, args.get(4), &arg4);
            if (!ok) { ok = true; break; }
            CrossApp::CGSpriteFrame* ret = CrossApp::CGSpriteFrame::create(arg0, arg1, arg2, arg3, arg4);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CGSpriteFrame>(cx, (CrossApp::CGSpriteFrame*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 2) {
            std::string arg0;
            ok &= jsval_to_std_string(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::DRect arg1;
            ok &= jsval_to_drect(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CGSpriteFrame* ret = CrossApp::CGSpriteFrame::create(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CGSpriteFrame>(cx, (CrossApp::CGSpriteFrame*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_crossapp_CGSpriteFrame_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CGSpriteFrame_createWithImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 5) {
            CrossApp::CAImage* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::DRect arg1;
            ok &= jsval_to_drect(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            bool arg2;
            arg2 = JS::ToBoolean(args.get(2));
            if (!ok) { ok = true; break; }
            CrossApp::DPoint arg3;
            ok &= jsval_to_dpoint(cx, args.get(3), &arg3);
            if (!ok) { ok = true; break; }
            CrossApp::DSize arg4;
            ok &= jsval_to_dsize(cx, args.get(4), &arg4);
            if (!ok) { ok = true; break; }
            CrossApp::CGSpriteFrame* ret = CrossApp::CGSpriteFrame::createWithImage(arg0, arg1, arg2, arg3, arg4);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CGSpriteFrame>(cx, (CrossApp::CGSpriteFrame*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 2) {
            CrossApp::CAImage* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::DRect arg1;
            ok &= jsval_to_drect(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CGSpriteFrame* ret = CrossApp::CGSpriteFrame::createWithImage(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CGSpriteFrame>(cx, (CrossApp::CGSpriteFrame*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_crossapp_CGSpriteFrame_createWithImage : wrong number of arguments");
    return false;
}
bool js_crossapp_CGSpriteFrame_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CGSpriteFrame* cobj = new (std::nothrow) CrossApp::CGSpriteFrame();
    TypeTest<CrossApp::CGSpriteFrame> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CGSpriteFrame");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CGSpriteFrame_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CGSpriteFrame)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CGSpriteFrame *nobj = static_cast<CrossApp::CGSpriteFrame *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CGSpriteFrame(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CGSpriteFrame_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CGSpriteFrame_class->name = "CGSpriteFrame";
    jsb_CrossApp_CGSpriteFrame_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CGSpriteFrame_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CGSpriteFrame_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CGSpriteFrame_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CGSpriteFrame_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CGSpriteFrame_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CGSpriteFrame_class->convert = JS_ConvertStub;
    jsb_CrossApp_CGSpriteFrame_class->finalize = js_CrossApp_CGSpriteFrame_finalize;
    jsb_CrossApp_CGSpriteFrame_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setRotated", js_crossapp_CGSpriteFrame_setRotated, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnchorPoint", js_crossapp_CGSpriteFrame_setAnchorPoint, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getOffset", js_crossapp_CGSpriteFrame_getOffset, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getOriginalSize", js_crossapp_CGSpriteFrame_getOriginalSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRect", js_crossapp_CGSpriteFrame_getRect, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("clone", js_crossapp_CGSpriteFrame_clone, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImage", js_crossapp_CGSpriteFrame_setImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithImage", js_crossapp_CGSpriteFrame_initWithImage, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAnchorPoint", js_crossapp_CGSpriteFrame_getAnchorPoint, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setOriginalSize", js_crossapp_CGSpriteFrame_setOriginalSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setOffset", js_crossapp_CGSpriteFrame_setOffset, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("hasAnchorPoint", js_crossapp_CGSpriteFrame_hasAnchorPoint, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isRotated", js_crossapp_CGSpriteFrame_isRotated, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImage", js_crossapp_CGSpriteFrame_getImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setRect", js_crossapp_CGSpriteFrame_setRect, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithImageFilename", js_crossapp_CGSpriteFrame_initWithImageFilename, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CGSpriteFrame_create, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithImage", js_crossapp_CGSpriteFrame_createWithImage, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CGSpriteFrame_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CGSpriteFrame_class,
        js_crossapp_CGSpriteFrame_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CGSpriteFrame", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CGSpriteFrame> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CGSpriteFrame_class;
        p->proto = jsb_CrossApp_CGSpriteFrame_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CGSpriteFrameCache_class;
JSObject *jsb_CrossApp_CGSpriteFrameCache_prototype;

bool js_crossapp_CGSpriteFrameCache_getSpriteFrameByName(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSpriteFrameCache* cobj = (CrossApp::CGSpriteFrameCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrameCache_getSpriteFrameByName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSpriteFrameCache_getSpriteFrameByName : Error processing arguments");
        CrossApp::CGSpriteFrame* ret = cobj->getSpriteFrameByName(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CGSpriteFrame>(cx, (CrossApp::CGSpriteFrame*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSpriteFrameCache_getSpriteFrameByName : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSpriteFrameCache_addSpriteFramesWithFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CGSpriteFrameCache* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CGSpriteFrameCache *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrameCache_addSpriteFramesWithFile : Invalid Native Object");
    do {
        if (argc == 2) {
            std::string arg0;
            ok &= jsval_to_std_string(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            std::string arg1;
            ok &= jsval_to_std_string(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            cobj->addSpriteFramesWithFile(arg0, arg1);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 1) {
            std::string arg0;
            ok &= jsval_to_std_string(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            cobj->addSpriteFramesWithFile(arg0);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= jsval_to_std_string(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::CAImage* arg1 = nullptr;
            do {
                if (args.get(1).isNull()) { arg1 = nullptr; break; }
                if (!args.get(1).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(1).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            cobj->addSpriteFramesWithFile(arg0, arg1);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_CGSpriteFrameCache_addSpriteFramesWithFile : wrong number of arguments");
    return false;
}
bool js_crossapp_CGSpriteFrameCache_addSpriteFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSpriteFrameCache* cobj = (CrossApp::CGSpriteFrameCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrameCache_addSpriteFrame : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CGSpriteFrame* arg0 = nullptr;
        std::string arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CGSpriteFrame*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSpriteFrameCache_addSpriteFrame : Error processing arguments");
        cobj->addSpriteFrame(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSpriteFrameCache_addSpriteFrame : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_CGSpriteFrameCache_removeUnusedSpriteFrames(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSpriteFrameCache* cobj = (CrossApp::CGSpriteFrameCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrameCache_removeUnusedSpriteFrames : Invalid Native Object");
    if (argc == 0) {
        cobj->removeUnusedSpriteFrames();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSpriteFrameCache_removeUnusedSpriteFrames : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSpriteFrameCache_allImageFileNames(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSpriteFrameCache* cobj = (CrossApp::CGSpriteFrameCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrameCache_allImageFileNames : Invalid Native Object");
    if (argc == 0) {
        std::vector<std::string, std::allocator<std::string> > ret = cobj->allImageFileNames();
        jsval jsret = JSVAL_NULL;
        jsret = std_vector_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSpriteFrameCache_allImageFileNames : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSpriteFrameCache_removeSpriteFramesFromFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSpriteFrameCache* cobj = (CrossApp::CGSpriteFrameCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrameCache_removeSpriteFramesFromFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSpriteFrameCache_removeSpriteFramesFromFile : Error processing arguments");
        cobj->removeSpriteFramesFromFile(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSpriteFrameCache_removeSpriteFramesFromFile : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSpriteFrameCache_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSpriteFrameCache* cobj = (CrossApp::CGSpriteFrameCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrameCache_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSpriteFrameCache_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSpriteFrameCache_removeSpriteFrames(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSpriteFrameCache* cobj = (CrossApp::CGSpriteFrameCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrameCache_removeSpriteFrames : Invalid Native Object");
    if (argc == 0) {
        cobj->removeSpriteFrames();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSpriteFrameCache_removeSpriteFrames : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGSpriteFrameCache_removeSpriteFrameByName(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSpriteFrameCache* cobj = (CrossApp::CGSpriteFrameCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrameCache_removeSpriteFrameByName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSpriteFrameCache_removeSpriteFrameByName : Error processing arguments");
        cobj->removeSpriteFrameByName(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSpriteFrameCache_removeSpriteFrameByName : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSpriteFrameCache_removeSpriteFramesFromImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGSpriteFrameCache* cobj = (CrossApp::CGSpriteFrameCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGSpriteFrameCache_removeSpriteFramesFromImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGSpriteFrameCache_removeSpriteFramesFromImage : Error processing arguments");
        cobj->removeSpriteFramesFromImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGSpriteFrameCache_removeSpriteFramesFromImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGSpriteFrameCache_destroyInstance(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CGSpriteFrameCache::destroyInstance();
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CGSpriteFrameCache_destroyInstance : wrong number of arguments");
    return false;
}
bool js_crossapp_CGSpriteFrameCache_getInstance(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CGSpriteFrameCache* ret = CrossApp::CGSpriteFrameCache::getInstance();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CGSpriteFrameCache>(cx, (CrossApp::CGSpriteFrameCache*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CGSpriteFrameCache_getInstance : wrong number of arguments");
    return false;
}
bool js_crossapp_CGSpriteFrameCache_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CGSpriteFrameCache* cobj = new (std::nothrow) CrossApp::CGSpriteFrameCache();
    TypeTest<CrossApp::CGSpriteFrameCache> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CGSpriteFrameCache");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CGSpriteFrameCache_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CGSpriteFrameCache)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CGSpriteFrameCache *nobj = static_cast<CrossApp::CGSpriteFrameCache *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CGSpriteFrameCache(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CGSpriteFrameCache_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CGSpriteFrameCache_class->name = "CGSpriteFrameCache";
    jsb_CrossApp_CGSpriteFrameCache_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CGSpriteFrameCache_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CGSpriteFrameCache_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CGSpriteFrameCache_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CGSpriteFrameCache_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CGSpriteFrameCache_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CGSpriteFrameCache_class->convert = JS_ConvertStub;
    jsb_CrossApp_CGSpriteFrameCache_class->finalize = js_CrossApp_CGSpriteFrameCache_finalize;
    jsb_CrossApp_CGSpriteFrameCache_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getSpriteFrameByName", js_crossapp_CGSpriteFrameCache_getSpriteFrameByName, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addSpriteFramesWithFile", js_crossapp_CGSpriteFrameCache_addSpriteFramesWithFile, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addSpriteFrame", js_crossapp_CGSpriteFrameCache_addSpriteFrame, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeUnusedSpriteFrames", js_crossapp_CGSpriteFrameCache_removeUnusedSpriteFrames, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("allImageFileNames", js_crossapp_CGSpriteFrameCache_allImageFileNames, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeSpriteFramesFromFile", js_crossapp_CGSpriteFrameCache_removeSpriteFramesFromFile, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_CGSpriteFrameCache_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeSpriteFrames", js_crossapp_CGSpriteFrameCache_removeSpriteFrames, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeSpriteFrameByName", js_crossapp_CGSpriteFrameCache_removeSpriteFrameByName, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeSpriteFramesFromImage", js_crossapp_CGSpriteFrameCache_removeSpriteFramesFromImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("destroyInstance", js_crossapp_CGSpriteFrameCache_destroyInstance, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getInstance", js_crossapp_CGSpriteFrameCache_getInstance, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CGSpriteFrameCache_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CGSpriteFrameCache_class,
        js_crossapp_CGSpriteFrameCache_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CGSpriteFrameCache", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CGSpriteFrameCache> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CGSpriteFrameCache_class;
        p->proto = jsb_CrossApp_CGSpriteFrameCache_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CGProgressTimer_class;
JSObject *jsb_CrossApp_CGProgressTimer_prototype;

bool js_crossapp_CGProgressTimer_setReverseProgress(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGProgressTimer* cobj = (CrossApp::CGProgressTimer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGProgressTimer_setReverseProgress : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGProgressTimer_setReverseProgress : Error processing arguments");
        cobj->setReverseProgress(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGProgressTimer_setReverseProgress : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGProgressTimer_isReverseDirection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGProgressTimer* cobj = (CrossApp::CGProgressTimer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGProgressTimer_isReverseDirection : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReverseDirection();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGProgressTimer_isReverseDirection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGProgressTimer_setBarChangeRate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGProgressTimer* cobj = (CrossApp::CGProgressTimer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGProgressTimer_setBarChangeRate : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DPoint arg0;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGProgressTimer_setBarChangeRate : Error processing arguments");
        cobj->setBarChangeRate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGProgressTimer_setBarChangeRate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGProgressTimer_setAnchorPoint(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGProgressTimer* cobj = (CrossApp::CGProgressTimer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGProgressTimer_setAnchorPoint : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DPoint arg0;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGProgressTimer_setAnchorPoint : Error processing arguments");
        cobj->setAnchorPoint(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGProgressTimer_setAnchorPoint : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGProgressTimer_getPercentage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGProgressTimer* cobj = (CrossApp::CGProgressTimer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGProgressTimer_getPercentage : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getPercentage();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGProgressTimer_getPercentage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGProgressTimer_setSprite(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGProgressTimer* cobj = (CrossApp::CGProgressTimer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGProgressTimer_setSprite : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CGSprite* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CGSprite*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGProgressTimer_setSprite : Error processing arguments");
        cobj->setSprite(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGProgressTimer_setSprite : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGProgressTimer_getType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGProgressTimer* cobj = (CrossApp::CGProgressTimer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGProgressTimer_getType : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getType();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGProgressTimer_getType : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGProgressTimer_getSprite(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGProgressTimer* cobj = (CrossApp::CGProgressTimer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGProgressTimer_getSprite : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CGSprite* ret = cobj->getSprite();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CGSprite>(cx, (CrossApp::CGSprite*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGProgressTimer_getSprite : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGProgressTimer_setMidpoint(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGProgressTimer* cobj = (CrossApp::CGProgressTimer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGProgressTimer_setMidpoint : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DPoint arg0;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGProgressTimer_setMidpoint : Error processing arguments");
        cobj->setMidpoint(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGProgressTimer_setMidpoint : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGProgressTimer_getMidpoint(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGProgressTimer* cobj = (CrossApp::CGProgressTimer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGProgressTimer_getMidpoint : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DPoint ret = cobj->getMidpoint();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGProgressTimer_getMidpoint : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGProgressTimer_getColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGProgressTimer* cobj = (CrossApp::CGProgressTimer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGProgressTimer_getColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGProgressTimer_getColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGProgressTimer_getAlpha(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGProgressTimer* cobj = (CrossApp::CGProgressTimer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGProgressTimer_getAlpha : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getAlpha();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGProgressTimer_getAlpha : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGProgressTimer_getBarChangeRate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGProgressTimer* cobj = (CrossApp::CGProgressTimer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGProgressTimer_getBarChangeRate : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DPoint ret = cobj->getBarChangeRate();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGProgressTimer_getBarChangeRate : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CGProgressTimer_setReverseDirection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGProgressTimer* cobj = (CrossApp::CGProgressTimer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGProgressTimer_setReverseDirection : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGProgressTimer_setReverseDirection : Error processing arguments");
        cobj->setReverseDirection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGProgressTimer_setReverseDirection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGProgressTimer_initWithSprite(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGProgressTimer* cobj = (CrossApp::CGProgressTimer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGProgressTimer_initWithSprite : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CGSprite* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CGSprite*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGProgressTimer_initWithSprite : Error processing arguments");
        bool ret = cobj->initWithSprite(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGProgressTimer_initWithSprite : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGProgressTimer_setPercentage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGProgressTimer* cobj = (CrossApp::CGProgressTimer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGProgressTimer_setPercentage : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGProgressTimer_setPercentage : Error processing arguments");
        cobj->setPercentage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGProgressTimer_setPercentage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGProgressTimer_setType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CGProgressTimer* cobj = (CrossApp::CGProgressTimer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CGProgressTimer_setType : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CGProgressTimer::Type arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGProgressTimer_setType : Error processing arguments");
        cobj->setType(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CGProgressTimer_setType : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CGProgressTimer_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CGSprite* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CGSprite*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CGProgressTimer_create : Error processing arguments");
        CrossApp::CGProgressTimer* ret = CrossApp::CGProgressTimer::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CGProgressTimer>(cx, (CrossApp::CGProgressTimer*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CGProgressTimer_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CGProgressTimer_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CGProgressTimer* cobj = new (std::nothrow) CrossApp::CGProgressTimer();
    TypeTest<CrossApp::CGProgressTimer> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CGProgressTimer");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CGProgressTimer_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CGProgressTimer)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CGProgressTimer *nobj = static_cast<CrossApp::CGProgressTimer *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CGProgressTimer(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CGProgressTimer_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CGProgressTimer_class->name = "CGProgressTimer";
    jsb_CrossApp_CGProgressTimer_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CGProgressTimer_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CGProgressTimer_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CGProgressTimer_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CGProgressTimer_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CGProgressTimer_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CGProgressTimer_class->convert = JS_ConvertStub;
    jsb_CrossApp_CGProgressTimer_class->finalize = js_CrossApp_CGProgressTimer_finalize;
    jsb_CrossApp_CGProgressTimer_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setReverseProgress", js_crossapp_CGProgressTimer_setReverseProgress, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReverseDirection", js_crossapp_CGProgressTimer_isReverseDirection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBarChangeRate", js_crossapp_CGProgressTimer_setBarChangeRate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnchorPoint", js_crossapp_CGProgressTimer_setAnchorPoint, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPercentage", js_crossapp_CGProgressTimer_getPercentage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSprite", js_crossapp_CGProgressTimer_setSprite, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getType", js_crossapp_CGProgressTimer_getType, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSprite", js_crossapp_CGProgressTimer_getSprite, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMidpoint", js_crossapp_CGProgressTimer_setMidpoint, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMidpoint", js_crossapp_CGProgressTimer_getMidpoint, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getColor", js_crossapp_CGProgressTimer_getColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAlpha", js_crossapp_CGProgressTimer_getAlpha, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBarChangeRate", js_crossapp_CGProgressTimer_getBarChangeRate, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setReverseDirection", js_crossapp_CGProgressTimer_setReverseDirection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithSprite", js_crossapp_CGProgressTimer_initWithSprite, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPercentage", js_crossapp_CGProgressTimer_setPercentage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setType", js_crossapp_CGProgressTimer_setType, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CGProgressTimer_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CGProgressTimer_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CGProgressTimer_class,
        js_crossapp_CGProgressTimer_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CGProgressTimer", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CGProgressTimer> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CGProgressTimer_class;
        p->proto = jsb_CrossApp_CGProgressTimer_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_Animation_class;
JSObject *jsb_CrossApp_Animation_prototype;

bool js_crossapp_Animation_getLoops(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Animation* cobj = (CrossApp::Animation *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Animation_getLoops : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getLoops();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Animation_getLoops : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_Animation_addSpriteFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Animation* cobj = (CrossApp::Animation *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Animation_addSpriteFrame : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CGSpriteFrame* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CGSpriteFrame*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Animation_addSpriteFrame : Error processing arguments");
        cobj->addSpriteFrame(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Animation_addSpriteFrame : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_Animation_setRestoreOriginalFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Animation* cobj = (CrossApp::Animation *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Animation_setRestoreOriginalFrame : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Animation_setRestoreOriginalFrame : Error processing arguments");
        cobj->setRestoreOriginalFrame(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Animation_setRestoreOriginalFrame : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_Animation_clone(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Animation* cobj = (CrossApp::Animation *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Animation_clone : Invalid Native Object");
    if (argc == 0) {
        CrossApp::Animation* ret = cobj->clone();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Animation>(cx, (CrossApp::Animation*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Animation_clone : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_Animation_getDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Animation* cobj = (CrossApp::Animation *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Animation_getDuration : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getDuration();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Animation_getDuration : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_Animation_initWithAnimationFrames(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Animation* cobj = (CrossApp::Animation *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Animation_initWithAnimationFrames : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CAVector<CrossApp::AnimationFrame *> arg0;
        double arg1 = 0;
        uint32_t arg2 = 0;
        ok &= jsval_to_cavector(cx, args.get(0), &arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Animation_initWithAnimationFrames : Error processing arguments");
        bool ret = cobj->initWithAnimationFrames(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Animation_initWithAnimationFrames : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_crossapp_Animation_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Animation* cobj = (CrossApp::Animation *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Animation_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Animation_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_Animation_addSpriteFrameWithImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Animation* cobj = (CrossApp::Animation *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Animation_addSpriteFrameWithImage : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAImage* arg0 = nullptr;
        CrossApp::DRect arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_drect(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Animation_addSpriteFrameWithImage : Error processing arguments");
        cobj->addSpriteFrameWithImage(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Animation_addSpriteFrameWithImage : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_Animation_setFrames(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Animation* cobj = (CrossApp::Animation *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Animation_setFrames : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAVector<CrossApp::AnimationFrame *> arg0;
        ok &= jsval_to_cavector(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Animation_setFrames : Error processing arguments");
        cobj->setFrames(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Animation_setFrames : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_Animation_getFrames(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Animation* cobj = (CrossApp::Animation *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Animation_getFrames : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAVector<CrossApp::AnimationFrame *>& ret = cobj->getFrames();
        jsval jsret = JSVAL_NULL;
        jsret = cavector_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Animation_getFrames : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_Animation_setLoops(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Animation* cobj = (CrossApp::Animation *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Animation_setLoops : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Animation_setLoops : Error processing arguments");
        cobj->setLoops(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Animation_setLoops : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_Animation_setDelayPerUnit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Animation* cobj = (CrossApp::Animation *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Animation_setDelayPerUnit : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Animation_setDelayPerUnit : Error processing arguments");
        cobj->setDelayPerUnit(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Animation_setDelayPerUnit : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_Animation_addSpriteFrameWithFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Animation* cobj = (CrossApp::Animation *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Animation_addSpriteFrameWithFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Animation_addSpriteFrameWithFile : Error processing arguments");
        cobj->addSpriteFrameWithFile(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Animation_addSpriteFrameWithFile : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_Animation_getTotalDelayUnits(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Animation* cobj = (CrossApp::Animation *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Animation_getTotalDelayUnits : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getTotalDelayUnits();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Animation_getTotalDelayUnits : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_Animation_getDelayPerUnit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Animation* cobj = (CrossApp::Animation *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Animation_getDelayPerUnit : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getDelayPerUnit();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Animation_getDelayPerUnit : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_Animation_initWithSpriteFrames(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Animation* cobj = (CrossApp::Animation *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Animation_initWithSpriteFrames : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAVector<CrossApp::CGSpriteFrame *> arg0;
        ok &= jsval_to_cavector(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Animation_initWithSpriteFrames : Error processing arguments");
        bool ret = cobj->initWithSpriteFrames(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::CAVector<CrossApp::CGSpriteFrame *> arg0;
        double arg1 = 0;
        ok &= jsval_to_cavector(cx, args.get(0), &arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Animation_initWithSpriteFrames : Error processing arguments");
        bool ret = cobj->initWithSpriteFrames(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 3) {
        CrossApp::CAVector<CrossApp::CGSpriteFrame *> arg0;
        double arg1 = 0;
        uint32_t arg2 = 0;
        ok &= jsval_to_cavector(cx, args.get(0), &arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Animation_initWithSpriteFrames : Error processing arguments");
        bool ret = cobj->initWithSpriteFrames(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Animation_initWithSpriteFrames : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_Animation_getRestoreOriginalFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Animation* cobj = (CrossApp::Animation *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Animation_getRestoreOriginalFrame : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->getRestoreOriginalFrame();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Animation_getRestoreOriginalFrame : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_Animation_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 2) {
            CrossApp::CAVector<CrossApp::AnimationFrame *> arg0;
            ok &= jsval_to_cavector(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            CrossApp::Animation* ret = CrossApp::Animation::create(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Animation>(cx, (CrossApp::Animation*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    do {
        if (argc == 3) {
            CrossApp::CAVector<CrossApp::AnimationFrame *> arg0;
            ok &= jsval_to_cavector(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            uint32_t arg2 = 0;
            ok &= jsval_to_uint32(cx, args.get(2), &arg2);
            if (!ok) { ok = true; break; }
            CrossApp::Animation* ret = CrossApp::Animation::create(arg0, arg1, arg2);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Animation>(cx, (CrossApp::Animation*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 0) {
            CrossApp::Animation* ret = CrossApp::Animation::create();
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Animation>(cx, (CrossApp::Animation*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_crossapp_Animation_create : wrong number of arguments");
    return false;
}
bool js_crossapp_Animation_createWithSpriteFrames(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAVector<CrossApp::CGSpriteFrame *> arg0;
        ok &= jsval_to_cavector(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Animation_createWithSpriteFrames : Error processing arguments");
        CrossApp::Animation* ret = CrossApp::Animation::createWithSpriteFrames(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Animation>(cx, (CrossApp::Animation*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::CAVector<CrossApp::CGSpriteFrame *> arg0;
        double arg1 = 0;
        ok &= jsval_to_cavector(cx, args.get(0), &arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Animation_createWithSpriteFrames : Error processing arguments");
        CrossApp::Animation* ret = CrossApp::Animation::createWithSpriteFrames(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Animation>(cx, (CrossApp::Animation*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 3) {
        CrossApp::CAVector<CrossApp::CGSpriteFrame *> arg0;
        double arg1 = 0;
        uint32_t arg2 = 0;
        ok &= jsval_to_cavector(cx, args.get(0), &arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Animation_createWithSpriteFrames : Error processing arguments");
        CrossApp::Animation* ret = CrossApp::Animation::createWithSpriteFrames(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Animation>(cx, (CrossApp::Animation*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_Animation_createWithSpriteFrames : wrong number of arguments");
    return false;
}
bool js_crossapp_Animation_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::Animation* cobj = new (std::nothrow) CrossApp::Animation();
    TypeTest<CrossApp::Animation> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::Animation");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_Animation_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (Animation)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::Animation *nobj = static_cast<CrossApp::Animation *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_Animation(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_Animation_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_Animation_class->name = "Animation";
    jsb_CrossApp_Animation_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_Animation_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_Animation_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_Animation_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_Animation_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_Animation_class->resolve = JS_ResolveStub;
    jsb_CrossApp_Animation_class->convert = JS_ConvertStub;
    jsb_CrossApp_Animation_class->finalize = js_CrossApp_Animation_finalize;
    jsb_CrossApp_Animation_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getLoops", js_crossapp_Animation_getLoops, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addSpriteFrame", js_crossapp_Animation_addSpriteFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setRestoreOriginalFrame", js_crossapp_Animation_setRestoreOriginalFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("clone", js_crossapp_Animation_clone, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDuration", js_crossapp_Animation_getDuration, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithAnimationFrames", js_crossapp_Animation_initWithAnimationFrames, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_Animation_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addSpriteFrameWithImage", js_crossapp_Animation_addSpriteFrameWithImage, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFrames", js_crossapp_Animation_setFrames, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFrames", js_crossapp_Animation_getFrames, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setLoops", js_crossapp_Animation_setLoops, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDelayPerUnit", js_crossapp_Animation_setDelayPerUnit, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addSpriteFrameWithFile", js_crossapp_Animation_addSpriteFrameWithFile, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTotalDelayUnits", js_crossapp_Animation_getTotalDelayUnits, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDelayPerUnit", js_crossapp_Animation_getDelayPerUnit, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithSpriteFrames", js_crossapp_Animation_initWithSpriteFrames, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRestoreOriginalFrame", js_crossapp_Animation_getRestoreOriginalFrame, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_Animation_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithSpriteFrames", js_crossapp_Animation_createWithSpriteFrames, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_Animation_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_Animation_class,
        js_crossapp_Animation_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "Animation", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::Animation> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_Animation_class;
        p->proto = jsb_CrossApp_Animation_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_AnimationCache_class;
JSObject *jsb_CrossApp_AnimationCache_prototype;

bool js_crossapp_AnimationCache_getAnimation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::AnimationCache* cobj = (CrossApp::AnimationCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_AnimationCache_getAnimation : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_AnimationCache_getAnimation : Error processing arguments");
        CrossApp::Animation* ret = cobj->getAnimation(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Animation>(cx, (CrossApp::Animation*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_AnimationCache_getAnimation : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_AnimationCache_addAnimation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::AnimationCache* cobj = (CrossApp::AnimationCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_AnimationCache_addAnimation : Invalid Native Object");
    if (argc == 2) {
        CrossApp::Animation* arg0 = nullptr;
        std::string arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::Animation*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_AnimationCache_addAnimation : Error processing arguments");
        cobj->addAnimation(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_AnimationCache_addAnimation : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_AnimationCache_addAnimationsWithFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::AnimationCache* cobj = (CrossApp::AnimationCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_AnimationCache_addAnimationsWithFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_AnimationCache_addAnimationsWithFile : Error processing arguments");
        cobj->addAnimationsWithFile(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_AnimationCache_addAnimationsWithFile : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_AnimationCache_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::AnimationCache* cobj = (CrossApp::AnimationCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_AnimationCache_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_AnimationCache_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_AnimationCache_removeAnimation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::AnimationCache* cobj = (CrossApp::AnimationCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_AnimationCache_removeAnimation : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_AnimationCache_removeAnimation : Error processing arguments");
        cobj->removeAnimation(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_AnimationCache_removeAnimation : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_AnimationCache_destroyInstance(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::AnimationCache::destroyInstance();
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_AnimationCache_destroyInstance : wrong number of arguments");
    return false;
}
bool js_crossapp_AnimationCache_getInstance(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::AnimationCache* ret = CrossApp::AnimationCache::getInstance();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::AnimationCache>(cx, (CrossApp::AnimationCache*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_AnimationCache_getInstance : wrong number of arguments");
    return false;
}
bool js_crossapp_AnimationCache_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::AnimationCache* cobj = new (std::nothrow) CrossApp::AnimationCache();
    TypeTest<CrossApp::AnimationCache> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::AnimationCache");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_AnimationCache_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::AnimationCache *nobj = new (std::nothrow) CrossApp::AnimationCache();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::AnimationCache");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_AnimationCache_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (AnimationCache)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::AnimationCache *nobj = static_cast<CrossApp::AnimationCache *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_AnimationCache(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_AnimationCache_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_AnimationCache_class->name = "AnimationCache";
    jsb_CrossApp_AnimationCache_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_AnimationCache_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_AnimationCache_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_AnimationCache_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_AnimationCache_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_AnimationCache_class->resolve = JS_ResolveStub;
    jsb_CrossApp_AnimationCache_class->convert = JS_ConvertStub;
    jsb_CrossApp_AnimationCache_class->finalize = js_CrossApp_AnimationCache_finalize;
    jsb_CrossApp_AnimationCache_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getAnimation", js_crossapp_AnimationCache_getAnimation, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addAnimation", js_crossapp_AnimationCache_addAnimation, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addAnimationsWithFile", js_crossapp_AnimationCache_addAnimationsWithFile, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_crossapp_AnimationCache_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeAnimation", js_crossapp_AnimationCache_removeAnimation, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_AnimationCache_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("destroyInstance", js_crossapp_AnimationCache_destroyInstance, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getInstance", js_crossapp_AnimationCache_getInstance, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_AnimationCache_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_AnimationCache_class,
        js_crossapp_AnimationCache_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "AnimationCache", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::AnimationCache> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_AnimationCache_class;
        p->proto = jsb_CrossApp_AnimationCache_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.AnimationCache.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_Action_class;
JSObject *jsb_CrossApp_Action_prototype;

bool js_crossapp_Action_startWithTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Action* cobj = (CrossApp::Action *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Action_startWithTarget : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CGSprite* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CGSprite*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Action_startWithTarget : Error processing arguments");
        cobj->startWithTarget(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Action_startWithTarget : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_Action_description(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Action* cobj = (CrossApp::Action *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Action_description : Invalid Native Object");
    if (argc == 0) {
        std::string ret = cobj->description();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Action_description : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_Action_setOriginalTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Action* cobj = (CrossApp::Action *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Action_setOriginalTarget : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CGSprite* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CGSprite*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Action_setOriginalTarget : Error processing arguments");
        cobj->setOriginalTarget(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Action_setOriginalTarget : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_Action_clone(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Action* cobj = (CrossApp::Action *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Action_clone : Invalid Native Object");
    if (argc == 0) {
        CrossApp::Action* ret = cobj->clone();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Action>(cx, (CrossApp::Action*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Action_clone : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_Action_getOriginalTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Action* cobj = (CrossApp::Action *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Action_getOriginalTarget : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CGSprite* ret = cobj->getOriginalTarget();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CGSprite>(cx, (CrossApp::CGSprite*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Action_getOriginalTarget : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_Action_stop(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Action* cobj = (CrossApp::Action *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Action_stop : Invalid Native Object");
    if (argc == 0) {
        cobj->stop();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Action_stop : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_Action_update(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Action* cobj = (CrossApp::Action *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Action_update : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Action_update : Error processing arguments");
        cobj->update(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Action_update : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_Action_getTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Action* cobj = (CrossApp::Action *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Action_getTarget : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CGSprite* ret = cobj->getTarget();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CGSprite>(cx, (CrossApp::CGSprite*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Action_getTarget : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_Action_getFlags(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Action* cobj = (CrossApp::Action *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Action_getFlags : Invalid Native Object");
    if (argc == 0) {
        uint32_t ret = cobj->getFlags();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Action_getFlags : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_Action_step(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Action* cobj = (CrossApp::Action *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Action_step : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Action_step : Error processing arguments");
        cobj->step(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Action_step : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_Action_setTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Action* cobj = (CrossApp::Action *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Action_setTag : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Action_setTag : Error processing arguments");
        cobj->setTag(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Action_setTag : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_Action_setFlags(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Action* cobj = (CrossApp::Action *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Action_setFlags : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Action_setFlags : Error processing arguments");
        cobj->setFlags(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Action_setFlags : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_Action_getTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Action* cobj = (CrossApp::Action *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Action_getTag : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getTag();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Action_getTag : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_Action_setTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Action* cobj = (CrossApp::Action *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Action_setTarget : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CGSprite* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CGSprite*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Action_setTarget : Error processing arguments");
        cobj->setTarget(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Action_setTarget : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_Action_isDone(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Action* cobj = (CrossApp::Action *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Action_isDone : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isDone();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Action_isDone : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_Action_reverse(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Action* cobj = (CrossApp::Action *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Action_reverse : Invalid Native Object");
    if (argc == 0) {
        CrossApp::Action* ret = cobj->reverse();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Action>(cx, (CrossApp::Action*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Action_reverse : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_Action_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (Action)", obj);
}
void js_register_crossapp_Action(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_Action_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_Action_class->name = "Action";
    jsb_CrossApp_Action_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_Action_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_Action_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_Action_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_Action_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_Action_class->resolve = JS_ResolveStub;
    jsb_CrossApp_Action_class->convert = JS_ConvertStub;
    jsb_CrossApp_Action_class->finalize = js_CrossApp_Action_finalize;
    jsb_CrossApp_Action_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("startWithTarget", js_crossapp_Action_startWithTarget, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("description", js_crossapp_Action_description, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setOriginalTarget", js_crossapp_Action_setOriginalTarget, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("clone", js_crossapp_Action_clone, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getOriginalTarget", js_crossapp_Action_getOriginalTarget, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("stop", js_crossapp_Action_stop, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("update", js_crossapp_Action_update, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTarget", js_crossapp_Action_getTarget, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFlags", js_crossapp_Action_getFlags, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("step", js_crossapp_Action_step, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTag", js_crossapp_Action_setTag, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFlags", js_crossapp_Action_setFlags, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTag", js_crossapp_Action_getTag, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTarget", js_crossapp_Action_setTarget, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isDone", js_crossapp_Action_isDone, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reverse", js_crossapp_Action_reverse, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_Action_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_Action_class,
        empty_constructor, 0,
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "Action", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::Action> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_Action_class;
        p->proto = jsb_CrossApp_Action_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_FiniteTimeAction_class;
JSObject *jsb_CrossApp_FiniteTimeAction_prototype;

bool js_crossapp_FiniteTimeAction_setDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FiniteTimeAction* cobj = (CrossApp::FiniteTimeAction *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FiniteTimeAction_setDuration : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FiniteTimeAction_setDuration : Error processing arguments");
        cobj->setDuration(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FiniteTimeAction_setDuration : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_FiniteTimeAction_getDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FiniteTimeAction* cobj = (CrossApp::FiniteTimeAction *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FiniteTimeAction_getDuration : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getDuration();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FiniteTimeAction_getDuration : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}

extern JSObject *jsb_CrossApp_Action_prototype;

void js_CrossApp_FiniteTimeAction_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (FiniteTimeAction)", obj);
}
void js_register_crossapp_FiniteTimeAction(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_FiniteTimeAction_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_FiniteTimeAction_class->name = "FiniteTimeAction";
    jsb_CrossApp_FiniteTimeAction_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_FiniteTimeAction_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_FiniteTimeAction_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_FiniteTimeAction_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_FiniteTimeAction_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_FiniteTimeAction_class->resolve = JS_ResolveStub;
    jsb_CrossApp_FiniteTimeAction_class->convert = JS_ConvertStub;
    jsb_CrossApp_FiniteTimeAction_class->finalize = js_CrossApp_FiniteTimeAction_finalize;
    jsb_CrossApp_FiniteTimeAction_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setDuration", js_crossapp_FiniteTimeAction_setDuration, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDuration", js_crossapp_FiniteTimeAction_getDuration, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_FiniteTimeAction_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_Action_prototype),
        jsb_CrossApp_FiniteTimeAction_class,
        empty_constructor, 0,
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "FiniteTimeAction", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::FiniteTimeAction> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_FiniteTimeAction_class;
        p->proto = jsb_CrossApp_FiniteTimeAction_prototype;
        p->parentProto = jsb_CrossApp_Action_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_ActionInterval_class;
JSObject *jsb_CrossApp_ActionInterval_prototype;

bool js_crossapp_ActionInterval_getAmplitudeRate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionInterval* cobj = (CrossApp::ActionInterval *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionInterval_getAmplitudeRate : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getAmplitudeRate();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionInterval_getAmplitudeRate : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_ActionInterval_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionInterval* cobj = (CrossApp::ActionInterval *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionInterval_initWithDuration : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_ActionInterval_initWithDuration : Error processing arguments");
        bool ret = cobj->initWithDuration(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionInterval_initWithDuration : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_ActionInterval_setAmplitudeRate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionInterval* cobj = (CrossApp::ActionInterval *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionInterval_setAmplitudeRate : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_ActionInterval_setAmplitudeRate : Error processing arguments");
        cobj->setAmplitudeRate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionInterval_setAmplitudeRate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_ActionInterval_getElapsed(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionInterval* cobj = (CrossApp::ActionInterval *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionInterval_getElapsed : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getElapsed();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionInterval_getElapsed : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}

extern JSObject *jsb_CrossApp_FiniteTimeAction_prototype;

void js_CrossApp_ActionInterval_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (ActionInterval)", obj);
}
void js_register_crossapp_ActionInterval(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_ActionInterval_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_ActionInterval_class->name = "ActionInterval";
    jsb_CrossApp_ActionInterval_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_ActionInterval_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_ActionInterval_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_ActionInterval_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_ActionInterval_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_ActionInterval_class->resolve = JS_ResolveStub;
    jsb_CrossApp_ActionInterval_class->convert = JS_ConvertStub;
    jsb_CrossApp_ActionInterval_class->finalize = js_CrossApp_ActionInterval_finalize;
    jsb_CrossApp_ActionInterval_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getAmplitudeRate", js_crossapp_ActionInterval_getAmplitudeRate, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithDuration", js_crossapp_ActionInterval_initWithDuration, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAmplitudeRate", js_crossapp_ActionInterval_setAmplitudeRate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getElapsed", js_crossapp_ActionInterval_getElapsed, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_ActionInterval_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_FiniteTimeAction_prototype),
        jsb_CrossApp_ActionInterval_class,
        empty_constructor, 0,
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "ActionInterval", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::ActionInterval> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_ActionInterval_class;
        p->proto = jsb_CrossApp_ActionInterval_prototype;
        p->parentProto = jsb_CrossApp_FiniteTimeAction_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_Sequence_class;
JSObject *jsb_CrossApp_Sequence_prototype;

bool js_crossapp_Sequence_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Sequence* cobj = (CrossApp::Sequence *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Sequence_init : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAVector<CrossApp::FiniteTimeAction *> arg0;
        ok &= jsval_to_cavector(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Sequence_init : Error processing arguments");
        bool ret = cobj->init(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Sequence_init : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_Sequence_initWithTwoActions(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Sequence* cobj = (CrossApp::Sequence *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Sequence_initWithTwoActions : Invalid Native Object");
    if (argc == 2) {
        CrossApp::FiniteTimeAction* arg0 = nullptr;
        CrossApp::FiniteTimeAction* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::FiniteTimeAction*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::FiniteTimeAction*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Sequence_initWithTwoActions : Error processing arguments");
        bool ret = cobj->initWithTwoActions(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Sequence_initWithTwoActions : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_Sequence_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAVector<CrossApp::FiniteTimeAction *> arg0;
        ok &= jsval_to_cavector(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Sequence_create : Error processing arguments");
        CrossApp::Sequence* ret = CrossApp::Sequence::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Sequence>(cx, (CrossApp::Sequence*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_Sequence_create : wrong number of arguments");
    return false;
}
bool js_crossapp_Sequence_createWithTwoActions(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::FiniteTimeAction* arg0 = nullptr;
        CrossApp::FiniteTimeAction* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::FiniteTimeAction*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::FiniteTimeAction*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Sequence_createWithTwoActions : Error processing arguments");
        CrossApp::Sequence* ret = CrossApp::Sequence::createWithTwoActions(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Sequence>(cx, (CrossApp::Sequence*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_Sequence_createWithTwoActions : wrong number of arguments");
    return false;
}
bool js_crossapp_Sequence_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::Sequence* cobj = new (std::nothrow) CrossApp::Sequence();
    TypeTest<CrossApp::Sequence> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::Sequence");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_Sequence_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::Sequence *nobj = new (std::nothrow) CrossApp::Sequence();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::Sequence");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionInterval_prototype;

void js_CrossApp_Sequence_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (Sequence)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::Sequence *nobj = static_cast<CrossApp::Sequence *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_Sequence(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_Sequence_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_Sequence_class->name = "Sequence";
    jsb_CrossApp_Sequence_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_Sequence_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_Sequence_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_Sequence_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_Sequence_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_Sequence_class->resolve = JS_ResolveStub;
    jsb_CrossApp_Sequence_class->convert = JS_ConvertStub;
    jsb_CrossApp_Sequence_class->finalize = js_CrossApp_Sequence_finalize;
    jsb_CrossApp_Sequence_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("init", js_crossapp_Sequence_init, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithTwoActions", js_crossapp_Sequence_initWithTwoActions, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_Sequence_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_Sequence_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithTwoActions", js_crossapp_Sequence_createWithTwoActions, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_Sequence_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInterval_prototype),
        jsb_CrossApp_Sequence_class,
        js_crossapp_Sequence_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "Sequence", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::Sequence> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_Sequence_class;
        p->proto = jsb_CrossApp_Sequence_prototype;
        p->parentProto = jsb_CrossApp_ActionInterval_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.Sequence.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_Repeat_class;
JSObject *jsb_CrossApp_Repeat_prototype;

bool js_crossapp_Repeat_setInnerAction(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Repeat* cobj = (CrossApp::Repeat *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Repeat_setInnerAction : Invalid Native Object");
    if (argc == 1) {
        CrossApp::FiniteTimeAction* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::FiniteTimeAction*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Repeat_setInnerAction : Error processing arguments");
        cobj->setInnerAction(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Repeat_setInnerAction : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_Repeat_initWithAction(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Repeat* cobj = (CrossApp::Repeat *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Repeat_initWithAction : Invalid Native Object");
    if (argc == 2) {
        CrossApp::FiniteTimeAction* arg0 = nullptr;
        uint32_t arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::FiniteTimeAction*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Repeat_initWithAction : Error processing arguments");
        bool ret = cobj->initWithAction(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Repeat_initWithAction : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_Repeat_getInnerAction(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Repeat* cobj = (CrossApp::Repeat *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Repeat_getInnerAction : Invalid Native Object");
    if (argc == 0) {
        CrossApp::FiniteTimeAction* ret = cobj->getInnerAction();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::FiniteTimeAction>(cx, (CrossApp::FiniteTimeAction*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Repeat_getInnerAction : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_Repeat_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::FiniteTimeAction* arg0 = nullptr;
        uint32_t arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::FiniteTimeAction*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Repeat_create : Error processing arguments");
        CrossApp::Repeat* ret = CrossApp::Repeat::create(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Repeat>(cx, (CrossApp::Repeat*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_Repeat_create : wrong number of arguments");
    return false;
}
bool js_crossapp_Repeat_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::Repeat* cobj = new (std::nothrow) CrossApp::Repeat();
    TypeTest<CrossApp::Repeat> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::Repeat");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_Repeat_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::Repeat *nobj = new (std::nothrow) CrossApp::Repeat();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::Repeat");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionInterval_prototype;

void js_CrossApp_Repeat_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (Repeat)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::Repeat *nobj = static_cast<CrossApp::Repeat *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_Repeat(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_Repeat_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_Repeat_class->name = "Repeat";
    jsb_CrossApp_Repeat_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_Repeat_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_Repeat_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_Repeat_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_Repeat_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_Repeat_class->resolve = JS_ResolveStub;
    jsb_CrossApp_Repeat_class->convert = JS_ConvertStub;
    jsb_CrossApp_Repeat_class->finalize = js_CrossApp_Repeat_finalize;
    jsb_CrossApp_Repeat_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setInnerAction", js_crossapp_Repeat_setInnerAction, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithAction", js_crossapp_Repeat_initWithAction, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getInnerAction", js_crossapp_Repeat_getInnerAction, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_Repeat_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_Repeat_create, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_Repeat_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInterval_prototype),
        jsb_CrossApp_Repeat_class,
        js_crossapp_Repeat_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "Repeat", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::Repeat> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_Repeat_class;
        p->proto = jsb_CrossApp_Repeat_prototype;
        p->parentProto = jsb_CrossApp_ActionInterval_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.Repeat.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_RepeatForever_class;
JSObject *jsb_CrossApp_RepeatForever_prototype;

bool js_crossapp_RepeatForever_setInnerAction(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::RepeatForever* cobj = (CrossApp::RepeatForever *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_RepeatForever_setInnerAction : Invalid Native Object");
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_RepeatForever_setInnerAction : Error processing arguments");
        cobj->setInnerAction(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_RepeatForever_setInnerAction : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_RepeatForever_initWithAction(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::RepeatForever* cobj = (CrossApp::RepeatForever *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_RepeatForever_initWithAction : Invalid Native Object");
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_RepeatForever_initWithAction : Error processing arguments");
        bool ret = cobj->initWithAction(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_RepeatForever_initWithAction : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_RepeatForever_getInnerAction(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::RepeatForever* cobj = (CrossApp::RepeatForever *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_RepeatForever_getInnerAction : Invalid Native Object");
    if (argc == 0) {
        CrossApp::ActionInterval* ret = cobj->getInnerAction();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::ActionInterval>(cx, (CrossApp::ActionInterval*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_RepeatForever_getInnerAction : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_RepeatForever_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_RepeatForever_create : Error processing arguments");
        CrossApp::RepeatForever* ret = CrossApp::RepeatForever::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::RepeatForever>(cx, (CrossApp::RepeatForever*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_RepeatForever_create : wrong number of arguments");
    return false;
}
bool js_crossapp_RepeatForever_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::RepeatForever* cobj = new (std::nothrow) CrossApp::RepeatForever();
    TypeTest<CrossApp::RepeatForever> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::RepeatForever");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_RepeatForever_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::RepeatForever *nobj = new (std::nothrow) CrossApp::RepeatForever();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::RepeatForever");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionInterval_prototype;

void js_CrossApp_RepeatForever_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (RepeatForever)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::RepeatForever *nobj = static_cast<CrossApp::RepeatForever *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_RepeatForever(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_RepeatForever_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_RepeatForever_class->name = "RepeatForever";
    jsb_CrossApp_RepeatForever_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_RepeatForever_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_RepeatForever_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_RepeatForever_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_RepeatForever_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_RepeatForever_class->resolve = JS_ResolveStub;
    jsb_CrossApp_RepeatForever_class->convert = JS_ConvertStub;
    jsb_CrossApp_RepeatForever_class->finalize = js_CrossApp_RepeatForever_finalize;
    jsb_CrossApp_RepeatForever_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setInnerAction", js_crossapp_RepeatForever_setInnerAction, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithAction", js_crossapp_RepeatForever_initWithAction, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getInnerAction", js_crossapp_RepeatForever_getInnerAction, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_RepeatForever_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_RepeatForever_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_RepeatForever_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInterval_prototype),
        jsb_CrossApp_RepeatForever_class,
        js_crossapp_RepeatForever_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "RepeatForever", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::RepeatForever> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_RepeatForever_class;
        p->proto = jsb_CrossApp_RepeatForever_prototype;
        p->parentProto = jsb_CrossApp_ActionInterval_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.RepeatForever.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_Spawn_class;
JSObject *jsb_CrossApp_Spawn_prototype;

bool js_crossapp_Spawn_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Spawn* cobj = (CrossApp::Spawn *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Spawn_init : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAVector<CrossApp::FiniteTimeAction *> arg0;
        ok &= jsval_to_cavector(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Spawn_init : Error processing arguments");
        bool ret = cobj->init(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Spawn_init : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_Spawn_initWithTwoActions(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Spawn* cobj = (CrossApp::Spawn *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Spawn_initWithTwoActions : Invalid Native Object");
    if (argc == 2) {
        CrossApp::FiniteTimeAction* arg0 = nullptr;
        CrossApp::FiniteTimeAction* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::FiniteTimeAction*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::FiniteTimeAction*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Spawn_initWithTwoActions : Error processing arguments");
        bool ret = cobj->initWithTwoActions(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Spawn_initWithTwoActions : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_Spawn_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAVector<CrossApp::FiniteTimeAction *> arg0;
        ok &= jsval_to_cavector(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Spawn_create : Error processing arguments");
        CrossApp::Spawn* ret = CrossApp::Spawn::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Spawn>(cx, (CrossApp::Spawn*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_Spawn_create : wrong number of arguments");
    return false;
}
bool js_crossapp_Spawn_createWithTwoActions(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::FiniteTimeAction* arg0 = nullptr;
        CrossApp::FiniteTimeAction* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::FiniteTimeAction*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::FiniteTimeAction*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Spawn_createWithTwoActions : Error processing arguments");
        CrossApp::Spawn* ret = CrossApp::Spawn::createWithTwoActions(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Spawn>(cx, (CrossApp::Spawn*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_Spawn_createWithTwoActions : wrong number of arguments");
    return false;
}
bool js_crossapp_Spawn_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::Spawn* cobj = new (std::nothrow) CrossApp::Spawn();
    TypeTest<CrossApp::Spawn> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::Spawn");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_Spawn_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::Spawn *nobj = new (std::nothrow) CrossApp::Spawn();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::Spawn");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionInterval_prototype;

void js_CrossApp_Spawn_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (Spawn)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::Spawn *nobj = static_cast<CrossApp::Spawn *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_Spawn(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_Spawn_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_Spawn_class->name = "Spawn";
    jsb_CrossApp_Spawn_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_Spawn_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_Spawn_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_Spawn_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_Spawn_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_Spawn_class->resolve = JS_ResolveStub;
    jsb_CrossApp_Spawn_class->convert = JS_ConvertStub;
    jsb_CrossApp_Spawn_class->finalize = js_CrossApp_Spawn_finalize;
    jsb_CrossApp_Spawn_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("init", js_crossapp_Spawn_init, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithTwoActions", js_crossapp_Spawn_initWithTwoActions, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_Spawn_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_Spawn_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithTwoActions", js_crossapp_Spawn_createWithTwoActions, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_Spawn_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInterval_prototype),
        jsb_CrossApp_Spawn_class,
        js_crossapp_Spawn_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "Spawn", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::Spawn> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_Spawn_class;
        p->proto = jsb_CrossApp_Spawn_prototype;
        p->parentProto = jsb_CrossApp_ActionInterval_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.Spawn.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_RotateTo_class;
JSObject *jsb_CrossApp_RotateTo_prototype;

bool js_crossapp_RotateTo_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::RotateTo* cobj = (CrossApp::RotateTo *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_RotateTo_initWithDuration : Invalid Native Object");
    if (argc == 2) {
        double arg0 = 0;
        CrossApp::DPoint3D arg1;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= jsval_to_dpoint3d(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_RotateTo_initWithDuration : Error processing arguments");
        bool ret = cobj->initWithDuration(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_RotateTo_initWithDuration : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_RotateTo_initWithDurationZ(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::RotateTo* cobj = (CrossApp::RotateTo *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_RotateTo_initWithDurationZ : Invalid Native Object");
    if (argc == 2) {
        double arg0 = 0;
        double arg1 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_RotateTo_initWithDurationZ : Error processing arguments");
        bool ret = cobj->initWithDurationZ(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_RotateTo_initWithDurationZ : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_RotateTo_initWithDurationY(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::RotateTo* cobj = (CrossApp::RotateTo *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_RotateTo_initWithDurationY : Invalid Native Object");
    if (argc == 2) {
        double arg0 = 0;
        double arg1 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_RotateTo_initWithDurationY : Error processing arguments");
        bool ret = cobj->initWithDurationY(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_RotateTo_initWithDurationY : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_RotateTo_initWithDurationX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::RotateTo* cobj = (CrossApp::RotateTo *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_RotateTo_initWithDurationX : Invalid Native Object");
    if (argc == 2) {
        double arg0 = 0;
        double arg1 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_RotateTo_initWithDurationX : Error processing arguments");
        bool ret = cobj->initWithDurationX(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_RotateTo_initWithDurationX : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_RotateTo_createZ(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        double arg0 = 0;
        double arg1 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_RotateTo_createZ : Error processing arguments");
        CrossApp::RotateTo* ret = CrossApp::RotateTo::createZ(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::RotateTo>(cx, (CrossApp::RotateTo*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_RotateTo_createZ : wrong number of arguments");
    return false;
}
bool js_crossapp_RotateTo_createY(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        double arg0 = 0;
        double arg1 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_RotateTo_createY : Error processing arguments");
        CrossApp::RotateTo* ret = CrossApp::RotateTo::createY(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::RotateTo>(cx, (CrossApp::RotateTo*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_RotateTo_createY : wrong number of arguments");
    return false;
}
bool js_crossapp_RotateTo_createX(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        double arg0 = 0;
        double arg1 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_RotateTo_createX : Error processing arguments");
        CrossApp::RotateTo* ret = CrossApp::RotateTo::createX(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::RotateTo>(cx, (CrossApp::RotateTo*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_RotateTo_createX : wrong number of arguments");
    return false;
}
bool js_crossapp_RotateTo_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        double arg0 = 0;
        CrossApp::DPoint3D arg1;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= jsval_to_dpoint3d(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_RotateTo_create : Error processing arguments");
        CrossApp::RotateTo* ret = CrossApp::RotateTo::create(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::RotateTo>(cx, (CrossApp::RotateTo*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_RotateTo_create : wrong number of arguments");
    return false;
}
bool js_crossapp_RotateTo_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::RotateTo* cobj = new (std::nothrow) CrossApp::RotateTo();
    TypeTest<CrossApp::RotateTo> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::RotateTo");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_RotateTo_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::RotateTo *nobj = new (std::nothrow) CrossApp::RotateTo();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::RotateTo");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionInterval_prototype;

void js_CrossApp_RotateTo_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (RotateTo)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::RotateTo *nobj = static_cast<CrossApp::RotateTo *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_RotateTo(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_RotateTo_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_RotateTo_class->name = "RotateTo";
    jsb_CrossApp_RotateTo_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_RotateTo_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_RotateTo_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_RotateTo_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_RotateTo_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_RotateTo_class->resolve = JS_ResolveStub;
    jsb_CrossApp_RotateTo_class->convert = JS_ConvertStub;
    jsb_CrossApp_RotateTo_class->finalize = js_CrossApp_RotateTo_finalize;
    jsb_CrossApp_RotateTo_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("initWithDuration", js_crossapp_RotateTo_initWithDuration, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithDurationZ", js_crossapp_RotateTo_initWithDurationZ, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithDurationY", js_crossapp_RotateTo_initWithDurationY, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithDurationX", js_crossapp_RotateTo_initWithDurationX, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_RotateTo_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createZ", js_crossapp_RotateTo_createZ, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createY", js_crossapp_RotateTo_createY, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createX", js_crossapp_RotateTo_createX, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("create", js_crossapp_RotateTo_create, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_RotateTo_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInterval_prototype),
        jsb_CrossApp_RotateTo_class,
        js_crossapp_RotateTo_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "RotateTo", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::RotateTo> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_RotateTo_class;
        p->proto = jsb_CrossApp_RotateTo_prototype;
        p->parentProto = jsb_CrossApp_ActionInterval_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.RotateTo.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_RotateBy_class;
JSObject *jsb_CrossApp_RotateBy_prototype;

bool js_crossapp_RotateBy_initWithDurationZ(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::RotateBy* cobj = (CrossApp::RotateBy *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_RotateBy_initWithDurationZ : Invalid Native Object");
    if (argc == 2) {
        double arg0 = 0;
        double arg1 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_RotateBy_initWithDurationZ : Error processing arguments");
        bool ret = cobj->initWithDurationZ(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_RotateBy_initWithDurationZ : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_RotateBy_initWithDurationY(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::RotateBy* cobj = (CrossApp::RotateBy *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_RotateBy_initWithDurationY : Invalid Native Object");
    if (argc == 2) {
        double arg0 = 0;
        double arg1 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_RotateBy_initWithDurationY : Error processing arguments");
        bool ret = cobj->initWithDurationY(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_RotateBy_initWithDurationY : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_RotateBy_initWithDurationX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::RotateBy* cobj = (CrossApp::RotateBy *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_RotateBy_initWithDurationX : Invalid Native Object");
    if (argc == 2) {
        double arg0 = 0;
        double arg1 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_RotateBy_initWithDurationX : Error processing arguments");
        bool ret = cobj->initWithDurationX(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_RotateBy_initWithDurationX : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_RotateBy_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::RotateBy* cobj = (CrossApp::RotateBy *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_RotateBy_initWithDuration : Invalid Native Object");
    if (argc == 2) {
        double arg0 = 0;
        CrossApp::DPoint3D arg1;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= jsval_to_dpoint3d(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_RotateBy_initWithDuration : Error processing arguments");
        bool ret = cobj->initWithDuration(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_RotateBy_initWithDuration : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_RotateBy_createZ(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        double arg0 = 0;
        double arg1 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_RotateBy_createZ : Error processing arguments");
        CrossApp::RotateBy* ret = CrossApp::RotateBy::createZ(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::RotateBy>(cx, (CrossApp::RotateBy*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_RotateBy_createZ : wrong number of arguments");
    return false;
}
bool js_crossapp_RotateBy_createY(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        double arg0 = 0;
        double arg1 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_RotateBy_createY : Error processing arguments");
        CrossApp::RotateBy* ret = CrossApp::RotateBy::createY(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::RotateBy>(cx, (CrossApp::RotateBy*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_RotateBy_createY : wrong number of arguments");
    return false;
}
bool js_crossapp_RotateBy_createX(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        double arg0 = 0;
        double arg1 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_RotateBy_createX : Error processing arguments");
        CrossApp::RotateBy* ret = CrossApp::RotateBy::createX(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::RotateBy>(cx, (CrossApp::RotateBy*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_RotateBy_createX : wrong number of arguments");
    return false;
}
bool js_crossapp_RotateBy_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        double arg0 = 0;
        CrossApp::DPoint3D arg1;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= jsval_to_dpoint3d(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_RotateBy_create : Error processing arguments");
        CrossApp::RotateBy* ret = CrossApp::RotateBy::create(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::RotateBy>(cx, (CrossApp::RotateBy*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_RotateBy_create : wrong number of arguments");
    return false;
}
bool js_crossapp_RotateBy_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::RotateBy* cobj = new (std::nothrow) CrossApp::RotateBy();
    TypeTest<CrossApp::RotateBy> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::RotateBy");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_RotateBy_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::RotateBy *nobj = new (std::nothrow) CrossApp::RotateBy();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::RotateBy");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionInterval_prototype;

void js_CrossApp_RotateBy_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (RotateBy)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::RotateBy *nobj = static_cast<CrossApp::RotateBy *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_RotateBy(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_RotateBy_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_RotateBy_class->name = "RotateBy";
    jsb_CrossApp_RotateBy_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_RotateBy_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_RotateBy_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_RotateBy_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_RotateBy_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_RotateBy_class->resolve = JS_ResolveStub;
    jsb_CrossApp_RotateBy_class->convert = JS_ConvertStub;
    jsb_CrossApp_RotateBy_class->finalize = js_CrossApp_RotateBy_finalize;
    jsb_CrossApp_RotateBy_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("initWithDurationZ", js_crossapp_RotateBy_initWithDurationZ, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithDurationY", js_crossapp_RotateBy_initWithDurationY, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithDurationX", js_crossapp_RotateBy_initWithDurationX, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithDuration", js_crossapp_RotateBy_initWithDuration, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_RotateBy_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createZ", js_crossapp_RotateBy_createZ, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createY", js_crossapp_RotateBy_createY, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createX", js_crossapp_RotateBy_createX, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("create", js_crossapp_RotateBy_create, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_RotateBy_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInterval_prototype),
        jsb_CrossApp_RotateBy_class,
        js_crossapp_RotateBy_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "RotateBy", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::RotateBy> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_RotateBy_class;
        p->proto = jsb_CrossApp_RotateBy_prototype;
        p->parentProto = jsb_CrossApp_ActionInterval_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.RotateBy.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_MoveBy_class;
JSObject *jsb_CrossApp_MoveBy_prototype;

bool js_crossapp_MoveBy_initWithDuration3(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::MoveBy* cobj = (CrossApp::MoveBy *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_MoveBy_initWithDuration3 : Invalid Native Object");
    if (argc == 2) {
        double arg0 = 0;
        CrossApp::DPoint3D arg1;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= jsval_to_dpoint3d(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_MoveBy_initWithDuration3 : Error processing arguments");
        bool ret = cobj->initWithDuration3(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_MoveBy_initWithDuration3 : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_MoveBy_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::MoveBy* cobj = (CrossApp::MoveBy *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_MoveBy_initWithDuration : Invalid Native Object");
    if (argc == 2) {
        double arg0 = 0;
        CrossApp::DPoint arg1;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= jsval_to_dpoint(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_MoveBy_initWithDuration : Error processing arguments");
        bool ret = cobj->initWithDuration(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_MoveBy_initWithDuration : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_MoveBy_create3(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        double arg0 = 0;
        CrossApp::DPoint3D arg1;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= jsval_to_dpoint3d(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_MoveBy_create3 : Error processing arguments");
        CrossApp::MoveBy* ret = CrossApp::MoveBy::create3(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::MoveBy>(cx, (CrossApp::MoveBy*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_MoveBy_create3 : wrong number of arguments");
    return false;
}
bool js_crossapp_MoveBy_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        double arg0 = 0;
        CrossApp::DPoint arg1;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= jsval_to_dpoint(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_MoveBy_create : Error processing arguments");
        CrossApp::MoveBy* ret = CrossApp::MoveBy::create(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::MoveBy>(cx, (CrossApp::MoveBy*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_MoveBy_create : wrong number of arguments");
    return false;
}
bool js_crossapp_MoveBy_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::MoveBy* cobj = new (std::nothrow) CrossApp::MoveBy();
    TypeTest<CrossApp::MoveBy> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::MoveBy");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_MoveBy_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::MoveBy *nobj = new (std::nothrow) CrossApp::MoveBy();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::MoveBy");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionInterval_prototype;

void js_CrossApp_MoveBy_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (MoveBy)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::MoveBy *nobj = static_cast<CrossApp::MoveBy *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_MoveBy(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_MoveBy_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_MoveBy_class->name = "MoveBy";
    jsb_CrossApp_MoveBy_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_MoveBy_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_MoveBy_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_MoveBy_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_MoveBy_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_MoveBy_class->resolve = JS_ResolveStub;
    jsb_CrossApp_MoveBy_class->convert = JS_ConvertStub;
    jsb_CrossApp_MoveBy_class->finalize = js_CrossApp_MoveBy_finalize;
    jsb_CrossApp_MoveBy_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("initWithDuration3", js_crossapp_MoveBy_initWithDuration3, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithDuration", js_crossapp_MoveBy_initWithDuration, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_MoveBy_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create3", js_crossapp_MoveBy_create3, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("create", js_crossapp_MoveBy_create, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_MoveBy_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInterval_prototype),
        jsb_CrossApp_MoveBy_class,
        js_crossapp_MoveBy_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "MoveBy", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::MoveBy> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_MoveBy_class;
        p->proto = jsb_CrossApp_MoveBy_prototype;
        p->parentProto = jsb_CrossApp_ActionInterval_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.MoveBy.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_MoveTo_class;
JSObject *jsb_CrossApp_MoveTo_prototype;

bool js_crossapp_MoveTo_initWithDuration3(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::MoveTo* cobj = (CrossApp::MoveTo *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_MoveTo_initWithDuration3 : Invalid Native Object");
    if (argc == 2) {
        double arg0 = 0;
        CrossApp::DPoint3D arg1;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= jsval_to_dpoint3d(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_MoveTo_initWithDuration3 : Error processing arguments");
        bool ret = cobj->initWithDuration3(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_MoveTo_initWithDuration3 : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_MoveTo_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::MoveTo* cobj = (CrossApp::MoveTo *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_MoveTo_initWithDuration : Invalid Native Object");
    if (argc == 2) {
        double arg0 = 0;
        CrossApp::DPoint arg1;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= jsval_to_dpoint(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_MoveTo_initWithDuration : Error processing arguments");
        bool ret = cobj->initWithDuration(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_MoveTo_initWithDuration : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_MoveTo_create3(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        double arg0 = 0;
        CrossApp::DPoint3D arg1;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= jsval_to_dpoint3d(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_MoveTo_create3 : Error processing arguments");
        CrossApp::MoveTo* ret = CrossApp::MoveTo::create3(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::MoveTo>(cx, (CrossApp::MoveTo*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_MoveTo_create3 : wrong number of arguments");
    return false;
}
bool js_crossapp_MoveTo_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        double arg0 = 0;
        CrossApp::DPoint arg1;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= jsval_to_dpoint(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_MoveTo_create : Error processing arguments");
        CrossApp::MoveTo* ret = CrossApp::MoveTo::create(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::MoveTo>(cx, (CrossApp::MoveTo*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_MoveTo_create : wrong number of arguments");
    return false;
}
bool js_crossapp_MoveTo_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::MoveTo* cobj = new (std::nothrow) CrossApp::MoveTo();
    TypeTest<CrossApp::MoveTo> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::MoveTo");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_MoveTo_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::MoveTo *nobj = new (std::nothrow) CrossApp::MoveTo();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::MoveTo");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_MoveBy_prototype;

void js_CrossApp_MoveTo_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (MoveTo)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::MoveTo *nobj = static_cast<CrossApp::MoveTo *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_MoveTo(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_MoveTo_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_MoveTo_class->name = "MoveTo";
    jsb_CrossApp_MoveTo_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_MoveTo_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_MoveTo_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_MoveTo_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_MoveTo_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_MoveTo_class->resolve = JS_ResolveStub;
    jsb_CrossApp_MoveTo_class->convert = JS_ConvertStub;
    jsb_CrossApp_MoveTo_class->finalize = js_CrossApp_MoveTo_finalize;
    jsb_CrossApp_MoveTo_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("initWithDuration3", js_crossapp_MoveTo_initWithDuration3, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithDuration", js_crossapp_MoveTo_initWithDuration, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_MoveTo_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create3", js_crossapp_MoveTo_create3, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("create", js_crossapp_MoveTo_create, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_MoveTo_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_MoveBy_prototype),
        jsb_CrossApp_MoveTo_class,
        js_crossapp_MoveTo_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "MoveTo", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::MoveTo> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_MoveTo_class;
        p->proto = jsb_CrossApp_MoveTo_prototype;
        p->parentProto = jsb_CrossApp_MoveBy_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.MoveTo.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_SkewTo_class;
JSObject *jsb_CrossApp_SkewTo_prototype;

bool js_crossapp_SkewTo_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::SkewTo* cobj = (CrossApp::SkewTo *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_SkewTo_initWithDuration : Invalid Native Object");
    if (argc == 3) {
        double arg0 = 0;
        double arg1 = 0;
        double arg2 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_SkewTo_initWithDuration : Error processing arguments");
        bool ret = cobj->initWithDuration(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_SkewTo_initWithDuration : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_crossapp_SkewTo_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 3) {
        double arg0 = 0;
        double arg1 = 0;
        double arg2 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_SkewTo_create : Error processing arguments");
        CrossApp::SkewTo* ret = CrossApp::SkewTo::create(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::SkewTo>(cx, (CrossApp::SkewTo*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_SkewTo_create : wrong number of arguments");
    return false;
}
bool js_crossapp_SkewTo_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::SkewTo* cobj = new (std::nothrow) CrossApp::SkewTo();
    TypeTest<CrossApp::SkewTo> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::SkewTo");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_ActionInterval_prototype;

void js_CrossApp_SkewTo_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (SkewTo)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::SkewTo *nobj = static_cast<CrossApp::SkewTo *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_SkewTo(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_SkewTo_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_SkewTo_class->name = "SkewTo";
    jsb_CrossApp_SkewTo_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_SkewTo_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_SkewTo_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_SkewTo_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_SkewTo_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_SkewTo_class->resolve = JS_ResolveStub;
    jsb_CrossApp_SkewTo_class->convert = JS_ConvertStub;
    jsb_CrossApp_SkewTo_class->finalize = js_CrossApp_SkewTo_finalize;
    jsb_CrossApp_SkewTo_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("initWithDuration", js_crossapp_SkewTo_initWithDuration, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_SkewTo_create, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_SkewTo_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInterval_prototype),
        jsb_CrossApp_SkewTo_class,
        js_crossapp_SkewTo_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "SkewTo", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::SkewTo> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_SkewTo_class;
        p->proto = jsb_CrossApp_SkewTo_prototype;
        p->parentProto = jsb_CrossApp_ActionInterval_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_SkewBy_class;
JSObject *jsb_CrossApp_SkewBy_prototype;

bool js_crossapp_SkewBy_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::SkewBy* cobj = (CrossApp::SkewBy *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_SkewBy_initWithDuration : Invalid Native Object");
    if (argc == 3) {
        double arg0 = 0;
        double arg1 = 0;
        double arg2 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_SkewBy_initWithDuration : Error processing arguments");
        bool ret = cobj->initWithDuration(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_SkewBy_initWithDuration : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_crossapp_SkewBy_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 3) {
        double arg0 = 0;
        double arg1 = 0;
        double arg2 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_SkewBy_create : Error processing arguments");
        CrossApp::SkewBy* ret = CrossApp::SkewBy::create(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::SkewBy>(cx, (CrossApp::SkewBy*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_SkewBy_create : wrong number of arguments");
    return false;
}
bool js_crossapp_SkewBy_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::SkewBy* cobj = new (std::nothrow) CrossApp::SkewBy();
    TypeTest<CrossApp::SkewBy> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::SkewBy");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_SkewTo_prototype;

void js_CrossApp_SkewBy_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (SkewBy)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::SkewBy *nobj = static_cast<CrossApp::SkewBy *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_SkewBy(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_SkewBy_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_SkewBy_class->name = "SkewBy";
    jsb_CrossApp_SkewBy_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_SkewBy_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_SkewBy_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_SkewBy_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_SkewBy_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_SkewBy_class->resolve = JS_ResolveStub;
    jsb_CrossApp_SkewBy_class->convert = JS_ConvertStub;
    jsb_CrossApp_SkewBy_class->finalize = js_CrossApp_SkewBy_finalize;
    jsb_CrossApp_SkewBy_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("initWithDuration", js_crossapp_SkewBy_initWithDuration, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_SkewBy_create, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_SkewBy_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_SkewTo_prototype),
        jsb_CrossApp_SkewBy_class,
        js_crossapp_SkewBy_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "SkewBy", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::SkewBy> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_SkewBy_class;
        p->proto = jsb_CrossApp_SkewBy_prototype;
        p->parentProto = jsb_CrossApp_SkewTo_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_JumpBy_class;
JSObject *jsb_CrossApp_JumpBy_prototype;

bool js_crossapp_JumpBy_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::JumpBy* cobj = (CrossApp::JumpBy *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_JumpBy_initWithDuration : Invalid Native Object");
    if (argc == 4) {
        double arg0 = 0;
        CrossApp::DPoint arg1;
        double arg2 = 0;
        int arg3 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= jsval_to_dpoint(cx, args.get(1), &arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        ok &= jsval_to_int32(cx, args.get(3), (int32_t *)&arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_JumpBy_initWithDuration : Error processing arguments");
        bool ret = cobj->initWithDuration(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_JumpBy_initWithDuration : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_crossapp_JumpBy_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 4) {
        double arg0 = 0;
        CrossApp::DPoint arg1;
        double arg2 = 0;
        int arg3 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= jsval_to_dpoint(cx, args.get(1), &arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        ok &= jsval_to_int32(cx, args.get(3), (int32_t *)&arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_JumpBy_create : Error processing arguments");
        CrossApp::JumpBy* ret = CrossApp::JumpBy::create(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::JumpBy>(cx, (CrossApp::JumpBy*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_JumpBy_create : wrong number of arguments");
    return false;
}
bool js_crossapp_JumpBy_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::JumpBy* cobj = new (std::nothrow) CrossApp::JumpBy();
    TypeTest<CrossApp::JumpBy> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::JumpBy");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_ActionInterval_prototype;

void js_CrossApp_JumpBy_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (JumpBy)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::JumpBy *nobj = static_cast<CrossApp::JumpBy *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_JumpBy(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_JumpBy_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_JumpBy_class->name = "JumpBy";
    jsb_CrossApp_JumpBy_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_JumpBy_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_JumpBy_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_JumpBy_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_JumpBy_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_JumpBy_class->resolve = JS_ResolveStub;
    jsb_CrossApp_JumpBy_class->convert = JS_ConvertStub;
    jsb_CrossApp_JumpBy_class->finalize = js_CrossApp_JumpBy_finalize;
    jsb_CrossApp_JumpBy_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("initWithDuration", js_crossapp_JumpBy_initWithDuration, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_JumpBy_create, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_JumpBy_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInterval_prototype),
        jsb_CrossApp_JumpBy_class,
        js_crossapp_JumpBy_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "JumpBy", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::JumpBy> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_JumpBy_class;
        p->proto = jsb_CrossApp_JumpBy_prototype;
        p->parentProto = jsb_CrossApp_ActionInterval_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_JumpTo_class;
JSObject *jsb_CrossApp_JumpTo_prototype;

bool js_crossapp_JumpTo_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::JumpTo* cobj = (CrossApp::JumpTo *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_JumpTo_initWithDuration : Invalid Native Object");
    if (argc == 4) {
        double arg0 = 0;
        CrossApp::DPoint arg1;
        double arg2 = 0;
        int arg3 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= jsval_to_dpoint(cx, args.get(1), &arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        ok &= jsval_to_int32(cx, args.get(3), (int32_t *)&arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_JumpTo_initWithDuration : Error processing arguments");
        bool ret = cobj->initWithDuration(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_JumpTo_initWithDuration : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_crossapp_JumpTo_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 4) {
        double arg0 = 0;
        CrossApp::DPoint arg1;
        double arg2 = 0;
        int arg3 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= jsval_to_dpoint(cx, args.get(1), &arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        ok &= jsval_to_int32(cx, args.get(3), (int32_t *)&arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_JumpTo_create : Error processing arguments");
        CrossApp::JumpTo* ret = CrossApp::JumpTo::create(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::JumpTo>(cx, (CrossApp::JumpTo*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_JumpTo_create : wrong number of arguments");
    return false;
}
bool js_crossapp_JumpTo_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::JumpTo* cobj = new (std::nothrow) CrossApp::JumpTo();
    TypeTest<CrossApp::JumpTo> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::JumpTo");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_JumpBy_prototype;

void js_CrossApp_JumpTo_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (JumpTo)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::JumpTo *nobj = static_cast<CrossApp::JumpTo *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_JumpTo(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_JumpTo_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_JumpTo_class->name = "JumpTo";
    jsb_CrossApp_JumpTo_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_JumpTo_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_JumpTo_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_JumpTo_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_JumpTo_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_JumpTo_class->resolve = JS_ResolveStub;
    jsb_CrossApp_JumpTo_class->convert = JS_ConvertStub;
    jsb_CrossApp_JumpTo_class->finalize = js_CrossApp_JumpTo_finalize;
    jsb_CrossApp_JumpTo_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("initWithDuration", js_crossapp_JumpTo_initWithDuration, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_JumpTo_create, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_JumpTo_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_JumpBy_prototype),
        jsb_CrossApp_JumpTo_class,
        js_crossapp_JumpTo_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "JumpTo", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::JumpTo> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_JumpTo_class;
        p->proto = jsb_CrossApp_JumpTo_prototype;
        p->parentProto = jsb_CrossApp_JumpBy_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_BezierBy_class;
JSObject *jsb_CrossApp_BezierBy_prototype;

bool js_crossapp_BezierBy_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::BezierBy* cobj = (CrossApp::BezierBy *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_BezierBy_initWithDuration : Invalid Native Object");
    if (argc == 2) {
        double arg0 = 0;
        CrossApp::_ccBezierConfig arg1;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        #pragma warning NO CONVERSION TO NATIVE FOR _ccBezierConfig
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_BezierBy_initWithDuration : Error processing arguments");
        bool ret = cobj->initWithDuration(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_BezierBy_initWithDuration : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_BezierBy_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        double arg0 = 0;
        CrossApp::_ccBezierConfig arg1;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        #pragma warning NO CONVERSION TO NATIVE FOR _ccBezierConfig
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_BezierBy_create : Error processing arguments");
        CrossApp::BezierBy* ret = CrossApp::BezierBy::create(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::BezierBy>(cx, (CrossApp::BezierBy*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_BezierBy_create : wrong number of arguments");
    return false;
}
bool js_crossapp_BezierBy_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::BezierBy* cobj = new (std::nothrow) CrossApp::BezierBy();
    TypeTest<CrossApp::BezierBy> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::BezierBy");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_ActionInterval_prototype;

void js_CrossApp_BezierBy_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (BezierBy)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::BezierBy *nobj = static_cast<CrossApp::BezierBy *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_BezierBy(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_BezierBy_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_BezierBy_class->name = "BezierBy";
    jsb_CrossApp_BezierBy_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_BezierBy_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_BezierBy_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_BezierBy_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_BezierBy_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_BezierBy_class->resolve = JS_ResolveStub;
    jsb_CrossApp_BezierBy_class->convert = JS_ConvertStub;
    jsb_CrossApp_BezierBy_class->finalize = js_CrossApp_BezierBy_finalize;
    jsb_CrossApp_BezierBy_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("initWithDuration", js_crossapp_BezierBy_initWithDuration, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_BezierBy_create, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_BezierBy_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInterval_prototype),
        jsb_CrossApp_BezierBy_class,
        js_crossapp_BezierBy_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "BezierBy", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::BezierBy> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_BezierBy_class;
        p->proto = jsb_CrossApp_BezierBy_prototype;
        p->parentProto = jsb_CrossApp_ActionInterval_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_BezierTo_class;
JSObject *jsb_CrossApp_BezierTo_prototype;

bool js_crossapp_BezierTo_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::BezierTo* cobj = (CrossApp::BezierTo *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_BezierTo_initWithDuration : Invalid Native Object");
    if (argc == 2) {
        double arg0 = 0;
        CrossApp::_ccBezierConfig arg1;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        #pragma warning NO CONVERSION TO NATIVE FOR _ccBezierConfig
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_BezierTo_initWithDuration : Error processing arguments");
        bool ret = cobj->initWithDuration(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_BezierTo_initWithDuration : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_BezierTo_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        double arg0 = 0;
        CrossApp::_ccBezierConfig arg1;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        #pragma warning NO CONVERSION TO NATIVE FOR _ccBezierConfig
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_BezierTo_create : Error processing arguments");
        CrossApp::BezierTo* ret = CrossApp::BezierTo::create(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::BezierTo>(cx, (CrossApp::BezierTo*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_BezierTo_create : wrong number of arguments");
    return false;
}
bool js_crossapp_BezierTo_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::BezierTo* cobj = new (std::nothrow) CrossApp::BezierTo();
    TypeTest<CrossApp::BezierTo> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::BezierTo");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_BezierBy_prototype;

void js_CrossApp_BezierTo_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (BezierTo)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::BezierTo *nobj = static_cast<CrossApp::BezierTo *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_BezierTo(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_BezierTo_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_BezierTo_class->name = "BezierTo";
    jsb_CrossApp_BezierTo_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_BezierTo_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_BezierTo_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_BezierTo_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_BezierTo_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_BezierTo_class->resolve = JS_ResolveStub;
    jsb_CrossApp_BezierTo_class->convert = JS_ConvertStub;
    jsb_CrossApp_BezierTo_class->finalize = js_CrossApp_BezierTo_finalize;
    jsb_CrossApp_BezierTo_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("initWithDuration", js_crossapp_BezierTo_initWithDuration, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_BezierTo_create, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_BezierTo_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_BezierBy_prototype),
        jsb_CrossApp_BezierTo_class,
        js_crossapp_BezierTo_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "BezierTo", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::BezierTo> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_BezierTo_class;
        p->proto = jsb_CrossApp_BezierTo_prototype;
        p->parentProto = jsb_CrossApp_BezierBy_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_ScaleTo_class;
JSObject *jsb_CrossApp_ScaleTo_prototype;

bool js_crossapp_ScaleTo_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::ScaleTo* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::ScaleTo *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ScaleTo_initWithDuration : Invalid Native Object");
    do {
        if (argc == 3) {
            double arg0 = 0;
            ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            double arg2 = 0;
            ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
            if (!ok) { ok = true; break; }
            bool ret = cobj->initWithDuration(arg0, arg1, arg2);
            jsval jsret = JSVAL_NULL;
            jsret = BOOLEAN_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 2) {
            double arg0 = 0;
            ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            bool ret = cobj->initWithDuration(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            jsret = BOOLEAN_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 4) {
            double arg0 = 0;
            ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            double arg2 = 0;
            ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
            if (!ok) { ok = true; break; }
            double arg3 = 0;
            ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
            if (!ok) { ok = true; break; }
            bool ret = cobj->initWithDuration(arg0, arg1, arg2, arg3);
            jsval jsret = JSVAL_NULL;
            jsret = BOOLEAN_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_ScaleTo_initWithDuration : wrong number of arguments");
    return false;
}
bool js_crossapp_ScaleTo_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 3) {
            double arg0 = 0;
            ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            double arg2 = 0;
            ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
            if (!ok) { ok = true; break; }
            CrossApp::ScaleTo* ret = CrossApp::ScaleTo::create(arg0, arg1, arg2);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::ScaleTo>(cx, (CrossApp::ScaleTo*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 2) {
            double arg0 = 0;
            ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            CrossApp::ScaleTo* ret = CrossApp::ScaleTo::create(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::ScaleTo>(cx, (CrossApp::ScaleTo*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 4) {
            double arg0 = 0;
            ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            double arg2 = 0;
            ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
            if (!ok) { ok = true; break; }
            double arg3 = 0;
            ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
            if (!ok) { ok = true; break; }
            CrossApp::ScaleTo* ret = CrossApp::ScaleTo::create(arg0, arg1, arg2, arg3);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::ScaleTo>(cx, (CrossApp::ScaleTo*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_crossapp_ScaleTo_create : wrong number of arguments");
    return false;
}
bool js_crossapp_ScaleTo_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::ScaleTo* cobj = new (std::nothrow) CrossApp::ScaleTo();
    TypeTest<CrossApp::ScaleTo> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::ScaleTo");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_ScaleTo_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::ScaleTo *nobj = new (std::nothrow) CrossApp::ScaleTo();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::ScaleTo");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionInterval_prototype;

void js_CrossApp_ScaleTo_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (ScaleTo)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::ScaleTo *nobj = static_cast<CrossApp::ScaleTo *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_ScaleTo(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_ScaleTo_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_ScaleTo_class->name = "ScaleTo";
    jsb_CrossApp_ScaleTo_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_ScaleTo_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_ScaleTo_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_ScaleTo_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_ScaleTo_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_ScaleTo_class->resolve = JS_ResolveStub;
    jsb_CrossApp_ScaleTo_class->convert = JS_ConvertStub;
    jsb_CrossApp_ScaleTo_class->finalize = js_CrossApp_ScaleTo_finalize;
    jsb_CrossApp_ScaleTo_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("initWithDuration", js_crossapp_ScaleTo_initWithDuration, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_ScaleTo_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_ScaleTo_create, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_ScaleTo_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInterval_prototype),
        jsb_CrossApp_ScaleTo_class,
        js_crossapp_ScaleTo_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "ScaleTo", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::ScaleTo> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_ScaleTo_class;
        p->proto = jsb_CrossApp_ScaleTo_prototype;
        p->parentProto = jsb_CrossApp_ActionInterval_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.ScaleTo.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_ScaleBy_class;
JSObject *jsb_CrossApp_ScaleBy_prototype;

bool js_crossapp_ScaleBy_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 3) {
            double arg0 = 0;
            ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            double arg2 = 0;
            ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
            if (!ok) { ok = true; break; }
            CrossApp::ScaleBy* ret = CrossApp::ScaleBy::create(arg0, arg1, arg2);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::ScaleBy>(cx, (CrossApp::ScaleBy*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 2) {
            double arg0 = 0;
            ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            CrossApp::ScaleBy* ret = CrossApp::ScaleBy::create(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::ScaleBy>(cx, (CrossApp::ScaleBy*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 4) {
            double arg0 = 0;
            ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            double arg2 = 0;
            ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
            if (!ok) { ok = true; break; }
            double arg3 = 0;
            ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
            if (!ok) { ok = true; break; }
            CrossApp::ScaleBy* ret = CrossApp::ScaleBy::create(arg0, arg1, arg2, arg3);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::ScaleBy>(cx, (CrossApp::ScaleBy*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_crossapp_ScaleBy_create : wrong number of arguments");
    return false;
}
bool js_crossapp_ScaleBy_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::ScaleBy* cobj = new (std::nothrow) CrossApp::ScaleBy();
    TypeTest<CrossApp::ScaleBy> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::ScaleBy");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_ScaleBy_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::ScaleBy *nobj = new (std::nothrow) CrossApp::ScaleBy();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::ScaleBy");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ScaleTo_prototype;

void js_CrossApp_ScaleBy_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (ScaleBy)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::ScaleBy *nobj = static_cast<CrossApp::ScaleBy *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_ScaleBy(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_ScaleBy_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_ScaleBy_class->name = "ScaleBy";
    jsb_CrossApp_ScaleBy_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_ScaleBy_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_ScaleBy_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_ScaleBy_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_ScaleBy_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_ScaleBy_class->resolve = JS_ResolveStub;
    jsb_CrossApp_ScaleBy_class->convert = JS_ConvertStub;
    jsb_CrossApp_ScaleBy_class->finalize = js_CrossApp_ScaleBy_finalize;
    jsb_CrossApp_ScaleBy_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_ScaleBy_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_ScaleBy_create, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_ScaleBy_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ScaleTo_prototype),
        jsb_CrossApp_ScaleBy_class,
        js_crossapp_ScaleBy_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "ScaleBy", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::ScaleBy> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_ScaleBy_class;
        p->proto = jsb_CrossApp_ScaleBy_prototype;
        p->parentProto = jsb_CrossApp_ScaleTo_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.ScaleBy.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_Blink_class;
JSObject *jsb_CrossApp_Blink_prototype;

bool js_crossapp_Blink_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Blink* cobj = (CrossApp::Blink *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Blink_initWithDuration : Invalid Native Object");
    if (argc == 2) {
        double arg0 = 0;
        int arg1 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Blink_initWithDuration : Error processing arguments");
        bool ret = cobj->initWithDuration(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Blink_initWithDuration : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_Blink_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        double arg0 = 0;
        int arg1 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Blink_create : Error processing arguments");
        CrossApp::Blink* ret = CrossApp::Blink::create(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Blink>(cx, (CrossApp::Blink*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_Blink_create : wrong number of arguments");
    return false;
}
bool js_crossapp_Blink_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::Blink* cobj = new (std::nothrow) CrossApp::Blink();
    TypeTest<CrossApp::Blink> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::Blink");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_Blink_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::Blink *nobj = new (std::nothrow) CrossApp::Blink();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::Blink");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionInterval_prototype;

void js_CrossApp_Blink_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (Blink)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::Blink *nobj = static_cast<CrossApp::Blink *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_Blink(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_Blink_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_Blink_class->name = "Blink";
    jsb_CrossApp_Blink_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_Blink_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_Blink_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_Blink_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_Blink_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_Blink_class->resolve = JS_ResolveStub;
    jsb_CrossApp_Blink_class->convert = JS_ConvertStub;
    jsb_CrossApp_Blink_class->finalize = js_CrossApp_Blink_finalize;
    jsb_CrossApp_Blink_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("initWithDuration", js_crossapp_Blink_initWithDuration, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_Blink_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_Blink_create, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_Blink_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInterval_prototype),
        jsb_CrossApp_Blink_class,
        js_crossapp_Blink_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "Blink", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::Blink> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_Blink_class;
        p->proto = jsb_CrossApp_Blink_prototype;
        p->parentProto = jsb_CrossApp_ActionInterval_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.Blink.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_FadeTo_class;
JSObject *jsb_CrossApp_FadeTo_prototype;

bool js_crossapp_FadeTo_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FadeTo* cobj = (CrossApp::FadeTo *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FadeTo_initWithDuration : Invalid Native Object");
    if (argc == 2) {
        double arg0 = 0;
        double arg1 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FadeTo_initWithDuration : Error processing arguments");
        bool ret = cobj->initWithDuration(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FadeTo_initWithDuration : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_FadeTo_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        double arg0 = 0;
        double arg1 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FadeTo_create : Error processing arguments");
        CrossApp::FadeTo* ret = CrossApp::FadeTo::create(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::FadeTo>(cx, (CrossApp::FadeTo*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_FadeTo_create : wrong number of arguments");
    return false;
}
bool js_crossapp_FadeTo_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::FadeTo* cobj = new (std::nothrow) CrossApp::FadeTo();
    TypeTest<CrossApp::FadeTo> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::FadeTo");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_FadeTo_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::FadeTo *nobj = new (std::nothrow) CrossApp::FadeTo();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::FadeTo");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionInterval_prototype;

void js_CrossApp_FadeTo_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (FadeTo)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::FadeTo *nobj = static_cast<CrossApp::FadeTo *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_FadeTo(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_FadeTo_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_FadeTo_class->name = "FadeTo";
    jsb_CrossApp_FadeTo_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_FadeTo_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_FadeTo_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_FadeTo_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_FadeTo_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_FadeTo_class->resolve = JS_ResolveStub;
    jsb_CrossApp_FadeTo_class->convert = JS_ConvertStub;
    jsb_CrossApp_FadeTo_class->finalize = js_CrossApp_FadeTo_finalize;
    jsb_CrossApp_FadeTo_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("initWithDuration", js_crossapp_FadeTo_initWithDuration, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_FadeTo_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_FadeTo_create, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_FadeTo_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInterval_prototype),
        jsb_CrossApp_FadeTo_class,
        js_crossapp_FadeTo_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "FadeTo", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::FadeTo> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_FadeTo_class;
        p->proto = jsb_CrossApp_FadeTo_prototype;
        p->parentProto = jsb_CrossApp_ActionInterval_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.FadeTo.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_FadeIn_class;
JSObject *jsb_CrossApp_FadeIn_prototype;

bool js_crossapp_FadeIn_setReverseAction(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FadeIn* cobj = (CrossApp::FadeIn *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FadeIn_setReverseAction : Invalid Native Object");
    if (argc == 1) {
        CrossApp::FadeTo* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::FadeTo*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FadeIn_setReverseAction : Error processing arguments");
        cobj->setReverseAction(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FadeIn_setReverseAction : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_FadeIn_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FadeIn_create : Error processing arguments");
        CrossApp::FadeIn* ret = CrossApp::FadeIn::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::FadeIn>(cx, (CrossApp::FadeIn*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_FadeIn_create : wrong number of arguments");
    return false;
}
bool js_crossapp_FadeIn_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::FadeIn* cobj = new (std::nothrow) CrossApp::FadeIn();
    TypeTest<CrossApp::FadeIn> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::FadeIn");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_FadeIn_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::FadeIn *nobj = new (std::nothrow) CrossApp::FadeIn();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::FadeIn");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_FadeTo_prototype;

void js_CrossApp_FadeIn_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (FadeIn)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::FadeIn *nobj = static_cast<CrossApp::FadeIn *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_FadeIn(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_FadeIn_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_FadeIn_class->name = "FadeIn";
    jsb_CrossApp_FadeIn_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_FadeIn_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_FadeIn_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_FadeIn_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_FadeIn_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_FadeIn_class->resolve = JS_ResolveStub;
    jsb_CrossApp_FadeIn_class->convert = JS_ConvertStub;
    jsb_CrossApp_FadeIn_class->finalize = js_CrossApp_FadeIn_finalize;
    jsb_CrossApp_FadeIn_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setReverseAction", js_crossapp_FadeIn_setReverseAction, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_FadeIn_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_FadeIn_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_FadeIn_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_FadeTo_prototype),
        jsb_CrossApp_FadeIn_class,
        js_crossapp_FadeIn_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "FadeIn", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::FadeIn> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_FadeIn_class;
        p->proto = jsb_CrossApp_FadeIn_prototype;
        p->parentProto = jsb_CrossApp_FadeTo_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.FadeIn.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_FadeOut_class;
JSObject *jsb_CrossApp_FadeOut_prototype;

bool js_crossapp_FadeOut_setReverseAction(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FadeOut* cobj = (CrossApp::FadeOut *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FadeOut_setReverseAction : Invalid Native Object");
    if (argc == 1) {
        CrossApp::FadeTo* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::FadeTo*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FadeOut_setReverseAction : Error processing arguments");
        cobj->setReverseAction(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FadeOut_setReverseAction : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_FadeOut_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FadeOut_create : Error processing arguments");
        CrossApp::FadeOut* ret = CrossApp::FadeOut::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::FadeOut>(cx, (CrossApp::FadeOut*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_FadeOut_create : wrong number of arguments");
    return false;
}
bool js_crossapp_FadeOut_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::FadeOut* cobj = new (std::nothrow) CrossApp::FadeOut();
    TypeTest<CrossApp::FadeOut> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::FadeOut");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_FadeOut_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::FadeOut *nobj = new (std::nothrow) CrossApp::FadeOut();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::FadeOut");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_FadeTo_prototype;

void js_CrossApp_FadeOut_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (FadeOut)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::FadeOut *nobj = static_cast<CrossApp::FadeOut *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_FadeOut(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_FadeOut_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_FadeOut_class->name = "FadeOut";
    jsb_CrossApp_FadeOut_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_FadeOut_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_FadeOut_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_FadeOut_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_FadeOut_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_FadeOut_class->resolve = JS_ResolveStub;
    jsb_CrossApp_FadeOut_class->convert = JS_ConvertStub;
    jsb_CrossApp_FadeOut_class->finalize = js_CrossApp_FadeOut_finalize;
    jsb_CrossApp_FadeOut_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setReverseAction", js_crossapp_FadeOut_setReverseAction, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_FadeOut_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_FadeOut_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_FadeOut_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_FadeTo_prototype),
        jsb_CrossApp_FadeOut_class,
        js_crossapp_FadeOut_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "FadeOut", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::FadeOut> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_FadeOut_class;
        p->proto = jsb_CrossApp_FadeOut_prototype;
        p->parentProto = jsb_CrossApp_FadeTo_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.FadeOut.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_TintTo_class;
JSObject *jsb_CrossApp_TintTo_prototype;

bool js_crossapp_TintTo_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::TintTo* cobj = (CrossApp::TintTo *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_TintTo_initWithDuration : Invalid Native Object");
    if (argc == 4) {
        double arg0 = 0;
        uint16_t arg1;
        uint16_t arg2;
        uint16_t arg3;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= jsval_to_uint16(cx, args.get(1), &arg1);
        ok &= jsval_to_uint16(cx, args.get(2), &arg2);
        ok &= jsval_to_uint16(cx, args.get(3), &arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_TintTo_initWithDuration : Error processing arguments");
        bool ret = cobj->initWithDuration(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_TintTo_initWithDuration : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_crossapp_TintTo_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 2) {
            double arg0 = 0;
            ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
            if (!ok) { ok = true; break; }
            CrossApp::CAColor4B arg1;
            ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::TintTo* ret = CrossApp::TintTo::create(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::TintTo>(cx, (CrossApp::TintTo*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 4) {
            double arg0 = 0;
            ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
            if (!ok) { ok = true; break; }
            uint16_t arg1;
            ok &= jsval_to_uint16(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            uint16_t arg2;
            ok &= jsval_to_uint16(cx, args.get(2), &arg2);
            if (!ok) { ok = true; break; }
            uint16_t arg3;
            ok &= jsval_to_uint16(cx, args.get(3), &arg3);
            if (!ok) { ok = true; break; }
            CrossApp::TintTo* ret = CrossApp::TintTo::create(arg0, arg1, arg2, arg3);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::TintTo>(cx, (CrossApp::TintTo*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_crossapp_TintTo_create : wrong number of arguments");
    return false;
}
bool js_crossapp_TintTo_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::TintTo* cobj = new (std::nothrow) CrossApp::TintTo();
    TypeTest<CrossApp::TintTo> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::TintTo");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_TintTo_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::TintTo *nobj = new (std::nothrow) CrossApp::TintTo();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::TintTo");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionInterval_prototype;

void js_CrossApp_TintTo_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (TintTo)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::TintTo *nobj = static_cast<CrossApp::TintTo *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_TintTo(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_TintTo_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_TintTo_class->name = "TintTo";
    jsb_CrossApp_TintTo_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_TintTo_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_TintTo_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_TintTo_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_TintTo_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_TintTo_class->resolve = JS_ResolveStub;
    jsb_CrossApp_TintTo_class->convert = JS_ConvertStub;
    jsb_CrossApp_TintTo_class->finalize = js_CrossApp_TintTo_finalize;
    jsb_CrossApp_TintTo_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("initWithDuration", js_crossapp_TintTo_initWithDuration, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_TintTo_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_TintTo_create, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_TintTo_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInterval_prototype),
        jsb_CrossApp_TintTo_class,
        js_crossapp_TintTo_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "TintTo", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::TintTo> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_TintTo_class;
        p->proto = jsb_CrossApp_TintTo_prototype;
        p->parentProto = jsb_CrossApp_ActionInterval_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.TintTo.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_TintBy_class;
JSObject *jsb_CrossApp_TintBy_prototype;

bool js_crossapp_TintBy_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::TintBy* cobj = (CrossApp::TintBy *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_TintBy_initWithDuration : Invalid Native Object");
    if (argc == 4) {
        double arg0 = 0;
        int32_t arg1 = 0;
        int32_t arg2 = 0;
        int32_t arg3 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= jsval_to_int32(cx, args.get(1), &arg1);
        ok &= jsval_to_int32(cx, args.get(2), &arg2);
        ok &= jsval_to_int32(cx, args.get(3), &arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_TintBy_initWithDuration : Error processing arguments");
        bool ret = cobj->initWithDuration(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_TintBy_initWithDuration : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_crossapp_TintBy_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 4) {
        double arg0 = 0;
        int32_t arg1 = 0;
        int32_t arg2 = 0;
        int32_t arg3 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= jsval_to_int32(cx, args.get(1), &arg1);
        ok &= jsval_to_int32(cx, args.get(2), &arg2);
        ok &= jsval_to_int32(cx, args.get(3), &arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_TintBy_create : Error processing arguments");
        CrossApp::TintBy* ret = CrossApp::TintBy::create(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::TintBy>(cx, (CrossApp::TintBy*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_TintBy_create : wrong number of arguments");
    return false;
}
bool js_crossapp_TintBy_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::TintBy* cobj = new (std::nothrow) CrossApp::TintBy();
    TypeTest<CrossApp::TintBy> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::TintBy");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_TintBy_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::TintBy *nobj = new (std::nothrow) CrossApp::TintBy();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::TintBy");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionInterval_prototype;

void js_CrossApp_TintBy_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (TintBy)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::TintBy *nobj = static_cast<CrossApp::TintBy *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_TintBy(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_TintBy_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_TintBy_class->name = "TintBy";
    jsb_CrossApp_TintBy_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_TintBy_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_TintBy_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_TintBy_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_TintBy_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_TintBy_class->resolve = JS_ResolveStub;
    jsb_CrossApp_TintBy_class->convert = JS_ConvertStub;
    jsb_CrossApp_TintBy_class->finalize = js_CrossApp_TintBy_finalize;
    jsb_CrossApp_TintBy_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("initWithDuration", js_crossapp_TintBy_initWithDuration, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_TintBy_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_TintBy_create, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_TintBy_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInterval_prototype),
        jsb_CrossApp_TintBy_class,
        js_crossapp_TintBy_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "TintBy", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::TintBy> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_TintBy_class;
        p->proto = jsb_CrossApp_TintBy_prototype;
        p->parentProto = jsb_CrossApp_ActionInterval_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.TintBy.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_DelayTime_class;
JSObject *jsb_CrossApp_DelayTime_prototype;

bool js_crossapp_DelayTime_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_DelayTime_create : Error processing arguments");
        CrossApp::DelayTime* ret = CrossApp::DelayTime::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::DelayTime>(cx, (CrossApp::DelayTime*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_DelayTime_create : wrong number of arguments");
    return false;
}
bool js_crossapp_DelayTime_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::DelayTime* cobj = new (std::nothrow) CrossApp::DelayTime();
    TypeTest<CrossApp::DelayTime> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::DelayTime");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_ActionInterval_prototype;

void js_CrossApp_DelayTime_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (DelayTime)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::DelayTime *nobj = static_cast<CrossApp::DelayTime *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_DelayTime(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_DelayTime_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_DelayTime_class->name = "DelayTime";
    jsb_CrossApp_DelayTime_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_DelayTime_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_DelayTime_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_DelayTime_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_DelayTime_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_DelayTime_class->resolve = JS_ResolveStub;
    jsb_CrossApp_DelayTime_class->convert = JS_ConvertStub;
    jsb_CrossApp_DelayTime_class->finalize = js_CrossApp_DelayTime_finalize;
    jsb_CrossApp_DelayTime_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_DelayTime_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_DelayTime_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInterval_prototype),
        jsb_CrossApp_DelayTime_class,
        js_crossapp_DelayTime_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "DelayTime", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::DelayTime> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_DelayTime_class;
        p->proto = jsb_CrossApp_DelayTime_prototype;
        p->parentProto = jsb_CrossApp_ActionInterval_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_ReverseTime_class;
JSObject *jsb_CrossApp_ReverseTime_prototype;

bool js_crossapp_ReverseTime_initWithAction(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ReverseTime* cobj = (CrossApp::ReverseTime *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ReverseTime_initWithAction : Invalid Native Object");
    if (argc == 1) {
        CrossApp::FiniteTimeAction* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::FiniteTimeAction*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_ReverseTime_initWithAction : Error processing arguments");
        bool ret = cobj->initWithAction(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ReverseTime_initWithAction : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_ReverseTime_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::FiniteTimeAction* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::FiniteTimeAction*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_ReverseTime_create : Error processing arguments");
        CrossApp::ReverseTime* ret = CrossApp::ReverseTime::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::ReverseTime>(cx, (CrossApp::ReverseTime*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_ReverseTime_create : wrong number of arguments");
    return false;
}
bool js_crossapp_ReverseTime_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::ReverseTime* cobj = new (std::nothrow) CrossApp::ReverseTime();
    TypeTest<CrossApp::ReverseTime> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::ReverseTime");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_ReverseTime_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::ReverseTime *nobj = new (std::nothrow) CrossApp::ReverseTime();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::ReverseTime");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionInterval_prototype;

void js_CrossApp_ReverseTime_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (ReverseTime)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::ReverseTime *nobj = static_cast<CrossApp::ReverseTime *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_ReverseTime(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_ReverseTime_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_ReverseTime_class->name = "ReverseTime";
    jsb_CrossApp_ReverseTime_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_ReverseTime_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_ReverseTime_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_ReverseTime_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_ReverseTime_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_ReverseTime_class->resolve = JS_ResolveStub;
    jsb_CrossApp_ReverseTime_class->convert = JS_ConvertStub;
    jsb_CrossApp_ReverseTime_class->finalize = js_CrossApp_ReverseTime_finalize;
    jsb_CrossApp_ReverseTime_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("initWithAction", js_crossapp_ReverseTime_initWithAction, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_ReverseTime_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_ReverseTime_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_ReverseTime_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInterval_prototype),
        jsb_CrossApp_ReverseTime_class,
        js_crossapp_ReverseTime_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "ReverseTime", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::ReverseTime> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_ReverseTime_class;
        p->proto = jsb_CrossApp_ReverseTime_prototype;
        p->parentProto = jsb_CrossApp_ActionInterval_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.ReverseTime.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_Animate_class;
JSObject *jsb_CrossApp_Animate_prototype;

bool js_crossapp_Animate_initWithAnimation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Animate* cobj = (CrossApp::Animate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Animate_initWithAnimation : Invalid Native Object");
    if (argc == 1) {
        CrossApp::Animation* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::Animation*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Animate_initWithAnimation : Error processing arguments");
        bool ret = cobj->initWithAnimation(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Animate_initWithAnimation : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_Animate_getAnimation(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::Animate* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::Animate *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Animate_getAnimation : Invalid Native Object");
    do {
        if (argc == 0) {
            const CrossApp::Animation* ret = cobj->getAnimation();
            jsval jsret = JSVAL_NULL;
            do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Animation>(cx, (CrossApp::Animation*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 0) {
            CrossApp::Animation* ret = cobj->getAnimation();
            jsval jsret = JSVAL_NULL;
            do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Animation>(cx, (CrossApp::Animation*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_Animate_getAnimation : wrong number of arguments");
    return false;
}
bool js_crossapp_Animate_getCurrentFrameIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Animate* cobj = (CrossApp::Animate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Animate_getCurrentFrameIndex : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getCurrentFrameIndex();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Animate_getCurrentFrameIndex : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_Animate_setAnimation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Animate* cobj = (CrossApp::Animate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Animate_setAnimation : Invalid Native Object");
    if (argc == 1) {
        CrossApp::Animation* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::Animation*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Animate_setAnimation : Error processing arguments");
        cobj->setAnimation(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Animate_setAnimation : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_Animate_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::Animation* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::Animation*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Animate_create : Error processing arguments");
        CrossApp::Animate* ret = CrossApp::Animate::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Animate>(cx, (CrossApp::Animate*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_Animate_create : wrong number of arguments");
    return false;
}
bool js_crossapp_Animate_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::Animate* cobj = new (std::nothrow) CrossApp::Animate();
    TypeTest<CrossApp::Animate> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::Animate");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_ActionInterval_prototype;

void js_CrossApp_Animate_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (Animate)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::Animate *nobj = static_cast<CrossApp::Animate *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_Animate(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_Animate_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_Animate_class->name = "Animate";
    jsb_CrossApp_Animate_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_Animate_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_Animate_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_Animate_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_Animate_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_Animate_class->resolve = JS_ResolveStub;
    jsb_CrossApp_Animate_class->convert = JS_ConvertStub;
    jsb_CrossApp_Animate_class->finalize = js_CrossApp_Animate_finalize;
    jsb_CrossApp_Animate_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("initWithAnimation", js_crossapp_Animate_initWithAnimation, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAnimation", js_crossapp_Animate_getAnimation, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCurrentFrameIndex", js_crossapp_Animate_getCurrentFrameIndex, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnimation", js_crossapp_Animate_setAnimation, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_Animate_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_Animate_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInterval_prototype),
        jsb_CrossApp_Animate_class,
        js_crossapp_Animate_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "Animate", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::Animate> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_Animate_class;
        p->proto = jsb_CrossApp_Animate_prototype;
        p->parentProto = jsb_CrossApp_ActionInterval_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_TargetedAction_class;
JSObject *jsb_CrossApp_TargetedAction_prototype;

bool js_crossapp_TargetedAction_getForcedTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::TargetedAction* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::TargetedAction *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_TargetedAction_getForcedTarget : Invalid Native Object");
    do {
        if (argc == 0) {
            const CrossApp::CGSprite* ret = cobj->getForcedTarget();
            jsval jsret = JSVAL_NULL;
            do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CGSprite>(cx, (CrossApp::CGSprite*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 0) {
            CrossApp::CGSprite* ret = cobj->getForcedTarget();
            jsval jsret = JSVAL_NULL;
            do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CGSprite>(cx, (CrossApp::CGSprite*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_TargetedAction_getForcedTarget : wrong number of arguments");
    return false;
}
bool js_crossapp_TargetedAction_initWithTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::TargetedAction* cobj = (CrossApp::TargetedAction *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_TargetedAction_initWithTarget : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CGSprite* arg0 = nullptr;
        CrossApp::FiniteTimeAction* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CGSprite*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::FiniteTimeAction*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_TargetedAction_initWithTarget : Error processing arguments");
        bool ret = cobj->initWithTarget(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_TargetedAction_initWithTarget : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_TargetedAction_setForcedTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::TargetedAction* cobj = (CrossApp::TargetedAction *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_TargetedAction_setForcedTarget : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CGSprite* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CGSprite*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_TargetedAction_setForcedTarget : Error processing arguments");
        cobj->setForcedTarget(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_TargetedAction_setForcedTarget : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_TargetedAction_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::CGSprite* arg0 = nullptr;
        CrossApp::FiniteTimeAction* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CGSprite*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::FiniteTimeAction*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_TargetedAction_create : Error processing arguments");
        CrossApp::TargetedAction* ret = CrossApp::TargetedAction::create(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::TargetedAction>(cx, (CrossApp::TargetedAction*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_TargetedAction_create : wrong number of arguments");
    return false;
}
bool js_crossapp_TargetedAction_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::TargetedAction* cobj = new (std::nothrow) CrossApp::TargetedAction();
    TypeTest<CrossApp::TargetedAction> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::TargetedAction");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_TargetedAction_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::TargetedAction *nobj = new (std::nothrow) CrossApp::TargetedAction();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::TargetedAction");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionInterval_prototype;

void js_CrossApp_TargetedAction_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (TargetedAction)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::TargetedAction *nobj = static_cast<CrossApp::TargetedAction *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_TargetedAction(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_TargetedAction_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_TargetedAction_class->name = "TargetedAction";
    jsb_CrossApp_TargetedAction_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_TargetedAction_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_TargetedAction_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_TargetedAction_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_TargetedAction_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_TargetedAction_class->resolve = JS_ResolveStub;
    jsb_CrossApp_TargetedAction_class->convert = JS_ConvertStub;
    jsb_CrossApp_TargetedAction_class->finalize = js_CrossApp_TargetedAction_finalize;
    jsb_CrossApp_TargetedAction_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getForcedTarget", js_crossapp_TargetedAction_getForcedTarget, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithTarget", js_crossapp_TargetedAction_initWithTarget, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setForcedTarget", js_crossapp_TargetedAction_setForcedTarget, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_TargetedAction_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_TargetedAction_create, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_TargetedAction_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInterval_prototype),
        jsb_CrossApp_TargetedAction_class,
        js_crossapp_TargetedAction_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "TargetedAction", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::TargetedAction> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_TargetedAction_class;
        p->proto = jsb_CrossApp_TargetedAction_prototype;
        p->parentProto = jsb_CrossApp_ActionInterval_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.TargetedAction.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_ActionFloat_class;
JSObject *jsb_CrossApp_ActionFloat_prototype;

bool js_crossapp_ActionFloat_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionFloat* cobj = (CrossApp::ActionFloat *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionFloat_initWithDuration : Invalid Native Object");
    if (argc == 4) {
        double arg0 = 0;
        double arg1 = 0;
        double arg2 = 0;
        std::function<void (float)> arg3;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        do {
		    if(JS_TypeOfValue(cx, args.get(3)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(3)));
		        auto lambda = [=, &ok](float larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = DOUBLE_TO_JSVAL(larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg3 = lambda;
		    }
		    else
		    {
		        arg3 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_ActionFloat_initWithDuration : Error processing arguments");
        bool ret = cobj->initWithDuration(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionFloat_initWithDuration : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_crossapp_ActionFloat_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 4) {
        double arg0 = 0;
        double arg1 = 0;
        double arg2 = 0;
        std::function<void (float)> arg3;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        do {
		    if(JS_TypeOfValue(cx, args.get(3)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(3)));
		        auto lambda = [=, &ok](float larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            largv[0] = DOUBLE_TO_JSVAL(larg0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg3 = lambda;
		    }
		    else
		    {
		        arg3 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_ActionFloat_create : Error processing arguments");
        CrossApp::ActionFloat* ret = CrossApp::ActionFloat::create(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::ActionFloat>(cx, (CrossApp::ActionFloat*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_ActionFloat_create : wrong number of arguments");
    return false;
}
bool js_crossapp_ActionFloat_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::ActionFloat* cobj = new (std::nothrow) CrossApp::ActionFloat();
    TypeTest<CrossApp::ActionFloat> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::ActionFloat");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_ActionFloat_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::ActionFloat *nobj = new (std::nothrow) CrossApp::ActionFloat();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::ActionFloat");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionInterval_prototype;

void js_CrossApp_ActionFloat_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (ActionFloat)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::ActionFloat *nobj = static_cast<CrossApp::ActionFloat *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_ActionFloat(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_ActionFloat_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_ActionFloat_class->name = "ActionFloat";
    jsb_CrossApp_ActionFloat_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_ActionFloat_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_ActionFloat_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_ActionFloat_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_ActionFloat_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_ActionFloat_class->resolve = JS_ResolveStub;
    jsb_CrossApp_ActionFloat_class->convert = JS_ConvertStub;
    jsb_CrossApp_ActionFloat_class->finalize = js_CrossApp_ActionFloat_finalize;
    jsb_CrossApp_ActionFloat_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("initWithDuration", js_crossapp_ActionFloat_initWithDuration, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_ActionFloat_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_ActionFloat_create, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_ActionFloat_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInterval_prototype),
        jsb_CrossApp_ActionFloat_class,
        js_crossapp_ActionFloat_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "ActionFloat", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::ActionFloat> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_ActionFloat_class;
        p->proto = jsb_CrossApp_ActionFloat_prototype;
        p->parentProto = jsb_CrossApp_ActionInterval_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.ActionFloat.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_ActionCamera_class;
JSObject *jsb_CrossApp_ActionCamera_prototype;

bool js_crossapp_ActionCamera_setEye(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::ActionCamera* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::ActionCamera *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionCamera_setEye : Invalid Native Object");
    do {
        if (argc == 3) {
            double arg0 = 0;
            ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            double arg2 = 0;
            ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
            if (!ok) { ok = true; break; }
            cobj->setEye(arg0, arg1, arg2);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 1) {
            CrossApp::DPoint3D arg0;
            ok &= jsval_to_dpoint3d(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            cobj->setEye(arg0);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_ActionCamera_setEye : wrong number of arguments");
    return false;
}
bool js_crossapp_ActionCamera_getEye(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionCamera* cobj = (CrossApp::ActionCamera *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionCamera_getEye : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DPoint3D& ret = cobj->getEye();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint3d_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionCamera_getEye : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_ActionCamera_setUp(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionCamera* cobj = (CrossApp::ActionCamera *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionCamera_setUp : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DPoint3D arg0;
        ok &= jsval_to_dpoint3d(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_ActionCamera_setUp : Error processing arguments");
        cobj->setUp(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionCamera_setUp : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_ActionCamera_getCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionCamera* cobj = (CrossApp::ActionCamera *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionCamera_getCenter : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DPoint3D& ret = cobj->getCenter();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint3d_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionCamera_getCenter : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_ActionCamera_setCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionCamera* cobj = (CrossApp::ActionCamera *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionCamera_setCenter : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DPoint3D arg0;
        ok &= jsval_to_dpoint3d(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_ActionCamera_setCenter : Error processing arguments");
        cobj->setCenter(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionCamera_setCenter : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_ActionCamera_getUp(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionCamera* cobj = (CrossApp::ActionCamera *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionCamera_getUp : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DPoint3D& ret = cobj->getUp();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint3d_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionCamera_getUp : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_ActionCamera_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::ActionCamera* cobj = new (std::nothrow) CrossApp::ActionCamera();
    TypeTest<CrossApp::ActionCamera> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::ActionCamera");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_ActionCamera_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::ActionCamera *nobj = new (std::nothrow) CrossApp::ActionCamera();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::ActionCamera");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionInterval_prototype;

void js_CrossApp_ActionCamera_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (ActionCamera)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::ActionCamera *nobj = static_cast<CrossApp::ActionCamera *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_ActionCamera(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_ActionCamera_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_ActionCamera_class->name = "ActionCamera";
    jsb_CrossApp_ActionCamera_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_ActionCamera_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_ActionCamera_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_ActionCamera_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_ActionCamera_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_ActionCamera_class->resolve = JS_ResolveStub;
    jsb_CrossApp_ActionCamera_class->convert = JS_ConvertStub;
    jsb_CrossApp_ActionCamera_class->finalize = js_CrossApp_ActionCamera_finalize;
    jsb_CrossApp_ActionCamera_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setEye", js_crossapp_ActionCamera_setEye, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getEye", js_crossapp_ActionCamera_getEye, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setUp", js_crossapp_ActionCamera_setUp, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCenter", js_crossapp_ActionCamera_getCenter, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCenter", js_crossapp_ActionCamera_setCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getUp", js_crossapp_ActionCamera_getUp, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_ActionCamera_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_ActionCamera_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInterval_prototype),
        jsb_CrossApp_ActionCamera_class,
        js_crossapp_ActionCamera_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "ActionCamera", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::ActionCamera> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_ActionCamera_class;
        p->proto = jsb_CrossApp_ActionCamera_prototype;
        p->parentProto = jsb_CrossApp_ActionInterval_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.ActionCamera.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_ActionEase_class;
JSObject *jsb_CrossApp_ActionEase_prototype;

bool js_crossapp_ActionEase_initWithAction(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionEase* cobj = (CrossApp::ActionEase *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionEase_initWithAction : Invalid Native Object");
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_ActionEase_initWithAction : Error processing arguments");
        bool ret = cobj->initWithAction(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionEase_initWithAction : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_ActionEase_getInnerAction(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionEase* cobj = (CrossApp::ActionEase *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionEase_getInnerAction : Invalid Native Object");
    if (argc == 0) {
        CrossApp::ActionInterval* ret = cobj->getInnerAction();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::ActionInterval>(cx, (CrossApp::ActionInterval*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionEase_getInnerAction : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_ActionEase_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::ActionEase* cobj = new (std::nothrow) CrossApp::ActionEase();
    TypeTest<CrossApp::ActionEase> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::ActionEase");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_ActionEase_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::ActionEase *nobj = new (std::nothrow) CrossApp::ActionEase();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::ActionEase");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionInterval_prototype;

void js_CrossApp_ActionEase_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (ActionEase)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::ActionEase *nobj = static_cast<CrossApp::ActionEase *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_ActionEase(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_ActionEase_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_ActionEase_class->name = "ActionEase";
    jsb_CrossApp_ActionEase_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_ActionEase_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_ActionEase_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_ActionEase_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_ActionEase_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_ActionEase_class->resolve = JS_ResolveStub;
    jsb_CrossApp_ActionEase_class->convert = JS_ConvertStub;
    jsb_CrossApp_ActionEase_class->finalize = js_CrossApp_ActionEase_finalize;
    jsb_CrossApp_ActionEase_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("initWithAction", js_crossapp_ActionEase_initWithAction, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getInnerAction", js_crossapp_ActionEase_getInnerAction, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_ActionEase_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_ActionEase_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInterval_prototype),
        jsb_CrossApp_ActionEase_class,
        js_crossapp_ActionEase_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "ActionEase", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::ActionEase> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_ActionEase_class;
        p->proto = jsb_CrossApp_ActionEase_prototype;
        p->parentProto = jsb_CrossApp_ActionInterval_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.ActionEase.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseRateAction_class;
JSObject *jsb_CrossApp_EaseRateAction_prototype;

bool js_crossapp_EaseRateAction_setRate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::EaseRateAction* cobj = (CrossApp::EaseRateAction *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_EaseRateAction_setRate : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseRateAction_setRate : Error processing arguments");
        cobj->setRate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_EaseRateAction_setRate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_EaseRateAction_initWithAction(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::EaseRateAction* cobj = (CrossApp::EaseRateAction *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_EaseRateAction_initWithAction : Invalid Native Object");
    if (argc == 2) {
        CrossApp::ActionInterval* arg0 = nullptr;
        double arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseRateAction_initWithAction : Error processing arguments");
        bool ret = cobj->initWithAction(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_EaseRateAction_initWithAction : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_EaseRateAction_getRate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::EaseRateAction* cobj = (CrossApp::EaseRateAction *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_EaseRateAction_getRate : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getRate();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_EaseRateAction_getRate : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_EaseRateAction_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::ActionInterval* arg0 = nullptr;
        double arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseRateAction_create : Error processing arguments");
        CrossApp::EaseRateAction* ret = CrossApp::EaseRateAction::create(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseRateAction>(cx, (CrossApp::EaseRateAction*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseRateAction_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseRateAction_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseRateAction* cobj = new (std::nothrow) CrossApp::EaseRateAction();
    TypeTest<CrossApp::EaseRateAction> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseRateAction");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseRateAction_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseRateAction *nobj = new (std::nothrow) CrossApp::EaseRateAction();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseRateAction");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseRateAction_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseRateAction)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseRateAction *nobj = static_cast<CrossApp::EaseRateAction *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseRateAction(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseRateAction_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseRateAction_class->name = "EaseRateAction";
    jsb_CrossApp_EaseRateAction_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseRateAction_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseRateAction_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseRateAction_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseRateAction_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseRateAction_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseRateAction_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseRateAction_class->finalize = js_CrossApp_EaseRateAction_finalize;
    jsb_CrossApp_EaseRateAction_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setRate", js_crossapp_EaseRateAction_setRate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithAction", js_crossapp_EaseRateAction_initWithAction, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRate", js_crossapp_EaseRateAction_getRate, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_EaseRateAction_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseRateAction_create, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseRateAction_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseRateAction_class,
        js_crossapp_EaseRateAction_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseRateAction", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseRateAction> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseRateAction_class;
        p->proto = jsb_CrossApp_EaseRateAction_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseRateAction.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseIn_class;
JSObject *jsb_CrossApp_EaseIn_prototype;

bool js_crossapp_EaseIn_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::ActionInterval* arg0 = nullptr;
        double arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseIn_create : Error processing arguments");
        CrossApp::EaseIn* ret = CrossApp::EaseIn::create(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseIn>(cx, (CrossApp::EaseIn*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseIn_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseIn_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseIn* cobj = new (std::nothrow) CrossApp::EaseIn();
    TypeTest<CrossApp::EaseIn> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseIn");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseIn_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseIn *nobj = new (std::nothrow) CrossApp::EaseIn();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseIn");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_EaseRateAction_prototype;

void js_CrossApp_EaseIn_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseIn)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseIn *nobj = static_cast<CrossApp::EaseIn *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseIn(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseIn_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseIn_class->name = "EaseIn";
    jsb_CrossApp_EaseIn_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseIn_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseIn_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseIn_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseIn_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseIn_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseIn_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseIn_class->finalize = js_CrossApp_EaseIn_finalize;
    jsb_CrossApp_EaseIn_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseIn_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseIn_create, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseIn_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_EaseRateAction_prototype),
        jsb_CrossApp_EaseIn_class,
        js_crossapp_EaseIn_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseIn", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseIn> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseIn_class;
        p->proto = jsb_CrossApp_EaseIn_prototype;
        p->parentProto = jsb_CrossApp_EaseRateAction_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseIn.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseOut_class;
JSObject *jsb_CrossApp_EaseOut_prototype;

bool js_crossapp_EaseOut_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::ActionInterval* arg0 = nullptr;
        double arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseOut_create : Error processing arguments");
        CrossApp::EaseOut* ret = CrossApp::EaseOut::create(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseOut>(cx, (CrossApp::EaseOut*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseOut_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseOut_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseOut* cobj = new (std::nothrow) CrossApp::EaseOut();
    TypeTest<CrossApp::EaseOut> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseOut");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseOut_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseOut *nobj = new (std::nothrow) CrossApp::EaseOut();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseOut");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_EaseRateAction_prototype;

void js_CrossApp_EaseOut_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseOut)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseOut *nobj = static_cast<CrossApp::EaseOut *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseOut(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseOut_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseOut_class->name = "EaseOut";
    jsb_CrossApp_EaseOut_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseOut_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseOut_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseOut_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseOut_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseOut_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseOut_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseOut_class->finalize = js_CrossApp_EaseOut_finalize;
    jsb_CrossApp_EaseOut_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseOut_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseOut_create, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseOut_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_EaseRateAction_prototype),
        jsb_CrossApp_EaseOut_class,
        js_crossapp_EaseOut_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseOut", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseOut> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseOut_class;
        p->proto = jsb_CrossApp_EaseOut_prototype;
        p->parentProto = jsb_CrossApp_EaseRateAction_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseOut.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseInOut_class;
JSObject *jsb_CrossApp_EaseInOut_prototype;

bool js_crossapp_EaseInOut_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::ActionInterval* arg0 = nullptr;
        double arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseInOut_create : Error processing arguments");
        CrossApp::EaseInOut* ret = CrossApp::EaseInOut::create(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseInOut>(cx, (CrossApp::EaseInOut*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseInOut_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseInOut_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseInOut* cobj = new (std::nothrow) CrossApp::EaseInOut();
    TypeTest<CrossApp::EaseInOut> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseInOut");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseInOut_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseInOut *nobj = new (std::nothrow) CrossApp::EaseInOut();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseInOut");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_EaseRateAction_prototype;

void js_CrossApp_EaseInOut_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseInOut)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseInOut *nobj = static_cast<CrossApp::EaseInOut *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseInOut(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseInOut_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseInOut_class->name = "EaseInOut";
    jsb_CrossApp_EaseInOut_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseInOut_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseInOut_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseInOut_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseInOut_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseInOut_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseInOut_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseInOut_class->finalize = js_CrossApp_EaseInOut_finalize;
    jsb_CrossApp_EaseInOut_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseInOut_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseInOut_create, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseInOut_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_EaseRateAction_prototype),
        jsb_CrossApp_EaseInOut_class,
        js_crossapp_EaseInOut_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseInOut", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseInOut> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseInOut_class;
        p->proto = jsb_CrossApp_EaseInOut_prototype;
        p->parentProto = jsb_CrossApp_EaseRateAction_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseInOut.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseExponentialIn_class;
JSObject *jsb_CrossApp_EaseExponentialIn_prototype;

bool js_crossapp_EaseExponentialIn_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseExponentialIn_create : Error processing arguments");
        CrossApp::EaseExponentialIn* ret = CrossApp::EaseExponentialIn::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseExponentialIn>(cx, (CrossApp::EaseExponentialIn*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseExponentialIn_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseExponentialIn_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseExponentialIn* cobj = new (std::nothrow) CrossApp::EaseExponentialIn();
    TypeTest<CrossApp::EaseExponentialIn> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseExponentialIn");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseExponentialIn_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseExponentialIn *nobj = new (std::nothrow) CrossApp::EaseExponentialIn();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseExponentialIn");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseExponentialIn_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseExponentialIn)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseExponentialIn *nobj = static_cast<CrossApp::EaseExponentialIn *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseExponentialIn(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseExponentialIn_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseExponentialIn_class->name = "EaseExponentialIn";
    jsb_CrossApp_EaseExponentialIn_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseExponentialIn_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseExponentialIn_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseExponentialIn_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseExponentialIn_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseExponentialIn_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseExponentialIn_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseExponentialIn_class->finalize = js_CrossApp_EaseExponentialIn_finalize;
    jsb_CrossApp_EaseExponentialIn_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseExponentialIn_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseExponentialIn_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseExponentialIn_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseExponentialIn_class,
        js_crossapp_EaseExponentialIn_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseExponentialIn", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseExponentialIn> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseExponentialIn_class;
        p->proto = jsb_CrossApp_EaseExponentialIn_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseExponentialIn.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseExponentialOut_class;
JSObject *jsb_CrossApp_EaseExponentialOut_prototype;

bool js_crossapp_EaseExponentialOut_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseExponentialOut_create : Error processing arguments");
        CrossApp::EaseExponentialOut* ret = CrossApp::EaseExponentialOut::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseExponentialOut>(cx, (CrossApp::EaseExponentialOut*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseExponentialOut_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseExponentialOut_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseExponentialOut* cobj = new (std::nothrow) CrossApp::EaseExponentialOut();
    TypeTest<CrossApp::EaseExponentialOut> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseExponentialOut");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseExponentialOut_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseExponentialOut *nobj = new (std::nothrow) CrossApp::EaseExponentialOut();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseExponentialOut");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseExponentialOut_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseExponentialOut)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseExponentialOut *nobj = static_cast<CrossApp::EaseExponentialOut *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseExponentialOut(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseExponentialOut_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseExponentialOut_class->name = "EaseExponentialOut";
    jsb_CrossApp_EaseExponentialOut_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseExponentialOut_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseExponentialOut_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseExponentialOut_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseExponentialOut_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseExponentialOut_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseExponentialOut_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseExponentialOut_class->finalize = js_CrossApp_EaseExponentialOut_finalize;
    jsb_CrossApp_EaseExponentialOut_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseExponentialOut_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseExponentialOut_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseExponentialOut_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseExponentialOut_class,
        js_crossapp_EaseExponentialOut_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseExponentialOut", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseExponentialOut> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseExponentialOut_class;
        p->proto = jsb_CrossApp_EaseExponentialOut_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseExponentialOut.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseExponentialInOut_class;
JSObject *jsb_CrossApp_EaseExponentialInOut_prototype;

bool js_crossapp_EaseExponentialInOut_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseExponentialInOut_create : Error processing arguments");
        CrossApp::EaseExponentialInOut* ret = CrossApp::EaseExponentialInOut::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseExponentialInOut>(cx, (CrossApp::EaseExponentialInOut*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseExponentialInOut_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseExponentialInOut_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseExponentialInOut* cobj = new (std::nothrow) CrossApp::EaseExponentialInOut();
    TypeTest<CrossApp::EaseExponentialInOut> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseExponentialInOut");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseExponentialInOut_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseExponentialInOut *nobj = new (std::nothrow) CrossApp::EaseExponentialInOut();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseExponentialInOut");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseExponentialInOut_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseExponentialInOut)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseExponentialInOut *nobj = static_cast<CrossApp::EaseExponentialInOut *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseExponentialInOut(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseExponentialInOut_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseExponentialInOut_class->name = "EaseExponentialInOut";
    jsb_CrossApp_EaseExponentialInOut_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseExponentialInOut_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseExponentialInOut_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseExponentialInOut_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseExponentialInOut_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseExponentialInOut_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseExponentialInOut_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseExponentialInOut_class->finalize = js_CrossApp_EaseExponentialInOut_finalize;
    jsb_CrossApp_EaseExponentialInOut_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseExponentialInOut_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseExponentialInOut_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseExponentialInOut_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseExponentialInOut_class,
        js_crossapp_EaseExponentialInOut_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseExponentialInOut", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseExponentialInOut> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseExponentialInOut_class;
        p->proto = jsb_CrossApp_EaseExponentialInOut_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseExponentialInOut.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseSineIn_class;
JSObject *jsb_CrossApp_EaseSineIn_prototype;

bool js_crossapp_EaseSineIn_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseSineIn_create : Error processing arguments");
        CrossApp::EaseSineIn* ret = CrossApp::EaseSineIn::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseSineIn>(cx, (CrossApp::EaseSineIn*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseSineIn_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseSineIn_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseSineIn* cobj = new (std::nothrow) CrossApp::EaseSineIn();
    TypeTest<CrossApp::EaseSineIn> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseSineIn");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseSineIn_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseSineIn *nobj = new (std::nothrow) CrossApp::EaseSineIn();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseSineIn");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseSineIn_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseSineIn)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseSineIn *nobj = static_cast<CrossApp::EaseSineIn *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseSineIn(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseSineIn_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseSineIn_class->name = "EaseSineIn";
    jsb_CrossApp_EaseSineIn_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseSineIn_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseSineIn_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseSineIn_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseSineIn_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseSineIn_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseSineIn_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseSineIn_class->finalize = js_CrossApp_EaseSineIn_finalize;
    jsb_CrossApp_EaseSineIn_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseSineIn_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseSineIn_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseSineIn_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseSineIn_class,
        js_crossapp_EaseSineIn_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseSineIn", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseSineIn> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseSineIn_class;
        p->proto = jsb_CrossApp_EaseSineIn_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseSineIn.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseSineOut_class;
JSObject *jsb_CrossApp_EaseSineOut_prototype;

bool js_crossapp_EaseSineOut_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseSineOut_create : Error processing arguments");
        CrossApp::EaseSineOut* ret = CrossApp::EaseSineOut::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseSineOut>(cx, (CrossApp::EaseSineOut*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseSineOut_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseSineOut_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseSineOut* cobj = new (std::nothrow) CrossApp::EaseSineOut();
    TypeTest<CrossApp::EaseSineOut> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseSineOut");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseSineOut_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseSineOut *nobj = new (std::nothrow) CrossApp::EaseSineOut();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseSineOut");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseSineOut_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseSineOut)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseSineOut *nobj = static_cast<CrossApp::EaseSineOut *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseSineOut(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseSineOut_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseSineOut_class->name = "EaseSineOut";
    jsb_CrossApp_EaseSineOut_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseSineOut_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseSineOut_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseSineOut_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseSineOut_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseSineOut_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseSineOut_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseSineOut_class->finalize = js_CrossApp_EaseSineOut_finalize;
    jsb_CrossApp_EaseSineOut_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseSineOut_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseSineOut_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseSineOut_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseSineOut_class,
        js_crossapp_EaseSineOut_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseSineOut", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseSineOut> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseSineOut_class;
        p->proto = jsb_CrossApp_EaseSineOut_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseSineOut.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseSineInOut_class;
JSObject *jsb_CrossApp_EaseSineInOut_prototype;

bool js_crossapp_EaseSineInOut_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseSineInOut_create : Error processing arguments");
        CrossApp::EaseSineInOut* ret = CrossApp::EaseSineInOut::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseSineInOut>(cx, (CrossApp::EaseSineInOut*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseSineInOut_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseSineInOut_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseSineInOut* cobj = new (std::nothrow) CrossApp::EaseSineInOut();
    TypeTest<CrossApp::EaseSineInOut> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseSineInOut");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseSineInOut_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseSineInOut *nobj = new (std::nothrow) CrossApp::EaseSineInOut();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseSineInOut");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseSineInOut_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseSineInOut)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseSineInOut *nobj = static_cast<CrossApp::EaseSineInOut *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseSineInOut(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseSineInOut_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseSineInOut_class->name = "EaseSineInOut";
    jsb_CrossApp_EaseSineInOut_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseSineInOut_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseSineInOut_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseSineInOut_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseSineInOut_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseSineInOut_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseSineInOut_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseSineInOut_class->finalize = js_CrossApp_EaseSineInOut_finalize;
    jsb_CrossApp_EaseSineInOut_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseSineInOut_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseSineInOut_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseSineInOut_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseSineInOut_class,
        js_crossapp_EaseSineInOut_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseSineInOut", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseSineInOut> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseSineInOut_class;
        p->proto = jsb_CrossApp_EaseSineInOut_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseSineInOut.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseElastic_class;
JSObject *jsb_CrossApp_EaseElastic_prototype;

bool js_crossapp_EaseElastic_setPeriod(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::EaseElastic* cobj = (CrossApp::EaseElastic *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_EaseElastic_setPeriod : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseElastic_setPeriod : Error processing arguments");
        cobj->setPeriod(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_EaseElastic_setPeriod : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_EaseElastic_initWithAction(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::EaseElastic* cobj = (CrossApp::EaseElastic *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_EaseElastic_initWithAction : Invalid Native Object");
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseElastic_initWithAction : Error processing arguments");
        bool ret = cobj->initWithAction(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::ActionInterval* arg0 = nullptr;
        double arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseElastic_initWithAction : Error processing arguments");
        bool ret = cobj->initWithAction(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_EaseElastic_initWithAction : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_EaseElastic_getPeriod(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::EaseElastic* cobj = (CrossApp::EaseElastic *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_EaseElastic_getPeriod : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getPeriod();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_EaseElastic_getPeriod : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_EaseElastic_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseElastic* cobj = new (std::nothrow) CrossApp::EaseElastic();
    TypeTest<CrossApp::EaseElastic> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseElastic");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseElastic_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseElastic *nobj = new (std::nothrow) CrossApp::EaseElastic();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseElastic");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseElastic_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseElastic)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseElastic *nobj = static_cast<CrossApp::EaseElastic *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseElastic(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseElastic_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseElastic_class->name = "EaseElastic";
    jsb_CrossApp_EaseElastic_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseElastic_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseElastic_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseElastic_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseElastic_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseElastic_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseElastic_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseElastic_class->finalize = js_CrossApp_EaseElastic_finalize;
    jsb_CrossApp_EaseElastic_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setPeriod", js_crossapp_EaseElastic_setPeriod, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithAction", js_crossapp_EaseElastic_initWithAction, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPeriod", js_crossapp_EaseElastic_getPeriod, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_EaseElastic_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_EaseElastic_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseElastic_class,
        js_crossapp_EaseElastic_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseElastic", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseElastic> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseElastic_class;
        p->proto = jsb_CrossApp_EaseElastic_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseElastic.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseElasticIn_class;
JSObject *jsb_CrossApp_EaseElasticIn_prototype;

bool js_crossapp_EaseElasticIn_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 1) {
            CrossApp::ActionInterval* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::EaseElasticIn* ret = CrossApp::EaseElasticIn::create(arg0);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseElasticIn>(cx, (CrossApp::EaseElasticIn*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 2) {
            CrossApp::ActionInterval* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            CrossApp::EaseElasticIn* ret = CrossApp::EaseElasticIn::create(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseElasticIn>(cx, (CrossApp::EaseElasticIn*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_crossapp_EaseElasticIn_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseElasticIn_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseElasticIn* cobj = new (std::nothrow) CrossApp::EaseElasticIn();
    TypeTest<CrossApp::EaseElasticIn> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseElasticIn");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseElasticIn_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseElasticIn *nobj = new (std::nothrow) CrossApp::EaseElasticIn();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseElasticIn");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_EaseElastic_prototype;

void js_CrossApp_EaseElasticIn_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseElasticIn)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseElasticIn *nobj = static_cast<CrossApp::EaseElasticIn *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseElasticIn(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseElasticIn_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseElasticIn_class->name = "EaseElasticIn";
    jsb_CrossApp_EaseElasticIn_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseElasticIn_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseElasticIn_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseElasticIn_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseElasticIn_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseElasticIn_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseElasticIn_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseElasticIn_class->finalize = js_CrossApp_EaseElasticIn_finalize;
    jsb_CrossApp_EaseElasticIn_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseElasticIn_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseElasticIn_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseElasticIn_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_EaseElastic_prototype),
        jsb_CrossApp_EaseElasticIn_class,
        js_crossapp_EaseElasticIn_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseElasticIn", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseElasticIn> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseElasticIn_class;
        p->proto = jsb_CrossApp_EaseElasticIn_prototype;
        p->parentProto = jsb_CrossApp_EaseElastic_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseElasticIn.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseElasticOut_class;
JSObject *jsb_CrossApp_EaseElasticOut_prototype;

bool js_crossapp_EaseElasticOut_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 1) {
            CrossApp::ActionInterval* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::EaseElasticOut* ret = CrossApp::EaseElasticOut::create(arg0);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseElasticOut>(cx, (CrossApp::EaseElasticOut*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 2) {
            CrossApp::ActionInterval* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            CrossApp::EaseElasticOut* ret = CrossApp::EaseElasticOut::create(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseElasticOut>(cx, (CrossApp::EaseElasticOut*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_crossapp_EaseElasticOut_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseElasticOut_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseElasticOut* cobj = new (std::nothrow) CrossApp::EaseElasticOut();
    TypeTest<CrossApp::EaseElasticOut> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseElasticOut");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseElasticOut_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseElasticOut *nobj = new (std::nothrow) CrossApp::EaseElasticOut();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseElasticOut");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_EaseElastic_prototype;

void js_CrossApp_EaseElasticOut_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseElasticOut)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseElasticOut *nobj = static_cast<CrossApp::EaseElasticOut *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseElasticOut(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseElasticOut_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseElasticOut_class->name = "EaseElasticOut";
    jsb_CrossApp_EaseElasticOut_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseElasticOut_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseElasticOut_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseElasticOut_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseElasticOut_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseElasticOut_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseElasticOut_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseElasticOut_class->finalize = js_CrossApp_EaseElasticOut_finalize;
    jsb_CrossApp_EaseElasticOut_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseElasticOut_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseElasticOut_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseElasticOut_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_EaseElastic_prototype),
        jsb_CrossApp_EaseElasticOut_class,
        js_crossapp_EaseElasticOut_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseElasticOut", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseElasticOut> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseElasticOut_class;
        p->proto = jsb_CrossApp_EaseElasticOut_prototype;
        p->parentProto = jsb_CrossApp_EaseElastic_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseElasticOut.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseElasticInOut_class;
JSObject *jsb_CrossApp_EaseElasticInOut_prototype;

bool js_crossapp_EaseElasticInOut_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 1) {
            CrossApp::ActionInterval* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::EaseElasticInOut* ret = CrossApp::EaseElasticInOut::create(arg0);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseElasticInOut>(cx, (CrossApp::EaseElasticInOut*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 2) {
            CrossApp::ActionInterval* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            CrossApp::EaseElasticInOut* ret = CrossApp::EaseElasticInOut::create(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseElasticInOut>(cx, (CrossApp::EaseElasticInOut*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_crossapp_EaseElasticInOut_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseElasticInOut_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseElasticInOut* cobj = new (std::nothrow) CrossApp::EaseElasticInOut();
    TypeTest<CrossApp::EaseElasticInOut> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseElasticInOut");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseElasticInOut_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseElasticInOut *nobj = new (std::nothrow) CrossApp::EaseElasticInOut();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseElasticInOut");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_EaseElastic_prototype;

void js_CrossApp_EaseElasticInOut_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseElasticInOut)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseElasticInOut *nobj = static_cast<CrossApp::EaseElasticInOut *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseElasticInOut(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseElasticInOut_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseElasticInOut_class->name = "EaseElasticInOut";
    jsb_CrossApp_EaseElasticInOut_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseElasticInOut_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseElasticInOut_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseElasticInOut_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseElasticInOut_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseElasticInOut_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseElasticInOut_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseElasticInOut_class->finalize = js_CrossApp_EaseElasticInOut_finalize;
    jsb_CrossApp_EaseElasticInOut_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseElasticInOut_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseElasticInOut_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseElasticInOut_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_EaseElastic_prototype),
        jsb_CrossApp_EaseElasticInOut_class,
        js_crossapp_EaseElasticInOut_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseElasticInOut", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseElasticInOut> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseElasticInOut_class;
        p->proto = jsb_CrossApp_EaseElasticInOut_prototype;
        p->parentProto = jsb_CrossApp_EaseElastic_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseElasticInOut.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseBounce_class;
JSObject *jsb_CrossApp_EaseBounce_prototype;

bool js_crossapp_EaseBounce_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseBounce* cobj = new (std::nothrow) CrossApp::EaseBounce();
    TypeTest<CrossApp::EaseBounce> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseBounce");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseBounce_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseBounce *nobj = new (std::nothrow) CrossApp::EaseBounce();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseBounce");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseBounce_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseBounce)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseBounce *nobj = static_cast<CrossApp::EaseBounce *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseBounce(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseBounce_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseBounce_class->name = "EaseBounce";
    jsb_CrossApp_EaseBounce_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseBounce_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseBounce_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseBounce_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseBounce_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseBounce_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseBounce_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseBounce_class->finalize = js_CrossApp_EaseBounce_finalize;
    jsb_CrossApp_EaseBounce_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseBounce_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_EaseBounce_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseBounce_class,
        js_crossapp_EaseBounce_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseBounce", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseBounce> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseBounce_class;
        p->proto = jsb_CrossApp_EaseBounce_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseBounce.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseBounceIn_class;
JSObject *jsb_CrossApp_EaseBounceIn_prototype;

bool js_crossapp_EaseBounceIn_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseBounceIn_create : Error processing arguments");
        CrossApp::EaseBounceIn* ret = CrossApp::EaseBounceIn::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseBounceIn>(cx, (CrossApp::EaseBounceIn*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseBounceIn_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseBounceIn_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseBounceIn* cobj = new (std::nothrow) CrossApp::EaseBounceIn();
    TypeTest<CrossApp::EaseBounceIn> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseBounceIn");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseBounceIn_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseBounceIn *nobj = new (std::nothrow) CrossApp::EaseBounceIn();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseBounceIn");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_EaseBounce_prototype;

void js_CrossApp_EaseBounceIn_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseBounceIn)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseBounceIn *nobj = static_cast<CrossApp::EaseBounceIn *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseBounceIn(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseBounceIn_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseBounceIn_class->name = "EaseBounceIn";
    jsb_CrossApp_EaseBounceIn_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseBounceIn_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseBounceIn_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseBounceIn_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseBounceIn_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseBounceIn_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseBounceIn_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseBounceIn_class->finalize = js_CrossApp_EaseBounceIn_finalize;
    jsb_CrossApp_EaseBounceIn_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseBounceIn_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseBounceIn_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseBounceIn_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_EaseBounce_prototype),
        jsb_CrossApp_EaseBounceIn_class,
        js_crossapp_EaseBounceIn_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseBounceIn", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseBounceIn> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseBounceIn_class;
        p->proto = jsb_CrossApp_EaseBounceIn_prototype;
        p->parentProto = jsb_CrossApp_EaseBounce_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseBounceIn.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseBounceOut_class;
JSObject *jsb_CrossApp_EaseBounceOut_prototype;

bool js_crossapp_EaseBounceOut_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseBounceOut_create : Error processing arguments");
        CrossApp::EaseBounceOut* ret = CrossApp::EaseBounceOut::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseBounceOut>(cx, (CrossApp::EaseBounceOut*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseBounceOut_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseBounceOut_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseBounceOut* cobj = new (std::nothrow) CrossApp::EaseBounceOut();
    TypeTest<CrossApp::EaseBounceOut> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseBounceOut");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseBounceOut_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseBounceOut *nobj = new (std::nothrow) CrossApp::EaseBounceOut();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseBounceOut");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_EaseBounce_prototype;

void js_CrossApp_EaseBounceOut_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseBounceOut)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseBounceOut *nobj = static_cast<CrossApp::EaseBounceOut *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseBounceOut(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseBounceOut_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseBounceOut_class->name = "EaseBounceOut";
    jsb_CrossApp_EaseBounceOut_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseBounceOut_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseBounceOut_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseBounceOut_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseBounceOut_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseBounceOut_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseBounceOut_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseBounceOut_class->finalize = js_CrossApp_EaseBounceOut_finalize;
    jsb_CrossApp_EaseBounceOut_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseBounceOut_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseBounceOut_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseBounceOut_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_EaseBounce_prototype),
        jsb_CrossApp_EaseBounceOut_class,
        js_crossapp_EaseBounceOut_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseBounceOut", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseBounceOut> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseBounceOut_class;
        p->proto = jsb_CrossApp_EaseBounceOut_prototype;
        p->parentProto = jsb_CrossApp_EaseBounce_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseBounceOut.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseBounceInOut_class;
JSObject *jsb_CrossApp_EaseBounceInOut_prototype;

bool js_crossapp_EaseBounceInOut_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseBounceInOut_create : Error processing arguments");
        CrossApp::EaseBounceInOut* ret = CrossApp::EaseBounceInOut::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseBounceInOut>(cx, (CrossApp::EaseBounceInOut*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseBounceInOut_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseBounceInOut_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseBounceInOut* cobj = new (std::nothrow) CrossApp::EaseBounceInOut();
    TypeTest<CrossApp::EaseBounceInOut> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseBounceInOut");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseBounceInOut_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseBounceInOut *nobj = new (std::nothrow) CrossApp::EaseBounceInOut();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseBounceInOut");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_EaseBounce_prototype;

void js_CrossApp_EaseBounceInOut_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseBounceInOut)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseBounceInOut *nobj = static_cast<CrossApp::EaseBounceInOut *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseBounceInOut(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseBounceInOut_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseBounceInOut_class->name = "EaseBounceInOut";
    jsb_CrossApp_EaseBounceInOut_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseBounceInOut_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseBounceInOut_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseBounceInOut_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseBounceInOut_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseBounceInOut_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseBounceInOut_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseBounceInOut_class->finalize = js_CrossApp_EaseBounceInOut_finalize;
    jsb_CrossApp_EaseBounceInOut_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseBounceInOut_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseBounceInOut_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseBounceInOut_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_EaseBounce_prototype),
        jsb_CrossApp_EaseBounceInOut_class,
        js_crossapp_EaseBounceInOut_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseBounceInOut", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseBounceInOut> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseBounceInOut_class;
        p->proto = jsb_CrossApp_EaseBounceInOut_prototype;
        p->parentProto = jsb_CrossApp_EaseBounce_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseBounceInOut.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseBackIn_class;
JSObject *jsb_CrossApp_EaseBackIn_prototype;

bool js_crossapp_EaseBackIn_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseBackIn_create : Error processing arguments");
        CrossApp::EaseBackIn* ret = CrossApp::EaseBackIn::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseBackIn>(cx, (CrossApp::EaseBackIn*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseBackIn_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseBackIn_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseBackIn* cobj = new (std::nothrow) CrossApp::EaseBackIn();
    TypeTest<CrossApp::EaseBackIn> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseBackIn");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseBackIn_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseBackIn *nobj = new (std::nothrow) CrossApp::EaseBackIn();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseBackIn");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseBackIn_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseBackIn)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseBackIn *nobj = static_cast<CrossApp::EaseBackIn *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseBackIn(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseBackIn_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseBackIn_class->name = "EaseBackIn";
    jsb_CrossApp_EaseBackIn_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseBackIn_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseBackIn_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseBackIn_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseBackIn_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseBackIn_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseBackIn_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseBackIn_class->finalize = js_CrossApp_EaseBackIn_finalize;
    jsb_CrossApp_EaseBackIn_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseBackIn_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseBackIn_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseBackIn_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseBackIn_class,
        js_crossapp_EaseBackIn_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseBackIn", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseBackIn> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseBackIn_class;
        p->proto = jsb_CrossApp_EaseBackIn_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseBackIn.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseBackOut_class;
JSObject *jsb_CrossApp_EaseBackOut_prototype;

bool js_crossapp_EaseBackOut_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseBackOut_create : Error processing arguments");
        CrossApp::EaseBackOut* ret = CrossApp::EaseBackOut::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseBackOut>(cx, (CrossApp::EaseBackOut*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseBackOut_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseBackOut_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseBackOut* cobj = new (std::nothrow) CrossApp::EaseBackOut();
    TypeTest<CrossApp::EaseBackOut> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseBackOut");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseBackOut_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseBackOut *nobj = new (std::nothrow) CrossApp::EaseBackOut();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseBackOut");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseBackOut_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseBackOut)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseBackOut *nobj = static_cast<CrossApp::EaseBackOut *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseBackOut(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseBackOut_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseBackOut_class->name = "EaseBackOut";
    jsb_CrossApp_EaseBackOut_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseBackOut_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseBackOut_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseBackOut_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseBackOut_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseBackOut_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseBackOut_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseBackOut_class->finalize = js_CrossApp_EaseBackOut_finalize;
    jsb_CrossApp_EaseBackOut_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseBackOut_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseBackOut_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseBackOut_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseBackOut_class,
        js_crossapp_EaseBackOut_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseBackOut", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseBackOut> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseBackOut_class;
        p->proto = jsb_CrossApp_EaseBackOut_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseBackOut.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseBackInOut_class;
JSObject *jsb_CrossApp_EaseBackInOut_prototype;

bool js_crossapp_EaseBackInOut_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseBackInOut_create : Error processing arguments");
        CrossApp::EaseBackInOut* ret = CrossApp::EaseBackInOut::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseBackInOut>(cx, (CrossApp::EaseBackInOut*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseBackInOut_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseBackInOut_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseBackInOut* cobj = new (std::nothrow) CrossApp::EaseBackInOut();
    TypeTest<CrossApp::EaseBackInOut> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseBackInOut");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseBackInOut_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseBackInOut *nobj = new (std::nothrow) CrossApp::EaseBackInOut();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseBackInOut");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseBackInOut_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseBackInOut)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseBackInOut *nobj = static_cast<CrossApp::EaseBackInOut *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseBackInOut(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseBackInOut_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseBackInOut_class->name = "EaseBackInOut";
    jsb_CrossApp_EaseBackInOut_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseBackInOut_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseBackInOut_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseBackInOut_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseBackInOut_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseBackInOut_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseBackInOut_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseBackInOut_class->finalize = js_CrossApp_EaseBackInOut_finalize;
    jsb_CrossApp_EaseBackInOut_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseBackInOut_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseBackInOut_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseBackInOut_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseBackInOut_class,
        js_crossapp_EaseBackInOut_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseBackInOut", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseBackInOut> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseBackInOut_class;
        p->proto = jsb_CrossApp_EaseBackInOut_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseBackInOut.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseBezierAction_class;
JSObject *jsb_CrossApp_EaseBezierAction_prototype;

bool js_crossapp_EaseBezierAction_setBezierParamer(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::EaseBezierAction* cobj = (CrossApp::EaseBezierAction *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_EaseBezierAction_setBezierParamer : Invalid Native Object");
    if (argc == 4) {
        double arg0 = 0;
        double arg1 = 0;
        double arg2 = 0;
        double arg3 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseBezierAction_setBezierParamer : Error processing arguments");
        cobj->setBezierParamer(arg0, arg1, arg2, arg3);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_EaseBezierAction_setBezierParamer : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_crossapp_EaseBezierAction_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseBezierAction_create : Error processing arguments");
        CrossApp::EaseBezierAction* ret = CrossApp::EaseBezierAction::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseBezierAction>(cx, (CrossApp::EaseBezierAction*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseBezierAction_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseBezierAction_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseBezierAction* cobj = new (std::nothrow) CrossApp::EaseBezierAction();
    TypeTest<CrossApp::EaseBezierAction> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseBezierAction");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseBezierAction_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseBezierAction *nobj = new (std::nothrow) CrossApp::EaseBezierAction();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseBezierAction");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseBezierAction_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseBezierAction)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseBezierAction *nobj = static_cast<CrossApp::EaseBezierAction *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseBezierAction(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseBezierAction_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseBezierAction_class->name = "EaseBezierAction";
    jsb_CrossApp_EaseBezierAction_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseBezierAction_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseBezierAction_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseBezierAction_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseBezierAction_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseBezierAction_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseBezierAction_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseBezierAction_class->finalize = js_CrossApp_EaseBezierAction_finalize;
    jsb_CrossApp_EaseBezierAction_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setBezierParamer", js_crossapp_EaseBezierAction_setBezierParamer, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_EaseBezierAction_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseBezierAction_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseBezierAction_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseBezierAction_class,
        js_crossapp_EaseBezierAction_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseBezierAction", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseBezierAction> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseBezierAction_class;
        p->proto = jsb_CrossApp_EaseBezierAction_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseBezierAction.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseQuadraticActionIn_class;
JSObject *jsb_CrossApp_EaseQuadraticActionIn_prototype;

bool js_crossapp_EaseQuadraticActionIn_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseQuadraticActionIn_create : Error processing arguments");
        CrossApp::EaseQuadraticActionIn* ret = CrossApp::EaseQuadraticActionIn::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseQuadraticActionIn>(cx, (CrossApp::EaseQuadraticActionIn*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseQuadraticActionIn_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseQuadraticActionIn_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseQuadraticActionIn* cobj = new (std::nothrow) CrossApp::EaseQuadraticActionIn();
    TypeTest<CrossApp::EaseQuadraticActionIn> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseQuadraticActionIn");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseQuadraticActionIn_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseQuadraticActionIn *nobj = new (std::nothrow) CrossApp::EaseQuadraticActionIn();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseQuadraticActionIn");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseQuadraticActionIn_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseQuadraticActionIn)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseQuadraticActionIn *nobj = static_cast<CrossApp::EaseQuadraticActionIn *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseQuadraticActionIn(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseQuadraticActionIn_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseQuadraticActionIn_class->name = "EaseQuadraticActionIn";
    jsb_CrossApp_EaseQuadraticActionIn_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseQuadraticActionIn_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseQuadraticActionIn_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseQuadraticActionIn_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseQuadraticActionIn_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseQuadraticActionIn_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseQuadraticActionIn_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseQuadraticActionIn_class->finalize = js_CrossApp_EaseQuadraticActionIn_finalize;
    jsb_CrossApp_EaseQuadraticActionIn_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseQuadraticActionIn_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseQuadraticActionIn_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseQuadraticActionIn_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseQuadraticActionIn_class,
        js_crossapp_EaseQuadraticActionIn_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseQuadraticActionIn", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseQuadraticActionIn> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseQuadraticActionIn_class;
        p->proto = jsb_CrossApp_EaseQuadraticActionIn_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseQuadraticActionIn.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseQuadraticActionOut_class;
JSObject *jsb_CrossApp_EaseQuadraticActionOut_prototype;

bool js_crossapp_EaseQuadraticActionOut_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseQuadraticActionOut_create : Error processing arguments");
        CrossApp::EaseQuadraticActionOut* ret = CrossApp::EaseQuadraticActionOut::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseQuadraticActionOut>(cx, (CrossApp::EaseQuadraticActionOut*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseQuadraticActionOut_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseQuadraticActionOut_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseQuadraticActionOut* cobj = new (std::nothrow) CrossApp::EaseQuadraticActionOut();
    TypeTest<CrossApp::EaseQuadraticActionOut> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseQuadraticActionOut");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseQuadraticActionOut_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseQuadraticActionOut *nobj = new (std::nothrow) CrossApp::EaseQuadraticActionOut();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseQuadraticActionOut");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseQuadraticActionOut_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseQuadraticActionOut)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseQuadraticActionOut *nobj = static_cast<CrossApp::EaseQuadraticActionOut *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseQuadraticActionOut(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseQuadraticActionOut_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseQuadraticActionOut_class->name = "EaseQuadraticActionOut";
    jsb_CrossApp_EaseQuadraticActionOut_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseQuadraticActionOut_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseQuadraticActionOut_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseQuadraticActionOut_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseQuadraticActionOut_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseQuadraticActionOut_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseQuadraticActionOut_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseQuadraticActionOut_class->finalize = js_CrossApp_EaseQuadraticActionOut_finalize;
    jsb_CrossApp_EaseQuadraticActionOut_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseQuadraticActionOut_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseQuadraticActionOut_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseQuadraticActionOut_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseQuadraticActionOut_class,
        js_crossapp_EaseQuadraticActionOut_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseQuadraticActionOut", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseQuadraticActionOut> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseQuadraticActionOut_class;
        p->proto = jsb_CrossApp_EaseQuadraticActionOut_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseQuadraticActionOut.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseQuadraticActionInOut_class;
JSObject *jsb_CrossApp_EaseQuadraticActionInOut_prototype;

bool js_crossapp_EaseQuadraticActionInOut_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseQuadraticActionInOut_create : Error processing arguments");
        CrossApp::EaseQuadraticActionInOut* ret = CrossApp::EaseQuadraticActionInOut::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseQuadraticActionInOut>(cx, (CrossApp::EaseQuadraticActionInOut*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseQuadraticActionInOut_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseQuadraticActionInOut_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseQuadraticActionInOut* cobj = new (std::nothrow) CrossApp::EaseQuadraticActionInOut();
    TypeTest<CrossApp::EaseQuadraticActionInOut> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseQuadraticActionInOut");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseQuadraticActionInOut_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseQuadraticActionInOut *nobj = new (std::nothrow) CrossApp::EaseQuadraticActionInOut();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseQuadraticActionInOut");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseQuadraticActionInOut_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseQuadraticActionInOut)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseQuadraticActionInOut *nobj = static_cast<CrossApp::EaseQuadraticActionInOut *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseQuadraticActionInOut(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseQuadraticActionInOut_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseQuadraticActionInOut_class->name = "EaseQuadraticActionInOut";
    jsb_CrossApp_EaseQuadraticActionInOut_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseQuadraticActionInOut_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseQuadraticActionInOut_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseQuadraticActionInOut_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseQuadraticActionInOut_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseQuadraticActionInOut_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseQuadraticActionInOut_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseQuadraticActionInOut_class->finalize = js_CrossApp_EaseQuadraticActionInOut_finalize;
    jsb_CrossApp_EaseQuadraticActionInOut_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseQuadraticActionInOut_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseQuadraticActionInOut_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseQuadraticActionInOut_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseQuadraticActionInOut_class,
        js_crossapp_EaseQuadraticActionInOut_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseQuadraticActionInOut", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseQuadraticActionInOut> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseQuadraticActionInOut_class;
        p->proto = jsb_CrossApp_EaseQuadraticActionInOut_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseQuadraticActionInOut.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseQuarticActionIn_class;
JSObject *jsb_CrossApp_EaseQuarticActionIn_prototype;

bool js_crossapp_EaseQuarticActionIn_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseQuarticActionIn_create : Error processing arguments");
        CrossApp::EaseQuarticActionIn* ret = CrossApp::EaseQuarticActionIn::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseQuarticActionIn>(cx, (CrossApp::EaseQuarticActionIn*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseQuarticActionIn_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseQuarticActionIn_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseQuarticActionIn* cobj = new (std::nothrow) CrossApp::EaseQuarticActionIn();
    TypeTest<CrossApp::EaseQuarticActionIn> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseQuarticActionIn");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseQuarticActionIn_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseQuarticActionIn *nobj = new (std::nothrow) CrossApp::EaseQuarticActionIn();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseQuarticActionIn");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseQuarticActionIn_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseQuarticActionIn)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseQuarticActionIn *nobj = static_cast<CrossApp::EaseQuarticActionIn *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseQuarticActionIn(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseQuarticActionIn_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseQuarticActionIn_class->name = "EaseQuarticActionIn";
    jsb_CrossApp_EaseQuarticActionIn_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseQuarticActionIn_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseQuarticActionIn_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseQuarticActionIn_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseQuarticActionIn_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseQuarticActionIn_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseQuarticActionIn_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseQuarticActionIn_class->finalize = js_CrossApp_EaseQuarticActionIn_finalize;
    jsb_CrossApp_EaseQuarticActionIn_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseQuarticActionIn_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseQuarticActionIn_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseQuarticActionIn_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseQuarticActionIn_class,
        js_crossapp_EaseQuarticActionIn_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseQuarticActionIn", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseQuarticActionIn> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseQuarticActionIn_class;
        p->proto = jsb_CrossApp_EaseQuarticActionIn_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseQuarticActionIn.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseQuarticActionOut_class;
JSObject *jsb_CrossApp_EaseQuarticActionOut_prototype;

bool js_crossapp_EaseQuarticActionOut_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseQuarticActionOut_create : Error processing arguments");
        CrossApp::EaseQuarticActionOut* ret = CrossApp::EaseQuarticActionOut::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseQuarticActionOut>(cx, (CrossApp::EaseQuarticActionOut*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseQuarticActionOut_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseQuarticActionOut_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseQuarticActionOut* cobj = new (std::nothrow) CrossApp::EaseQuarticActionOut();
    TypeTest<CrossApp::EaseQuarticActionOut> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseQuarticActionOut");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseQuarticActionOut_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseQuarticActionOut *nobj = new (std::nothrow) CrossApp::EaseQuarticActionOut();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseQuarticActionOut");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseQuarticActionOut_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseQuarticActionOut)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseQuarticActionOut *nobj = static_cast<CrossApp::EaseQuarticActionOut *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseQuarticActionOut(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseQuarticActionOut_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseQuarticActionOut_class->name = "EaseQuarticActionOut";
    jsb_CrossApp_EaseQuarticActionOut_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseQuarticActionOut_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseQuarticActionOut_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseQuarticActionOut_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseQuarticActionOut_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseQuarticActionOut_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseQuarticActionOut_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseQuarticActionOut_class->finalize = js_CrossApp_EaseQuarticActionOut_finalize;
    jsb_CrossApp_EaseQuarticActionOut_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseQuarticActionOut_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseQuarticActionOut_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseQuarticActionOut_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseQuarticActionOut_class,
        js_crossapp_EaseQuarticActionOut_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseQuarticActionOut", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseQuarticActionOut> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseQuarticActionOut_class;
        p->proto = jsb_CrossApp_EaseQuarticActionOut_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseQuarticActionOut.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseQuarticActionInOut_class;
JSObject *jsb_CrossApp_EaseQuarticActionInOut_prototype;

bool js_crossapp_EaseQuarticActionInOut_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseQuarticActionInOut_create : Error processing arguments");
        CrossApp::EaseQuarticActionInOut* ret = CrossApp::EaseQuarticActionInOut::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseQuarticActionInOut>(cx, (CrossApp::EaseQuarticActionInOut*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseQuarticActionInOut_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseQuarticActionInOut_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseQuarticActionInOut* cobj = new (std::nothrow) CrossApp::EaseQuarticActionInOut();
    TypeTest<CrossApp::EaseQuarticActionInOut> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseQuarticActionInOut");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseQuarticActionInOut_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseQuarticActionInOut *nobj = new (std::nothrow) CrossApp::EaseQuarticActionInOut();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseQuarticActionInOut");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseQuarticActionInOut_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseQuarticActionInOut)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseQuarticActionInOut *nobj = static_cast<CrossApp::EaseQuarticActionInOut *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseQuarticActionInOut(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseQuarticActionInOut_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseQuarticActionInOut_class->name = "EaseQuarticActionInOut";
    jsb_CrossApp_EaseQuarticActionInOut_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseQuarticActionInOut_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseQuarticActionInOut_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseQuarticActionInOut_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseQuarticActionInOut_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseQuarticActionInOut_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseQuarticActionInOut_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseQuarticActionInOut_class->finalize = js_CrossApp_EaseQuarticActionInOut_finalize;
    jsb_CrossApp_EaseQuarticActionInOut_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseQuarticActionInOut_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseQuarticActionInOut_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseQuarticActionInOut_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseQuarticActionInOut_class,
        js_crossapp_EaseQuarticActionInOut_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseQuarticActionInOut", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseQuarticActionInOut> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseQuarticActionInOut_class;
        p->proto = jsb_CrossApp_EaseQuarticActionInOut_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseQuarticActionInOut.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseQuinticActionIn_class;
JSObject *jsb_CrossApp_EaseQuinticActionIn_prototype;

bool js_crossapp_EaseQuinticActionIn_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseQuinticActionIn_create : Error processing arguments");
        CrossApp::EaseQuinticActionIn* ret = CrossApp::EaseQuinticActionIn::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseQuinticActionIn>(cx, (CrossApp::EaseQuinticActionIn*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseQuinticActionIn_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseQuinticActionIn_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseQuinticActionIn* cobj = new (std::nothrow) CrossApp::EaseQuinticActionIn();
    TypeTest<CrossApp::EaseQuinticActionIn> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseQuinticActionIn");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseQuinticActionIn_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseQuinticActionIn *nobj = new (std::nothrow) CrossApp::EaseQuinticActionIn();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseQuinticActionIn");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseQuinticActionIn_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseQuinticActionIn)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseQuinticActionIn *nobj = static_cast<CrossApp::EaseQuinticActionIn *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseQuinticActionIn(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseQuinticActionIn_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseQuinticActionIn_class->name = "EaseQuinticActionIn";
    jsb_CrossApp_EaseQuinticActionIn_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseQuinticActionIn_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseQuinticActionIn_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseQuinticActionIn_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseQuinticActionIn_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseQuinticActionIn_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseQuinticActionIn_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseQuinticActionIn_class->finalize = js_CrossApp_EaseQuinticActionIn_finalize;
    jsb_CrossApp_EaseQuinticActionIn_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseQuinticActionIn_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseQuinticActionIn_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseQuinticActionIn_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseQuinticActionIn_class,
        js_crossapp_EaseQuinticActionIn_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseQuinticActionIn", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseQuinticActionIn> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseQuinticActionIn_class;
        p->proto = jsb_CrossApp_EaseQuinticActionIn_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseQuinticActionIn.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseQuinticActionOut_class;
JSObject *jsb_CrossApp_EaseQuinticActionOut_prototype;

bool js_crossapp_EaseQuinticActionOut_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseQuinticActionOut_create : Error processing arguments");
        CrossApp::EaseQuinticActionOut* ret = CrossApp::EaseQuinticActionOut::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseQuinticActionOut>(cx, (CrossApp::EaseQuinticActionOut*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseQuinticActionOut_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseQuinticActionOut_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseQuinticActionOut* cobj = new (std::nothrow) CrossApp::EaseQuinticActionOut();
    TypeTest<CrossApp::EaseQuinticActionOut> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseQuinticActionOut");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseQuinticActionOut_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseQuinticActionOut *nobj = new (std::nothrow) CrossApp::EaseQuinticActionOut();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseQuinticActionOut");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseQuinticActionOut_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseQuinticActionOut)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseQuinticActionOut *nobj = static_cast<CrossApp::EaseQuinticActionOut *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseQuinticActionOut(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseQuinticActionOut_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseQuinticActionOut_class->name = "EaseQuinticActionOut";
    jsb_CrossApp_EaseQuinticActionOut_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseQuinticActionOut_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseQuinticActionOut_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseQuinticActionOut_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseQuinticActionOut_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseQuinticActionOut_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseQuinticActionOut_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseQuinticActionOut_class->finalize = js_CrossApp_EaseQuinticActionOut_finalize;
    jsb_CrossApp_EaseQuinticActionOut_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseQuinticActionOut_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseQuinticActionOut_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseQuinticActionOut_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseQuinticActionOut_class,
        js_crossapp_EaseQuinticActionOut_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseQuinticActionOut", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseQuinticActionOut> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseQuinticActionOut_class;
        p->proto = jsb_CrossApp_EaseQuinticActionOut_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseQuinticActionOut.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseQuinticActionInOut_class;
JSObject *jsb_CrossApp_EaseQuinticActionInOut_prototype;

bool js_crossapp_EaseQuinticActionInOut_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseQuinticActionInOut_create : Error processing arguments");
        CrossApp::EaseQuinticActionInOut* ret = CrossApp::EaseQuinticActionInOut::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseQuinticActionInOut>(cx, (CrossApp::EaseQuinticActionInOut*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseQuinticActionInOut_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseQuinticActionInOut_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseQuinticActionInOut* cobj = new (std::nothrow) CrossApp::EaseQuinticActionInOut();
    TypeTest<CrossApp::EaseQuinticActionInOut> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseQuinticActionInOut");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseQuinticActionInOut_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseQuinticActionInOut *nobj = new (std::nothrow) CrossApp::EaseQuinticActionInOut();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseQuinticActionInOut");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseQuinticActionInOut_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseQuinticActionInOut)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseQuinticActionInOut *nobj = static_cast<CrossApp::EaseQuinticActionInOut *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseQuinticActionInOut(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseQuinticActionInOut_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseQuinticActionInOut_class->name = "EaseQuinticActionInOut";
    jsb_CrossApp_EaseQuinticActionInOut_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseQuinticActionInOut_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseQuinticActionInOut_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseQuinticActionInOut_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseQuinticActionInOut_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseQuinticActionInOut_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseQuinticActionInOut_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseQuinticActionInOut_class->finalize = js_CrossApp_EaseQuinticActionInOut_finalize;
    jsb_CrossApp_EaseQuinticActionInOut_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseQuinticActionInOut_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseQuinticActionInOut_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseQuinticActionInOut_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseQuinticActionInOut_class,
        js_crossapp_EaseQuinticActionInOut_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseQuinticActionInOut", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseQuinticActionInOut> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseQuinticActionInOut_class;
        p->proto = jsb_CrossApp_EaseQuinticActionInOut_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseQuinticActionInOut.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseCircleActionIn_class;
JSObject *jsb_CrossApp_EaseCircleActionIn_prototype;

bool js_crossapp_EaseCircleActionIn_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseCircleActionIn_create : Error processing arguments");
        CrossApp::EaseCircleActionIn* ret = CrossApp::EaseCircleActionIn::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseCircleActionIn>(cx, (CrossApp::EaseCircleActionIn*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseCircleActionIn_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseCircleActionIn_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseCircleActionIn* cobj = new (std::nothrow) CrossApp::EaseCircleActionIn();
    TypeTest<CrossApp::EaseCircleActionIn> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseCircleActionIn");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseCircleActionIn_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseCircleActionIn *nobj = new (std::nothrow) CrossApp::EaseCircleActionIn();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseCircleActionIn");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseCircleActionIn_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseCircleActionIn)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseCircleActionIn *nobj = static_cast<CrossApp::EaseCircleActionIn *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseCircleActionIn(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseCircleActionIn_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseCircleActionIn_class->name = "EaseCircleActionIn";
    jsb_CrossApp_EaseCircleActionIn_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseCircleActionIn_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseCircleActionIn_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseCircleActionIn_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseCircleActionIn_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseCircleActionIn_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseCircleActionIn_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseCircleActionIn_class->finalize = js_CrossApp_EaseCircleActionIn_finalize;
    jsb_CrossApp_EaseCircleActionIn_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseCircleActionIn_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseCircleActionIn_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseCircleActionIn_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseCircleActionIn_class,
        js_crossapp_EaseCircleActionIn_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseCircleActionIn", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseCircleActionIn> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseCircleActionIn_class;
        p->proto = jsb_CrossApp_EaseCircleActionIn_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseCircleActionIn.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseCircleActionOut_class;
JSObject *jsb_CrossApp_EaseCircleActionOut_prototype;

bool js_crossapp_EaseCircleActionOut_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseCircleActionOut_create : Error processing arguments");
        CrossApp::EaseCircleActionOut* ret = CrossApp::EaseCircleActionOut::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseCircleActionOut>(cx, (CrossApp::EaseCircleActionOut*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseCircleActionOut_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseCircleActionOut_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseCircleActionOut* cobj = new (std::nothrow) CrossApp::EaseCircleActionOut();
    TypeTest<CrossApp::EaseCircleActionOut> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseCircleActionOut");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseCircleActionOut_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseCircleActionOut *nobj = new (std::nothrow) CrossApp::EaseCircleActionOut();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseCircleActionOut");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseCircleActionOut_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseCircleActionOut)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseCircleActionOut *nobj = static_cast<CrossApp::EaseCircleActionOut *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseCircleActionOut(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseCircleActionOut_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseCircleActionOut_class->name = "EaseCircleActionOut";
    jsb_CrossApp_EaseCircleActionOut_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseCircleActionOut_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseCircleActionOut_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseCircleActionOut_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseCircleActionOut_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseCircleActionOut_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseCircleActionOut_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseCircleActionOut_class->finalize = js_CrossApp_EaseCircleActionOut_finalize;
    jsb_CrossApp_EaseCircleActionOut_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseCircleActionOut_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseCircleActionOut_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseCircleActionOut_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseCircleActionOut_class,
        js_crossapp_EaseCircleActionOut_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseCircleActionOut", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseCircleActionOut> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseCircleActionOut_class;
        p->proto = jsb_CrossApp_EaseCircleActionOut_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseCircleActionOut.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseCircleActionInOut_class;
JSObject *jsb_CrossApp_EaseCircleActionInOut_prototype;

bool js_crossapp_EaseCircleActionInOut_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseCircleActionInOut_create : Error processing arguments");
        CrossApp::EaseCircleActionInOut* ret = CrossApp::EaseCircleActionInOut::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseCircleActionInOut>(cx, (CrossApp::EaseCircleActionInOut*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseCircleActionInOut_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseCircleActionInOut_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseCircleActionInOut* cobj = new (std::nothrow) CrossApp::EaseCircleActionInOut();
    TypeTest<CrossApp::EaseCircleActionInOut> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseCircleActionInOut");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseCircleActionInOut_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseCircleActionInOut *nobj = new (std::nothrow) CrossApp::EaseCircleActionInOut();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseCircleActionInOut");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseCircleActionInOut_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseCircleActionInOut)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseCircleActionInOut *nobj = static_cast<CrossApp::EaseCircleActionInOut *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseCircleActionInOut(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseCircleActionInOut_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseCircleActionInOut_class->name = "EaseCircleActionInOut";
    jsb_CrossApp_EaseCircleActionInOut_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseCircleActionInOut_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseCircleActionInOut_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseCircleActionInOut_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseCircleActionInOut_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseCircleActionInOut_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseCircleActionInOut_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseCircleActionInOut_class->finalize = js_CrossApp_EaseCircleActionInOut_finalize;
    jsb_CrossApp_EaseCircleActionInOut_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseCircleActionInOut_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseCircleActionInOut_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseCircleActionInOut_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseCircleActionInOut_class,
        js_crossapp_EaseCircleActionInOut_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseCircleActionInOut", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseCircleActionInOut> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseCircleActionInOut_class;
        p->proto = jsb_CrossApp_EaseCircleActionInOut_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseCircleActionInOut.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseCubicActionIn_class;
JSObject *jsb_CrossApp_EaseCubicActionIn_prototype;

bool js_crossapp_EaseCubicActionIn_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseCubicActionIn_create : Error processing arguments");
        CrossApp::EaseCubicActionIn* ret = CrossApp::EaseCubicActionIn::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseCubicActionIn>(cx, (CrossApp::EaseCubicActionIn*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseCubicActionIn_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseCubicActionIn_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseCubicActionIn* cobj = new (std::nothrow) CrossApp::EaseCubicActionIn();
    TypeTest<CrossApp::EaseCubicActionIn> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseCubicActionIn");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseCubicActionIn_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseCubicActionIn *nobj = new (std::nothrow) CrossApp::EaseCubicActionIn();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseCubicActionIn");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseCubicActionIn_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseCubicActionIn)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseCubicActionIn *nobj = static_cast<CrossApp::EaseCubicActionIn *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseCubicActionIn(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseCubicActionIn_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseCubicActionIn_class->name = "EaseCubicActionIn";
    jsb_CrossApp_EaseCubicActionIn_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseCubicActionIn_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseCubicActionIn_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseCubicActionIn_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseCubicActionIn_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseCubicActionIn_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseCubicActionIn_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseCubicActionIn_class->finalize = js_CrossApp_EaseCubicActionIn_finalize;
    jsb_CrossApp_EaseCubicActionIn_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseCubicActionIn_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseCubicActionIn_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseCubicActionIn_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseCubicActionIn_class,
        js_crossapp_EaseCubicActionIn_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseCubicActionIn", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseCubicActionIn> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseCubicActionIn_class;
        p->proto = jsb_CrossApp_EaseCubicActionIn_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseCubicActionIn.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseCubicActionOut_class;
JSObject *jsb_CrossApp_EaseCubicActionOut_prototype;

bool js_crossapp_EaseCubicActionOut_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseCubicActionOut_create : Error processing arguments");
        CrossApp::EaseCubicActionOut* ret = CrossApp::EaseCubicActionOut::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseCubicActionOut>(cx, (CrossApp::EaseCubicActionOut*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseCubicActionOut_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseCubicActionOut_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseCubicActionOut* cobj = new (std::nothrow) CrossApp::EaseCubicActionOut();
    TypeTest<CrossApp::EaseCubicActionOut> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseCubicActionOut");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseCubicActionOut_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseCubicActionOut *nobj = new (std::nothrow) CrossApp::EaseCubicActionOut();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseCubicActionOut");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseCubicActionOut_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseCubicActionOut)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseCubicActionOut *nobj = static_cast<CrossApp::EaseCubicActionOut *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseCubicActionOut(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseCubicActionOut_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseCubicActionOut_class->name = "EaseCubicActionOut";
    jsb_CrossApp_EaseCubicActionOut_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseCubicActionOut_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseCubicActionOut_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseCubicActionOut_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseCubicActionOut_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseCubicActionOut_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseCubicActionOut_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseCubicActionOut_class->finalize = js_CrossApp_EaseCubicActionOut_finalize;
    jsb_CrossApp_EaseCubicActionOut_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseCubicActionOut_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseCubicActionOut_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseCubicActionOut_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseCubicActionOut_class,
        js_crossapp_EaseCubicActionOut_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseCubicActionOut", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseCubicActionOut> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseCubicActionOut_class;
        p->proto = jsb_CrossApp_EaseCubicActionOut_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseCubicActionOut.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_EaseCubicActionInOut_class;
JSObject *jsb_CrossApp_EaseCubicActionInOut_prototype;

bool js_crossapp_EaseCubicActionInOut_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::ActionInterval* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::ActionInterval*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_EaseCubicActionInOut_create : Error processing arguments");
        CrossApp::EaseCubicActionInOut* ret = CrossApp::EaseCubicActionInOut::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::EaseCubicActionInOut>(cx, (CrossApp::EaseCubicActionInOut*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_EaseCubicActionInOut_create : wrong number of arguments");
    return false;
}
bool js_crossapp_EaseCubicActionInOut_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::EaseCubicActionInOut* cobj = new (std::nothrow) CrossApp::EaseCubicActionInOut();
    TypeTest<CrossApp::EaseCubicActionInOut> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseCubicActionInOut");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_EaseCubicActionInOut_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::EaseCubicActionInOut *nobj = new (std::nothrow) CrossApp::EaseCubicActionInOut();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::EaseCubicActionInOut");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_ActionEase_prototype;

void js_CrossApp_EaseCubicActionInOut_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (EaseCubicActionInOut)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::EaseCubicActionInOut *nobj = static_cast<CrossApp::EaseCubicActionInOut *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_EaseCubicActionInOut(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_EaseCubicActionInOut_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_EaseCubicActionInOut_class->name = "EaseCubicActionInOut";
    jsb_CrossApp_EaseCubicActionInOut_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_EaseCubicActionInOut_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_EaseCubicActionInOut_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_EaseCubicActionInOut_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_EaseCubicActionInOut_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_EaseCubicActionInOut_class->resolve = JS_ResolveStub;
    jsb_CrossApp_EaseCubicActionInOut_class->convert = JS_ConvertStub;
    jsb_CrossApp_EaseCubicActionInOut_class->finalize = js_CrossApp_EaseCubicActionInOut_finalize;
    jsb_CrossApp_EaseCubicActionInOut_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ctor", js_crossapp_EaseCubicActionInOut_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_EaseCubicActionInOut_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_EaseCubicActionInOut_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionEase_prototype),
        jsb_CrossApp_EaseCubicActionInOut_class,
        js_crossapp_EaseCubicActionInOut_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "EaseCubicActionInOut", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::EaseCubicActionInOut> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_EaseCubicActionInOut_class;
        p->proto = jsb_CrossApp_EaseCubicActionInOut_prototype;
        p->parentProto = jsb_CrossApp_ActionEase_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.EaseCubicActionInOut.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_ActionTween_class;
JSObject *jsb_CrossApp_ActionTween_prototype;

bool js_crossapp_ActionTween_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionTween* cobj = (CrossApp::ActionTween *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionTween_initWithDuration : Invalid Native Object");
    if (argc == 4) {
        double arg0 = 0;
        std::string arg1;
        double arg2 = 0;
        double arg3 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_ActionTween_initWithDuration : Error processing arguments");
        bool ret = cobj->initWithDuration(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionTween_initWithDuration : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_crossapp_ActionTween_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 4) {
        double arg0 = 0;
        std::string arg1;
        double arg2 = 0;
        double arg3 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_ActionTween_create : Error processing arguments");
        CrossApp::ActionTween* ret = CrossApp::ActionTween::create(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::ActionTween>(cx, (CrossApp::ActionTween*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_ActionTween_create : wrong number of arguments");
    return false;
}

extern JSObject *jsb_CrossApp_ActionInterval_prototype;

void js_CrossApp_ActionTween_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (ActionTween)", obj);
}
void js_register_crossapp_ActionTween(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_ActionTween_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_ActionTween_class->name = "ActionTween";
    jsb_CrossApp_ActionTween_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_ActionTween_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_ActionTween_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_ActionTween_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_ActionTween_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_ActionTween_class->resolve = JS_ResolveStub;
    jsb_CrossApp_ActionTween_class->convert = JS_ConvertStub;
    jsb_CrossApp_ActionTween_class->finalize = js_CrossApp_ActionTween_finalize;
    jsb_CrossApp_ActionTween_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("initWithDuration", js_crossapp_ActionTween_initWithDuration, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_ActionTween_create, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_ActionTween_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInterval_prototype),
        jsb_CrossApp_ActionTween_class,
        dummy_constructor<CrossApp::ActionTween>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "ActionTween", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::ActionTween> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_ActionTween_class;
        p->proto = jsb_CrossApp_ActionTween_prototype;
        p->parentProto = jsb_CrossApp_ActionInterval_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.ActionTween.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CrossApp_ActionInstant_class;
JSObject *jsb_CrossApp_ActionInstant_prototype;


extern JSObject *jsb_CrossApp_FiniteTimeAction_prototype;

void js_CrossApp_ActionInstant_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (ActionInstant)", obj);
}
void js_register_crossapp_ActionInstant(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_ActionInstant_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_ActionInstant_class->name = "ActionInstant";
    jsb_CrossApp_ActionInstant_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_ActionInstant_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_ActionInstant_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_ActionInstant_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_ActionInstant_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_ActionInstant_class->resolve = JS_ResolveStub;
    jsb_CrossApp_ActionInstant_class->convert = JS_ConvertStub;
    jsb_CrossApp_ActionInstant_class->finalize = js_CrossApp_ActionInstant_finalize;
    jsb_CrossApp_ActionInstant_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_ActionInstant_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_FiniteTimeAction_prototype),
        jsb_CrossApp_ActionInstant_class,
        empty_constructor, 0,
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "ActionInstant", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::ActionInstant> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_ActionInstant_class;
        p->proto = jsb_CrossApp_ActionInstant_prototype;
        p->parentProto = jsb_CrossApp_FiniteTimeAction_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_Show_class;
JSObject *jsb_CrossApp_Show_prototype;

bool js_crossapp_Show_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::Show* ret = CrossApp::Show::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Show>(cx, (CrossApp::Show*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_Show_create : wrong number of arguments");
    return false;
}
bool js_crossapp_Show_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::Show* cobj = new (std::nothrow) CrossApp::Show();
    TypeTest<CrossApp::Show> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::Show");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_ActionInstant_prototype;

void js_CrossApp_Show_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (Show)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::Show *nobj = static_cast<CrossApp::Show *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_Show(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_Show_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_Show_class->name = "Show";
    jsb_CrossApp_Show_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_Show_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_Show_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_Show_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_Show_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_Show_class->resolve = JS_ResolveStub;
    jsb_CrossApp_Show_class->convert = JS_ConvertStub;
    jsb_CrossApp_Show_class->finalize = js_CrossApp_Show_finalize;
    jsb_CrossApp_Show_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_Show_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_Show_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInstant_prototype),
        jsb_CrossApp_Show_class,
        js_crossapp_Show_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "Show", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::Show> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_Show_class;
        p->proto = jsb_CrossApp_Show_prototype;
        p->parentProto = jsb_CrossApp_ActionInstant_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_Hide_class;
JSObject *jsb_CrossApp_Hide_prototype;

bool js_crossapp_Hide_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::Hide* ret = CrossApp::Hide::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Hide>(cx, (CrossApp::Hide*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_Hide_create : wrong number of arguments");
    return false;
}
bool js_crossapp_Hide_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::Hide* cobj = new (std::nothrow) CrossApp::Hide();
    TypeTest<CrossApp::Hide> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::Hide");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_ActionInstant_prototype;

void js_CrossApp_Hide_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (Hide)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::Hide *nobj = static_cast<CrossApp::Hide *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_Hide(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_Hide_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_Hide_class->name = "Hide";
    jsb_CrossApp_Hide_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_Hide_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_Hide_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_Hide_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_Hide_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_Hide_class->resolve = JS_ResolveStub;
    jsb_CrossApp_Hide_class->convert = JS_ConvertStub;
    jsb_CrossApp_Hide_class->finalize = js_CrossApp_Hide_finalize;
    jsb_CrossApp_Hide_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_Hide_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_Hide_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInstant_prototype),
        jsb_CrossApp_Hide_class,
        js_crossapp_Hide_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "Hide", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::Hide> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_Hide_class;
        p->proto = jsb_CrossApp_Hide_prototype;
        p->parentProto = jsb_CrossApp_ActionInstant_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_ToggleVisibility_class;
JSObject *jsb_CrossApp_ToggleVisibility_prototype;

bool js_crossapp_ToggleVisibility_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::ToggleVisibility* ret = CrossApp::ToggleVisibility::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::ToggleVisibility>(cx, (CrossApp::ToggleVisibility*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_ToggleVisibility_create : wrong number of arguments");
    return false;
}
bool js_crossapp_ToggleVisibility_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::ToggleVisibility* cobj = new (std::nothrow) CrossApp::ToggleVisibility();
    TypeTest<CrossApp::ToggleVisibility> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::ToggleVisibility");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_ActionInstant_prototype;

void js_CrossApp_ToggleVisibility_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (ToggleVisibility)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::ToggleVisibility *nobj = static_cast<CrossApp::ToggleVisibility *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_ToggleVisibility(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_ToggleVisibility_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_ToggleVisibility_class->name = "ToggleVisibility";
    jsb_CrossApp_ToggleVisibility_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_ToggleVisibility_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_ToggleVisibility_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_ToggleVisibility_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_ToggleVisibility_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_ToggleVisibility_class->resolve = JS_ResolveStub;
    jsb_CrossApp_ToggleVisibility_class->convert = JS_ConvertStub;
    jsb_CrossApp_ToggleVisibility_class->finalize = js_CrossApp_ToggleVisibility_finalize;
    jsb_CrossApp_ToggleVisibility_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_ToggleVisibility_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_ToggleVisibility_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInstant_prototype),
        jsb_CrossApp_ToggleVisibility_class,
        js_crossapp_ToggleVisibility_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "ToggleVisibility", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::ToggleVisibility> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_ToggleVisibility_class;
        p->proto = jsb_CrossApp_ToggleVisibility_prototype;
        p->parentProto = jsb_CrossApp_ActionInstant_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_RemoveSelf_class;
JSObject *jsb_CrossApp_RemoveSelf_prototype;

bool js_crossapp_RemoveSelf_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::RemoveSelf* cobj = (CrossApp::RemoveSelf *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_RemoveSelf_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_RemoveSelf_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_RemoveSelf_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::RemoveSelf* ret = CrossApp::RemoveSelf::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::RemoveSelf>(cx, (CrossApp::RemoveSelf*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_RemoveSelf_create : wrong number of arguments");
    return false;
}
bool js_crossapp_RemoveSelf_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::RemoveSelf* cobj = new (std::nothrow) CrossApp::RemoveSelf();
    TypeTest<CrossApp::RemoveSelf> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::RemoveSelf");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_ActionInstant_prototype;

void js_CrossApp_RemoveSelf_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (RemoveSelf)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::RemoveSelf *nobj = static_cast<CrossApp::RemoveSelf *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_RemoveSelf(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_RemoveSelf_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_RemoveSelf_class->name = "RemoveSelf";
    jsb_CrossApp_RemoveSelf_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_RemoveSelf_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_RemoveSelf_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_RemoveSelf_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_RemoveSelf_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_RemoveSelf_class->resolve = JS_ResolveStub;
    jsb_CrossApp_RemoveSelf_class->convert = JS_ConvertStub;
    jsb_CrossApp_RemoveSelf_class->finalize = js_CrossApp_RemoveSelf_finalize;
    jsb_CrossApp_RemoveSelf_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("init", js_crossapp_RemoveSelf_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_RemoveSelf_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_RemoveSelf_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInstant_prototype),
        jsb_CrossApp_RemoveSelf_class,
        js_crossapp_RemoveSelf_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "RemoveSelf", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::RemoveSelf> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_RemoveSelf_class;
        p->proto = jsb_CrossApp_RemoveSelf_prototype;
        p->parentProto = jsb_CrossApp_ActionInstant_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_FlipX_class;
JSObject *jsb_CrossApp_FlipX_prototype;

bool js_crossapp_FlipX_initWithFlipX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FlipX* cobj = (CrossApp::FlipX *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FlipX_initWithFlipX : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FlipX_initWithFlipX : Error processing arguments");
        bool ret = cobj->initWithFlipX(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FlipX_initWithFlipX : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_FlipX_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FlipX_create : Error processing arguments");
        CrossApp::FlipX* ret = CrossApp::FlipX::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::FlipX>(cx, (CrossApp::FlipX*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_FlipX_create : wrong number of arguments");
    return false;
}
bool js_crossapp_FlipX_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::FlipX* cobj = new (std::nothrow) CrossApp::FlipX();
    TypeTest<CrossApp::FlipX> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::FlipX");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_ActionInstant_prototype;

void js_CrossApp_FlipX_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (FlipX)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::FlipX *nobj = static_cast<CrossApp::FlipX *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_FlipX(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_FlipX_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_FlipX_class->name = "FlipX";
    jsb_CrossApp_FlipX_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_FlipX_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_FlipX_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_FlipX_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_FlipX_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_FlipX_class->resolve = JS_ResolveStub;
    jsb_CrossApp_FlipX_class->convert = JS_ConvertStub;
    jsb_CrossApp_FlipX_class->finalize = js_CrossApp_FlipX_finalize;
    jsb_CrossApp_FlipX_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("initWithFlipX", js_crossapp_FlipX_initWithFlipX, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_FlipX_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_FlipX_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInstant_prototype),
        jsb_CrossApp_FlipX_class,
        js_crossapp_FlipX_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "FlipX", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::FlipX> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_FlipX_class;
        p->proto = jsb_CrossApp_FlipX_prototype;
        p->parentProto = jsb_CrossApp_ActionInstant_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_FlipY_class;
JSObject *jsb_CrossApp_FlipY_prototype;

bool js_crossapp_FlipY_initWithFlipY(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::FlipY* cobj = (CrossApp::FlipY *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_FlipY_initWithFlipY : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FlipY_initWithFlipY : Error processing arguments");
        bool ret = cobj->initWithFlipY(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_FlipY_initWithFlipY : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_FlipY_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_FlipY_create : Error processing arguments");
        CrossApp::FlipY* ret = CrossApp::FlipY::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::FlipY>(cx, (CrossApp::FlipY*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_FlipY_create : wrong number of arguments");
    return false;
}
bool js_crossapp_FlipY_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::FlipY* cobj = new (std::nothrow) CrossApp::FlipY();
    TypeTest<CrossApp::FlipY> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::FlipY");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_ActionInstant_prototype;

void js_CrossApp_FlipY_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (FlipY)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::FlipY *nobj = static_cast<CrossApp::FlipY *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_FlipY(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_FlipY_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_FlipY_class->name = "FlipY";
    jsb_CrossApp_FlipY_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_FlipY_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_FlipY_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_FlipY_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_FlipY_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_FlipY_class->resolve = JS_ResolveStub;
    jsb_CrossApp_FlipY_class->convert = JS_ConvertStub;
    jsb_CrossApp_FlipY_class->finalize = js_CrossApp_FlipY_finalize;
    jsb_CrossApp_FlipY_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("initWithFlipY", js_crossapp_FlipY_initWithFlipY, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_FlipY_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_FlipY_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInstant_prototype),
        jsb_CrossApp_FlipY_class,
        js_crossapp_FlipY_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "FlipY", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::FlipY> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_FlipY_class;
        p->proto = jsb_CrossApp_FlipY_prototype;
        p->parentProto = jsb_CrossApp_ActionInstant_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_Place_class;
JSObject *jsb_CrossApp_Place_prototype;

bool js_crossapp_Place_initWithPosition(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::Place* cobj = (CrossApp::Place *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_Place_initWithPosition : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DPoint arg0;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Place_initWithPosition : Error processing arguments");
        bool ret = cobj->initWithPosition(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_Place_initWithPosition : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_Place_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DPoint arg0;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_Place_create : Error processing arguments");
        CrossApp::Place* ret = CrossApp::Place::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Place>(cx, (CrossApp::Place*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_Place_create : wrong number of arguments");
    return false;
}
bool js_crossapp_Place_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::Place* cobj = new (std::nothrow) CrossApp::Place();
    TypeTest<CrossApp::Place> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::Place");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_ActionInstant_prototype;

void js_CrossApp_Place_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (Place)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::Place *nobj = static_cast<CrossApp::Place *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_Place(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_Place_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_Place_class->name = "Place";
    jsb_CrossApp_Place_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_Place_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_Place_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_Place_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_Place_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_Place_class->resolve = JS_ResolveStub;
    jsb_CrossApp_Place_class->convert = JS_ConvertStub;
    jsb_CrossApp_Place_class->finalize = js_CrossApp_Place_finalize;
    jsb_CrossApp_Place_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("initWithPosition", js_crossapp_Place_initWithPosition, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_Place_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_Place_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInstant_prototype),
        jsb_CrossApp_Place_class,
        js_crossapp_Place_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "Place", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::Place> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_Place_class;
        p->proto = jsb_CrossApp_Place_prototype;
        p->parentProto = jsb_CrossApp_ActionInstant_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CallFunc_class;
JSObject *jsb_CrossApp_CallFunc_prototype;

bool js_crossapp_CallFunc_execute(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CallFunc* cobj = (CrossApp::CallFunc *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CallFunc_execute : Invalid Native Object");
    if (argc == 0) {
        cobj->execute();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CallFunc_execute : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_CallFunc_initWithFunction(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CallFunc* cobj = (CrossApp::CallFunc *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CallFunc_initWithFunction : Invalid Native Object");
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CallFunc_initWithFunction : Error processing arguments");
        bool ret = cobj->initWithFunction(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CallFunc_initWithFunction : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CallFunc_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::function<void ()> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok]() -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(0, nullptr, &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CallFunc_create : Error processing arguments");
        CrossApp::CallFunc* ret = CrossApp::CallFunc::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CallFunc>(cx, (CrossApp::CallFunc*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CallFunc_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CallFunc_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CallFunc* cobj = new (std::nothrow) CrossApp::CallFunc();
    TypeTest<CrossApp::CallFunc> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CallFunc");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_ActionInstant_prototype;

void js_CrossApp_CallFunc_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CallFunc)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CallFunc *nobj = static_cast<CrossApp::CallFunc *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CallFunc(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CallFunc_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CallFunc_class->name = "CallFunc";
    jsb_CrossApp_CallFunc_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CallFunc_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CallFunc_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CallFunc_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CallFunc_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CallFunc_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CallFunc_class->convert = JS_ConvertStub;
    jsb_CrossApp_CallFunc_class->finalize = js_CrossApp_CallFunc_finalize;
    jsb_CrossApp_CallFunc_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("execute", js_crossapp_CallFunc_execute, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithFunction", js_crossapp_CallFunc_initWithFunction, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CallFunc_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CallFunc_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_ActionInstant_prototype),
        jsb_CrossApp_CallFunc_class,
        js_crossapp_CallFunc_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CallFunc", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CallFunc> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CallFunc_class;
        p->proto = jsb_CrossApp_CallFunc_prototype;
        p->parentProto = jsb_CrossApp_ActionInstant_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_CallFuncN_class;
JSObject *jsb_CrossApp_CallFuncN_prototype;

bool js_crossapp_CallFuncN_initWithFunction(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CallFuncN* cobj = (CrossApp::CallFuncN *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_CallFuncN_initWithFunction : Invalid Native Object");
    if (argc == 1) {
        std::function<void (CrossApp::CGSprite *)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::CGSprite* larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            do {
		            if (larg0) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CGSprite>(cx, (CrossApp::CGSprite*)larg0);
		                largv[0] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[0] = JSVAL_NULL;
		            }
		        } while (0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CallFuncN_initWithFunction : Error processing arguments");
        bool ret = cobj->initWithFunction(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_CallFuncN_initWithFunction : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_CallFuncN_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::function<void (CrossApp::CGSprite *)> arg0;
        do {
		    if(JS_TypeOfValue(cx, args.get(0)) == JSTYPE_FUNCTION)
		    {
		        std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, args.thisv().toObjectOrNull(), args.get(0)));
		        auto lambda = [=, &ok](CrossApp::CGSprite* larg0) -> void {
		            JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
		            jsval largv[1];
		            do {
		            if (larg0) {
		                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CGSprite>(cx, (CrossApp::CGSprite*)larg0);
		                largv[0] = OBJECT_TO_JSVAL(jsProxy->obj);
		            } else {
		                largv[0] = JSVAL_NULL;
		            }
		        } while (0);
		            JS::RootedValue rval(cx);
		            bool succeed = func->invoke(1, &largv[0], &rval);
		            if (!succeed && JS_IsExceptionPending(cx)) {
		                JS_ReportPendingException(cx);
		            }
		        };
		        arg0 = lambda;
		    }
		    else
		    {
		        arg0 = nullptr;
		    }
		} while(0)
		;
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_CallFuncN_create : Error processing arguments");
        CrossApp::CallFuncN* ret = CrossApp::CallFuncN::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CallFuncN>(cx, (CrossApp::CallFuncN*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_CallFuncN_create : wrong number of arguments");
    return false;
}
bool js_crossapp_CallFuncN_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CallFuncN* cobj = new (std::nothrow) CrossApp::CallFuncN();
    TypeTest<CrossApp::CallFuncN> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::CallFuncN");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


extern JSObject *jsb_CrossApp_CallFunc_prototype;

void js_CrossApp_CallFuncN_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (CallFuncN)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CallFuncN *nobj = static_cast<CrossApp::CallFuncN *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_CallFuncN(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CallFuncN_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CallFuncN_class->name = "CallFuncN";
    jsb_CrossApp_CallFuncN_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CallFuncN_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CallFuncN_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CallFuncN_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CallFuncN_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CallFuncN_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CallFuncN_class->convert = JS_ConvertStub;
    jsb_CrossApp_CallFuncN_class->finalize = js_CrossApp_CallFuncN_finalize;
    jsb_CrossApp_CallFuncN_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("initWithFunction", js_crossapp_CallFuncN_initWithFunction, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_crossapp_CallFuncN_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CallFuncN_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CallFunc_prototype),
        jsb_CrossApp_CallFuncN_class,
        js_crossapp_CallFuncN_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "CallFuncN", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CallFuncN> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CallFuncN_class;
        p->proto = jsb_CrossApp_CallFuncN_prototype;
        p->parentProto = jsb_CrossApp_CallFunc_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
JSClass  *jsb_CrossApp_ActionManager_class;
JSObject *jsb_CrossApp_ActionManager_prototype;

bool js_crossapp_ActionManager_getActionByTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionManager* cobj = (CrossApp::ActionManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionManager_getActionByTag : Invalid Native Object");
    if (argc == 2) {
        int arg0 = 0;
        const CrossApp::CGSprite* arg1 = nullptr;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (const CrossApp::CGSprite*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_ActionManager_getActionByTag : Error processing arguments");
        CrossApp::Action* ret = cobj->getActionByTag(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::Action>(cx, (CrossApp::Action*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionManager_getActionByTag : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_ActionManager_removeActionByTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionManager* cobj = (CrossApp::ActionManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionManager_removeActionByTag : Invalid Native Object");
    if (argc == 2) {
        int arg0 = 0;
        CrossApp::CGSprite* arg1 = nullptr;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CGSprite*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_ActionManager_removeActionByTag : Error processing arguments");
        cobj->removeActionByTag(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionManager_removeActionByTag : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_ActionManager_removeActionsByFlags(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionManager* cobj = (CrossApp::ActionManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionManager_removeActionsByFlags : Invalid Native Object");
    if (argc == 2) {
        uint32_t arg0 = 0;
        CrossApp::CGSprite* arg1 = nullptr;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CGSprite*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_ActionManager_removeActionsByFlags : Error processing arguments");
        cobj->removeActionsByFlags(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionManager_removeActionsByFlags : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_ActionManager_removeAllActions(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionManager* cobj = (CrossApp::ActionManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionManager_removeAllActions : Invalid Native Object");
    if (argc == 0) {
        cobj->removeAllActions();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionManager_removeAllActions : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_ActionManager_addAction(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionManager* cobj = (CrossApp::ActionManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionManager_addAction : Invalid Native Object");
    if (argc == 3) {
        CrossApp::Action* arg0 = nullptr;
        CrossApp::CGSprite* arg1 = nullptr;
        bool arg2;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::Action*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CGSprite*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        arg2 = JS::ToBoolean(args.get(2));
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_ActionManager_addAction : Error processing arguments");
        cobj->addAction(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionManager_addAction : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_crossapp_ActionManager_resumeTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionManager* cobj = (CrossApp::ActionManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionManager_resumeTarget : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CGSprite* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CGSprite*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_ActionManager_resumeTarget : Error processing arguments");
        cobj->resumeTarget(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionManager_resumeTarget : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_ActionManager_update(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionManager* cobj = (CrossApp::ActionManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionManager_update : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_ActionManager_update : Error processing arguments");
        cobj->update(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionManager_update : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_ActionManager_pauseTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionManager* cobj = (CrossApp::ActionManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionManager_pauseTarget : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CGSprite* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CGSprite*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_ActionManager_pauseTarget : Error processing arguments");
        cobj->pauseTarget(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionManager_pauseTarget : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_ActionManager_getNumberOfRunningActionsInTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionManager* cobj = (CrossApp::ActionManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionManager_getNumberOfRunningActionsInTarget : Invalid Native Object");
    if (argc == 1) {
        const CrossApp::CGSprite* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::CGSprite*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_ActionManager_getNumberOfRunningActionsInTarget : Error processing arguments");
        ssize_t ret = cobj->getNumberOfRunningActionsInTarget(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = ssize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionManager_getNumberOfRunningActionsInTarget : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_ActionManager_removeAllActionsFromTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionManager* cobj = (CrossApp::ActionManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionManager_removeAllActionsFromTarget : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CGSprite* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CGSprite*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_ActionManager_removeAllActionsFromTarget : Error processing arguments");
        cobj->removeAllActionsFromTarget(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionManager_removeAllActionsFromTarget : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_ActionManager_resumeTargets(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionManager* cobj = (CrossApp::ActionManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionManager_resumeTargets : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAVector<CrossApp::CGSprite *> arg0;
        ok &= jsval_to_cavector(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_ActionManager_resumeTargets : Error processing arguments");
        cobj->resumeTargets(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionManager_resumeTargets : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_ActionManager_removeAction(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionManager* cobj = (CrossApp::ActionManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionManager_removeAction : Invalid Native Object");
    if (argc == 1) {
        CrossApp::Action* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::Action*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_ActionManager_removeAction : Error processing arguments");
        cobj->removeAction(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionManager_removeAction : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_ActionManager_removeAllActionsByTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionManager* cobj = (CrossApp::ActionManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionManager_removeAllActionsByTag : Invalid Native Object");
    if (argc == 2) {
        int arg0 = 0;
        CrossApp::CGSprite* arg1 = nullptr;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CGSprite*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, 0, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_ActionManager_removeAllActionsByTag : Error processing arguments");
        cobj->removeAllActionsByTag(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionManager_removeAllActionsByTag : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_crossapp_ActionManager_pauseAllRunningActions(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::ActionManager* cobj = (CrossApp::ActionManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_ActionManager_pauseAllRunningActions : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAVector<CrossApp::CGSprite *> ret = cobj->pauseAllRunningActions();
        jsval jsret = JSVAL_NULL;
        jsret = cavector_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_ActionManager_pauseAllRunningActions : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_ActionManager_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::ActionManager* cobj = new (std::nothrow) CrossApp::ActionManager();
    TypeTest<CrossApp::ActionManager> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::ActionManager");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}
static bool js_crossapp_ActionManager_ctor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    CrossApp::ActionManager *nobj = new (std::nothrow) CrossApp::ActionManager();
    js_proxy_t* p = jsb_new_proxy(nobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CrossApp::ActionManager");
    bool isFound = false;
    if (JS_HasProperty(cx, obj, "_ctor", &isFound) && isFound)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    args.rval().setUndefined();
    return true;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_ActionManager_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (ActionManager)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::ActionManager *nobj = static_cast<CrossApp::ActionManager *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
    
void js_register_crossapp_ActionManager(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_ActionManager_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_ActionManager_class->name = "ActionManager";
    jsb_CrossApp_ActionManager_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_ActionManager_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_ActionManager_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_ActionManager_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_ActionManager_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_ActionManager_class->resolve = JS_ResolveStub;
    jsb_CrossApp_ActionManager_class->convert = JS_ConvertStub;
    jsb_CrossApp_ActionManager_class->finalize = js_CrossApp_ActionManager_finalize;
    jsb_CrossApp_ActionManager_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getActionByTag", js_crossapp_ActionManager_getActionByTag, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeActionByTag", js_crossapp_ActionManager_removeActionByTag, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeActionsByFlags", js_crossapp_ActionManager_removeActionsByFlags, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeAllActions", js_crossapp_ActionManager_removeAllActions, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addAction", js_crossapp_ActionManager_addAction, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("resumeTarget", js_crossapp_ActionManager_resumeTarget, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("update", js_crossapp_ActionManager_update, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("pauseTarget", js_crossapp_ActionManager_pauseTarget, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNumberOfRunningActionsInTarget", js_crossapp_ActionManager_getNumberOfRunningActionsInTarget, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeAllActionsFromTarget", js_crossapp_ActionManager_removeAllActionsFromTarget, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("resumeTargets", js_crossapp_ActionManager_resumeTargets, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeAction", js_crossapp_ActionManager_removeAction, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeAllActionsByTag", js_crossapp_ActionManager_removeAllActionsByTag, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("pauseAllRunningActions", js_crossapp_ActionManager_pauseAllRunningActions, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ctor", js_crossapp_ActionManager_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_ActionManager_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_ActionManager_class,
        js_crossapp_ActionManager_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "ActionManager", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::ActionManager> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_ActionManager_class;
        p->proto = jsb_CrossApp_ActionManager_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
    anonEvaluate(cx, global, "(function () { ca.ActionManager.extend = ca.Class.extend; })()");
}
JSClass  *jsb_CocosDenshion_SimpleAudioEngine_class;
JSObject *jsb_CocosDenshion_SimpleAudioEngine_prototype;

bool js_crossapp_SimpleAudioEngine_stopAllEffects(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_SimpleAudioEngine_stopAllEffects : Invalid Native Object");
    if (argc == 0) {
        cobj->stopAllEffects();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_SimpleAudioEngine_stopAllEffects : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_SimpleAudioEngine_getEffectsVolume(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_SimpleAudioEngine_getEffectsVolume : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getEffectsVolume();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_SimpleAudioEngine_getEffectsVolume : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_SimpleAudioEngine_stopEffect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_SimpleAudioEngine_stopEffect : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_SimpleAudioEngine_stopEffect : Error processing arguments");
        cobj->stopEffect(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_SimpleAudioEngine_stopEffect : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_SimpleAudioEngine_getBackgroundMusicVolume(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_SimpleAudioEngine_getBackgroundMusicVolume : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getBackgroundMusicVolume();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_SimpleAudioEngine_getBackgroundMusicVolume : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_SimpleAudioEngine_willPlayBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_SimpleAudioEngine_willPlayBackgroundMusic : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->willPlayBackgroundMusic();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_SimpleAudioEngine_willPlayBackgroundMusic : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_SimpleAudioEngine_setBackgroundMusicVolume(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_SimpleAudioEngine_setBackgroundMusicVolume : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_SimpleAudioEngine_setBackgroundMusicVolume : Error processing arguments");
        cobj->setBackgroundMusicVolume(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_SimpleAudioEngine_setBackgroundMusicVolume : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_SimpleAudioEngine_stopBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CocosDenshion::SimpleAudioEngine *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_SimpleAudioEngine_stopBackgroundMusic : Invalid Native Object");
    do {
        if (argc == 0) {
            cobj->stopBackgroundMusic();
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 1) {
            bool arg0;
            arg0 = JS::ToBoolean(args.get(0));
            cobj->stopBackgroundMusic(arg0);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_SimpleAudioEngine_stopBackgroundMusic : wrong number of arguments");
    return false;
}
bool js_crossapp_SimpleAudioEngine_pauseBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_SimpleAudioEngine_pauseBackgroundMusic : Invalid Native Object");
    if (argc == 0) {
        cobj->pauseBackgroundMusic();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_SimpleAudioEngine_pauseBackgroundMusic : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_SimpleAudioEngine_isBackgroundMusicPlaying(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_SimpleAudioEngine_isBackgroundMusicPlaying : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isBackgroundMusicPlaying();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_SimpleAudioEngine_isBackgroundMusicPlaying : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_SimpleAudioEngine_resumeAllEffects(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_SimpleAudioEngine_resumeAllEffects : Invalid Native Object");
    if (argc == 0) {
        cobj->resumeAllEffects();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_SimpleAudioEngine_resumeAllEffects : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_SimpleAudioEngine_pauseAllEffects(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_SimpleAudioEngine_pauseAllEffects : Invalid Native Object");
    if (argc == 0) {
        cobj->pauseAllEffects();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_SimpleAudioEngine_pauseAllEffects : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_SimpleAudioEngine_preloadBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_SimpleAudioEngine_preloadBackgroundMusic : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_SimpleAudioEngine_preloadBackgroundMusic : Error processing arguments");
        cobj->preloadBackgroundMusic(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_SimpleAudioEngine_preloadBackgroundMusic : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_SimpleAudioEngine_playBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CocosDenshion::SimpleAudioEngine *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_SimpleAudioEngine_playBackgroundMusic : Invalid Native Object");
    do {
        if (argc == 1) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            cobj->playBackgroundMusic(arg0);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 2) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            bool arg1;
            arg1 = JS::ToBoolean(args.get(1));
            cobj->playBackgroundMusic(arg0, arg1);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_SimpleAudioEngine_playBackgroundMusic : wrong number of arguments");
    return false;
}
bool js_crossapp_SimpleAudioEngine_playEffect(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CocosDenshion::SimpleAudioEngine *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_SimpleAudioEngine_playEffect : Invalid Native Object");
    do {
        if (argc == 1) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            uint32_t ret = cobj->playEffect(arg0);
            jsval jsret = JSVAL_NULL;
            jsret = uint32_to_jsval(cx, ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 2) {
            const char* arg0 = nullptr;
            std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
            if (!ok) { ok = true; break; }
            bool arg1;
            arg1 = JS::ToBoolean(args.get(1));
            uint32_t ret = cobj->playEffect(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            jsret = uint32_to_jsval(cx, ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_crossapp_SimpleAudioEngine_playEffect : wrong number of arguments");
    return false;
}
bool js_crossapp_SimpleAudioEngine_preloadEffect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_SimpleAudioEngine_preloadEffect : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_SimpleAudioEngine_preloadEffect : Error processing arguments");
        cobj->preloadEffect(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_SimpleAudioEngine_preloadEffect : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_SimpleAudioEngine_unloadEffect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_SimpleAudioEngine_unloadEffect : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_SimpleAudioEngine_unloadEffect : Error processing arguments");
        cobj->unloadEffect(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_SimpleAudioEngine_unloadEffect : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_SimpleAudioEngine_rewindBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_SimpleAudioEngine_rewindBackgroundMusic : Invalid Native Object");
    if (argc == 0) {
        cobj->rewindBackgroundMusic();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_SimpleAudioEngine_rewindBackgroundMusic : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_SimpleAudioEngine_pauseEffect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_SimpleAudioEngine_pauseEffect : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_SimpleAudioEngine_pauseEffect : Error processing arguments");
        cobj->pauseEffect(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_SimpleAudioEngine_pauseEffect : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_SimpleAudioEngine_getClassTypeInfo(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_SimpleAudioEngine_getClassTypeInfo : Invalid Native Object");
    if (argc == 0) {
        long ret = cobj->getClassTypeInfo();
        jsval jsret = JSVAL_NULL;
        jsret = long_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_crossapp_SimpleAudioEngine_getClassTypeInfo : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_SimpleAudioEngine_resumeBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_SimpleAudioEngine_resumeBackgroundMusic : Invalid Native Object");
    if (argc == 0) {
        cobj->resumeBackgroundMusic();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_SimpleAudioEngine_resumeBackgroundMusic : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_crossapp_SimpleAudioEngine_setEffectsVolume(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_SimpleAudioEngine_setEffectsVolume : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_SimpleAudioEngine_setEffectsVolume : Error processing arguments");
        cobj->setEffectsVolume(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_SimpleAudioEngine_setEffectsVolume : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_SimpleAudioEngine_resumeEffect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CocosDenshion::SimpleAudioEngine* cobj = (CocosDenshion::SimpleAudioEngine *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_crossapp_SimpleAudioEngine_resumeEffect : Invalid Native Object");
    if (argc == 1) {
        uint32_t arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_crossapp_SimpleAudioEngine_resumeEffect : Error processing arguments");
        cobj->resumeEffect(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_crossapp_SimpleAudioEngine_resumeEffect : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_crossapp_SimpleAudioEngine_end(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CocosDenshion::SimpleAudioEngine::end();
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_crossapp_SimpleAudioEngine_end : wrong number of arguments");
    return false;
}
bool js_crossapp_SimpleAudioEngine_sharedEngine(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CocosDenshion::SimpleAudioEngine* ret = CocosDenshion::SimpleAudioEngine::sharedEngine();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CocosDenshion::SimpleAudioEngine>(cx, (CocosDenshion::SimpleAudioEngine*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_crossapp_SimpleAudioEngine_sharedEngine : wrong number of arguments");
    return false;
}
bool js_crossapp_SimpleAudioEngine_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CocosDenshion::SimpleAudioEngine* cobj = new (std::nothrow) CocosDenshion::SimpleAudioEngine();
    TypeTest<CocosDenshion::SimpleAudioEngine> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    AddNamedObjectRoot(cx, &p->obj, "CocosDenshion::SimpleAudioEngine");
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}


void js_CocosDenshion_SimpleAudioEngine_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOG("jsbindings: finalizing JS object %p (SimpleAudioEngine)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CocosDenshion::SimpleAudioEngine *nobj = static_cast<CocosDenshion::SimpleAudioEngine *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_crossapp_SimpleAudioEngine(JSContext *cx, JS::HandleObject global) {
    jsb_CocosDenshion_SimpleAudioEngine_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CocosDenshion_SimpleAudioEngine_class->name = "SimpleAudioEngine";
    jsb_CocosDenshion_SimpleAudioEngine_class->addProperty = JS_PropertyStub;
    jsb_CocosDenshion_SimpleAudioEngine_class->delProperty = JS_DeletePropertyStub;
    jsb_CocosDenshion_SimpleAudioEngine_class->getProperty = JS_PropertyStub;
    jsb_CocosDenshion_SimpleAudioEngine_class->setProperty = JS_StrictPropertyStub;
    jsb_CocosDenshion_SimpleAudioEngine_class->enumerate = JS_EnumerateStub;
    jsb_CocosDenshion_SimpleAudioEngine_class->resolve = JS_ResolveStub;
    jsb_CocosDenshion_SimpleAudioEngine_class->convert = JS_ConvertStub;
    jsb_CocosDenshion_SimpleAudioEngine_class->finalize = js_CocosDenshion_SimpleAudioEngine_finalize;
    jsb_CocosDenshion_SimpleAudioEngine_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("stopAllEffects", js_crossapp_SimpleAudioEngine_stopAllEffects, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getEffectsVolume", js_crossapp_SimpleAudioEngine_getEffectsVolume, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("stopEffect", js_crossapp_SimpleAudioEngine_stopEffect, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBackgroundMusicVolume", js_crossapp_SimpleAudioEngine_getBackgroundMusicVolume, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("willPlayBackgroundMusic", js_crossapp_SimpleAudioEngine_willPlayBackgroundMusic, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundMusicVolume", js_crossapp_SimpleAudioEngine_setBackgroundMusicVolume, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("stopBackgroundMusic", js_crossapp_SimpleAudioEngine_stopBackgroundMusic, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("pauseBackgroundMusic", js_crossapp_SimpleAudioEngine_pauseBackgroundMusic, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isBackgroundMusicPlaying", js_crossapp_SimpleAudioEngine_isBackgroundMusicPlaying, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("resumeAllEffects", js_crossapp_SimpleAudioEngine_resumeAllEffects, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("pauseAllEffects", js_crossapp_SimpleAudioEngine_pauseAllEffects, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("preloadBackgroundMusic", js_crossapp_SimpleAudioEngine_preloadBackgroundMusic, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("playBackgroundMusic", js_crossapp_SimpleAudioEngine_playBackgroundMusic, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("playEffect", js_crossapp_SimpleAudioEngine_playEffect, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("preloadEffect", js_crossapp_SimpleAudioEngine_preloadEffect, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("unloadEffect", js_crossapp_SimpleAudioEngine_unloadEffect, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("rewindBackgroundMusic", js_crossapp_SimpleAudioEngine_rewindBackgroundMusic, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("pauseEffect", js_crossapp_SimpleAudioEngine_pauseEffect, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getClassTypeInfo", js_crossapp_SimpleAudioEngine_getClassTypeInfo, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("resumeBackgroundMusic", js_crossapp_SimpleAudioEngine_resumeBackgroundMusic, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setEffectsVolume", js_crossapp_SimpleAudioEngine_setEffectsVolume, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("resumeEffect", js_crossapp_SimpleAudioEngine_resumeEffect, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("end", js_crossapp_SimpleAudioEngine_end, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("sharedEngine", js_crossapp_SimpleAudioEngine_sharedEngine, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CocosDenshion_SimpleAudioEngine_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CocosDenshion_SimpleAudioEngine_class,
        js_crossapp_SimpleAudioEngine_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27
//  JS_SetPropertyAttributes(cx, global, "SimpleAudioEngine", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CocosDenshion::SimpleAudioEngine> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CocosDenshion_SimpleAudioEngine_class;
        p->proto = jsb_CocosDenshion_SimpleAudioEngine_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}
void register_all_crossapp(JSContext* cx, JS::HandleObject obj) {
    // Get the ns
    JS::RootedObject ns(cx);
    get_or_create_js_obj(cx, obj, "ca", &ns);

    js_register_crossapp_CAObject(cx, ns);
    js_register_crossapp_Action(cx, ns);
    js_register_crossapp_FiniteTimeAction(cx, ns);
    js_register_crossapp_ActionInstant(cx, ns);
    js_register_crossapp_Hide(cx, ns);
    js_register_crossapp_SimpleAudioEngine(cx, ns);
    js_register_crossapp_CAApplication(cx, ns);
    js_register_crossapp_CAResponder(cx, ns);
    js_register_crossapp_CAView(cx, ns);
    js_register_crossapp_CAControl(cx, ns);
    js_register_crossapp_CACustomAnimation(cx, ns);
    js_register_crossapp_ActionInterval(cx, ns);
    js_register_crossapp_BezierBy(cx, ns);
    js_register_crossapp_BezierTo(cx, ns);
    js_register_crossapp_ActionCamera(cx, ns);
    js_register_crossapp_CABar(cx, ns);
    js_register_crossapp_CATabBar(cx, ns);
    js_register_crossapp_MoveBy(cx, ns);
    js_register_crossapp_MoveTo(cx, ns);
    js_register_crossapp_JumpBy(cx, ns);
    js_register_crossapp_ActionEase(cx, ns);
    js_register_crossapp_EaseBounce(cx, ns);
    js_register_crossapp_EaseBounceIn(cx, ns);
    js_register_crossapp_CAPullToRefreshView(cx, ns);
    js_register_crossapp_CGSprite(cx, ns);
    js_register_crossapp_EaseElastic(cx, ns);
    js_register_crossapp_EaseElasticOut(cx, ns);
    js_register_crossapp_CABarItem(cx, ns);
    js_register_crossapp_CABarButtonItem(cx, ns);
    js_register_crossapp_EaseBackOut(cx, ns);
    js_register_crossapp_CAFontProcesstor(cx, ns);
    js_register_crossapp_CATabBarItem(cx, ns);
    js_register_crossapp_CAWindow(cx, ns);
    js_register_crossapp_CALabel(cx, ns);
    js_register_crossapp_SkewTo(cx, ns);
    js_register_crossapp_SkewBy(cx, ns);
    js_register_crossapp_CAAVPlayer(cx, ns);
    js_register_crossapp_EaseElasticInOut(cx, ns);
    js_register_crossapp_FadeTo(cx, ns);
    js_register_crossapp_FadeIn(cx, ns);
    js_register_crossapp_AnimationCache(cx, ns);
    js_register_crossapp_CAScheduler(cx, ns);
    js_register_crossapp_EaseSineInOut(cx, ns);
    js_register_crossapp_CAAddressBook(cx, ns);
    js_register_crossapp_CAProgress(cx, ns);
    js_register_crossapp_CAAlertView(cx, ns);
    js_register_crossapp_Show(cx, ns);
    js_register_crossapp_CAClipboard(cx, ns);
    js_register_crossapp_CallFunc(cx, ns);
    js_register_crossapp_EaseBezierAction(cx, ns);
    js_register_crossapp_CAViewController(cx, ns);
    js_register_crossapp_CATabBarController(cx, ns);
    js_register_crossapp_CAAVPlayerView(cx, ns);
    js_register_crossapp_FadeOut(cx, ns);
    js_register_crossapp_CACell(cx, ns);
    js_register_crossapp_CAWaterfallViewCell(cx, ns);
    js_register_crossapp_CGSpriteFrameCache(cx, ns);
    js_register_crossapp_CADatePickerView(cx, ns);
    js_register_crossapp_EaseRateAction(cx, ns);
    js_register_crossapp_EaseIn(cx, ns);
    js_register_crossapp_EaseExponentialInOut(cx, ns);
    js_register_crossapp_EaseBackInOut(cx, ns);
    js_register_crossapp_EaseExponentialOut(cx, ns);
    js_register_crossapp_DelayTime(cx, ns);
    js_register_crossapp_EaseQuarticActionInOut(cx, ns);
    js_register_crossapp_CARenderImage(cx, ns);
    js_register_crossapp_ScaleTo(cx, ns);
    js_register_crossapp_CANavigationBarItem(cx, ns);
    js_register_crossapp_EaseElasticIn(cx, ns);
    js_register_crossapp_EaseCircleActionInOut(cx, ns);
    js_register_crossapp_CATextField(cx, ns);
    js_register_crossapp_EaseQuarticActionOut(cx, ns);
    js_register_crossapp_EaseCubicActionIn(cx, ns);
    js_register_crossapp_ActionTween(cx, ns);
    js_register_crossapp_CAClippingView(cx, ns);
    js_register_crossapp_FlipX(cx, ns);
    js_register_crossapp_FlipY(cx, ns);
    js_register_crossapp_CAWebView(cx, ns);
    js_register_crossapp_CADownloadManager(cx, ns);
    js_register_crossapp_CAScrollView(cx, ns);
    js_register_crossapp_CACollectionView(cx, ns);
    js_register_crossapp_RepeatForever(cx, ns);
    js_register_crossapp_CASwitch(cx, ns);
    js_register_crossapp_CAScanQRcode(cx, ns);
    js_register_crossapp_EaseBounceOut(cx, ns);
    js_register_crossapp_CAUserDefault(cx, ns);
    js_register_crossapp_CAAutoCollectionView(cx, ns);
    js_register_crossapp_CAPageControl(cx, ns);
    js_register_crossapp_ActionFloat(cx, ns);
    js_register_crossapp_EaseQuadraticActionOut(cx, ns);
    js_register_crossapp_EaseCircleActionIn(cx, ns);
    js_register_crossapp_CATableView(cx, ns);
    js_register_crossapp_CAPickerView(cx, ns);
    js_register_crossapp_Blink(cx, ns);
    js_register_crossapp_JumpTo(cx, ns);
    js_register_crossapp_CATouch(cx, ns);
    js_register_crossapp_Place(cx, ns);
    js_register_crossapp_EaseSineIn(cx, ns);
    js_register_crossapp_RotateBy(cx, ns);
    js_register_crossapp_CAGifView(cx, ns);
    js_register_crossapp_EaseQuinticActionIn(cx, ns);
    js_register_crossapp_CAActivityIndicatorView(cx, ns);
    js_register_crossapp_CAImageView(cx, ns);
    js_register_crossapp_CASlider(cx, ns);
    js_register_crossapp_CAQrencode(cx, ns);
    js_register_crossapp_ToggleVisibility(cx, ns);
    js_register_crossapp_Repeat(cx, ns);
    js_register_crossapp_CASegmentedControl(cx, ns);
    js_register_crossapp_CAData(cx, ns);
    js_register_crossapp_CAHttpClient(cx, ns);
    js_register_crossapp_TintTo(cx, ns);
    js_register_crossapp_CADrawView(cx, ns);
    js_register_crossapp_CGSpriteFrame(cx, ns);
    js_register_crossapp_TargetedAction(cx, ns);
    js_register_crossapp_CADrawerController(cx, ns);
    js_register_crossapp_RotateTo(cx, ns);
    js_register_crossapp_CAHttpRequest(cx, ns);
    js_register_crossapp_ActionManager(cx, ns);
    js_register_crossapp_CallFuncN(cx, ns);
    js_register_crossapp_CATableViewCell(cx, ns);
    js_register_crossapp_RemoveSelf(cx, ns);
    js_register_crossapp_EaseQuinticActionInOut(cx, ns);
    js_register_crossapp_CAKeypadDispatcher(cx, ns);
    js_register_crossapp_EaseQuadraticActionInOut(cx, ns);
    js_register_crossapp_CANotificationCenter(cx, ns);
    js_register_crossapp_Spawn(cx, ns);
    js_register_crossapp_CAHttpResponse(cx, ns);
    js_register_crossapp_EaseCircleActionOut(cx, ns);
    js_register_crossapp_EaseBackIn(cx, ns);
    js_register_crossapp_CADevice(cx, ns);
    js_register_crossapp_CAImagePickerController(cx, ns);
    js_register_crossapp_TintBy(cx, ns);
    js_register_crossapp_Animate(cx, ns);
    js_register_crossapp_ReverseTime(cx, ns);
    js_register_crossapp_EaseQuarticActionIn(cx, ns);
    js_register_crossapp_CAEvent(cx, ns);
    js_register_crossapp_CAStepper(cx, ns);
    js_register_crossapp_CACollectionViewCell(cx, ns);
    js_register_crossapp_EaseInOut(cx, ns);
    js_register_crossapp_ScaleBy(cx, ns);
    js_register_crossapp_CAListViewCell(cx, ns);
    js_register_crossapp_CATouchController(cx, ns);
    js_register_crossapp_Animation(cx, ns);
    js_register_crossapp_EaseExponentialIn(cx, ns);
    js_register_crossapp_CACheckbox(cx, ns);
    js_register_crossapp_EaseQuinticActionOut(cx, ns);
    js_register_crossapp_CAImage(cx, ns);
    js_register_crossapp_CAWaterfallView(cx, ns);
    js_register_crossapp_CAScale9ImageView(cx, ns);
    js_register_crossapp_CARichLabel(cx, ns);
    js_register_crossapp_CAImageCache(cx, ns);
    js_register_crossapp_CAPageView(cx, ns);
    js_register_crossapp_EaseCubicActionInOut(cx, ns);
    js_register_crossapp_CATextView(cx, ns);
    js_register_crossapp_CAButton(cx, ns);
    js_register_crossapp_EaseOut(cx, ns);
    js_register_crossapp_CAGif(cx, ns);
    js_register_crossapp_CAViewAnimation(cx, ns);
    js_register_crossapp_EaseSineOut(cx, ns);
    js_register_crossapp_CAMotionManager(cx, ns);
    js_register_crossapp_CANavigationBar(cx, ns);
    js_register_crossapp_FileUtils(cx, ns);
    js_register_crossapp_CAListView(cx, ns);
    js_register_crossapp_Sequence(cx, ns);
    js_register_crossapp_EaseCubicActionOut(cx, ns);
    js_register_crossapp_EaseBounceInOut(cx, ns);
    js_register_crossapp_CANavigationController(cx, ns);
    js_register_crossapp_EaseQuadraticActionIn(cx, ns);
    js_register_crossapp_CGProgressTimer(cx, ns);
}

